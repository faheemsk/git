/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.optum.oss.excelviews;

import com.optum.oss.dto.ClientEngagementDTO;
import com.optum.oss.dto.VulnerabilityDTO;
import com.optum.oss.exception.AppException;
import com.optum.oss.util.CommonUtil;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFClientAnchor;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.util.CellRangeAddress;
import org.springframework.web.servlet.view.document.AbstractExcelView;

/**
 *
 * @author sathuluri
 */
public class AnalystVulnerabilityExcelView extends AbstractExcelView {

    private static final Logger log = Logger.getLogger(AnalystVulnerabilityExcelView.class);

    /**
     *
     * @param model
     * @param workbook
     * @param request
     * @param response
     * @throws AppException
     */
    @Override
    protected void buildExcelDocument(Map<String, Object> model, HSSFWorkbook workbook, HttpServletRequest request, HttpServletResponse response) throws AppException {
        log.info("Start: AnalystVulnerabilityExcelView : buildExcelDocument() for build excel report based on selected vulnerabilities");
        try {
            Calendar currentDate = Calendar.getInstance(); //Get the current date
            DateFormat dateFormatH = new SimpleDateFormat("MM/dd/yyyy HH:mm");
            String dateNow = dateFormatH.format(currentDate.getTime());
            log.info("Now the date is :=>  " + dateNow);

            Font font = workbook.createFont();
            font.setFontName("Arial");
            font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
            font.setColor(HSSFColor.BLACK.index);

            HSSFCellStyle engagementStyle = workbook.createCellStyle();
            engagementStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
            engagementStyle.setFillForegroundColor(HSSFColor.GREY_25_PERCENT.index);
            engagementStyle.setFont(font);

            HSSFCellStyle selectedCriteriaCellStyle = workbook.createCellStyle();
            selectedCriteriaCellStyle.setFont(font);

            HSSFCellStyle cellStyle = workbook.createCellStyle();
            cellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
            cellStyle.setFillForegroundColor(HSSFColor.GREY_25_PERCENT.index);

            HSSFCellStyle vulnerabilityCellStyle = workbook.createCellStyle();
            vulnerabilityCellStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
            vulnerabilityCellStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);
            vulnerabilityCellStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);
            vulnerabilityCellStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
            vulnerabilityCellStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_TOP);
            vulnerabilityCellStyle.setWrapText(true);

            HSSFCellStyle vulnerabilityBorderStyle = workbook.createCellStyle();
            vulnerabilityBorderStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
            vulnerabilityBorderStyle.setFillForegroundColor(HSSFColor.LIGHT_GREEN.index);
            vulnerabilityBorderStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);
            vulnerabilityBorderStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
            vulnerabilityBorderStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
            vulnerabilityBorderStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
            vulnerabilityBorderStyle.setFont(font);

            HSSFCellStyle cvssRiskBorderStyle = workbook.createCellStyle();
            cvssRiskBorderStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
            cvssRiskBorderStyle.setFillForegroundColor(HSSFColor.LIGHT_GREEN.index);
            cvssRiskBorderStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
            cvssRiskBorderStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);
            cvssRiskBorderStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);
            cvssRiskBorderStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
            cvssRiskBorderStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
            cvssRiskBorderStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
            cvssRiskBorderStyle.setFont(font);

            HSSFCellStyle scoreBorderStyle = workbook.createCellStyle();
            scoreBorderStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
            scoreBorderStyle.setFillForegroundColor(HSSFColor.LIGHT_ORANGE.index);
            scoreBorderStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
            scoreBorderStyle.setFont(font);

            ClientEngagementDTO clientEngagementDto = (ClientEngagementDTO) model.get("engagementDTO");

            HSSFSheet excelSheet = workbook.createSheet("Findings_" + clientEngagementDto.getEngagementCode());
            excelSheet.setDefaultColumnWidth(22);
            excelSheet.addMergedRegion(CellRangeAddress.valueOf("$AB$4:$AE$4"));
            excelSheet.addMergedRegion(CellRangeAddress.valueOf("$AF$4:$AH$4"));

            ClientAnchor my_anchor = new HSSFClientAnchor();
            my_anchor.setCol1(0);
            my_anchor.setRow1(1);

            HSSFRow excelHeader = excelSheet.createRow(0);
            excelHeader.createCell(0).setCellValue("Client Name");
            excelHeader.createCell(1).setCellValue("Engagement Code");
            excelHeader.createCell(2).setCellValue("Engagement Name");
            excelHeader.createCell(3).setCellValue("Product");
            excelHeader.createCell(4).setCellValue("Agreement Date");

            excelHeader.getCell(0).setCellStyle(engagementStyle);
            excelHeader.getCell(1).setCellStyle(engagementStyle);
            excelHeader.getCell(2).setCellStyle(engagementStyle);
            excelHeader.getCell(3).setCellStyle(engagementStyle);
            excelHeader.getCell(4).setCellStyle(engagementStyle);

            HSSFRow excelRowForEngagement = excelSheet.createRow(1);
            excelRowForEngagement.createCell(0).setCellValue(clientEngagementDto.getClientName());
            excelRowForEngagement.createCell(1).setCellValue(clientEngagementDto.getEngagementCode());
            excelRowForEngagement.createCell(2).setCellValue(clientEngagementDto.getEngagementName());
            excelRowForEngagement.createCell(3).setCellValue(clientEngagementDto.getSecurityPackageObj().getSecurityPackageName());
            excelRowForEngagement.createCell(4).setCellValue(clientEngagementDto.getAgreementDate());

            excelRowForEngagement.getCell(0).setCellStyle(cellStyle);
            excelRowForEngagement.getCell(1).setCellStyle(cellStyle);
            excelRowForEngagement.getCell(2).setCellStyle(cellStyle);
            excelRowForEngagement.getCell(3).setCellStyle(cellStyle);
            excelRowForEngagement.getCell(4).setCellStyle(cellStyle);

            HSSFRow vulnerabilityHeader = excelSheet.createRow(3);
            vulnerabilityHeader.setHeight((short) 700);
            vulnerabilityHeader.createCell(0).setCellValue("Finding Instance");
            vulnerabilityHeader.createCell(1).setCellValue("Finding Name");
            vulnerabilityHeader.createCell(2).setCellValue("Service");
            vulnerabilityHeader.createCell(3).setCellValue("Source");
            vulnerabilityHeader.createCell(4).setCellValue("Cost Effort");
            vulnerabilityHeader.createCell(5).setCellValue("Domain");
            vulnerabilityHeader.createCell(6).setCellValue("IP Address");
            vulnerabilityHeader.createCell(7).setCellValue("Severity");
            vulnerabilityHeader.createCell(8).setCellValue("Status");
            vulnerabilityHeader.createCell(9).setCellValue("Scan Identifier");
            vulnerabilityHeader.createCell(10).setCellValue("Scan Start Date");
            vulnerabilityHeader.createCell(11).setCellValue("Scan End Date");
            vulnerabilityHeader.createCell(12).setCellValue("Application Name");
            vulnerabilityHeader.createCell(13).setCellValue("Host");
            vulnerabilityHeader.createCell(14).setCellValue("URL");
            vulnerabilityHeader.createCell(15).setCellValue("Operating System");
            vulnerabilityHeader.createCell(16).setCellValue("Netbios");
            vulnerabilityHeader.createCell(17).setCellValue("MAC Address");
            vulnerabilityHeader.createCell(18).setCellValue("Port");
            vulnerabilityHeader.createCell(19).setCellValue("Finding Description");
            vulnerabilityHeader.createCell(20).setCellValue("Techincal details");
            vulnerabilityHeader.createCell(21).setCellValue("Impact Detail");
            vulnerabilityHeader.createCell(22).setCellValue("Recommendation");
            vulnerabilityHeader.createCell(23).setCellValue("Vulnerability Category");
            vulnerabilityHeader.createCell(24).setCellValue("OWASP Top 10");
            vulnerabilityHeader.createCell(25).setCellValue("CVE ID");
            vulnerabilityHeader.createCell(26).setCellValue("CVE Description");
            vulnerabilityHeader.createCell(27).setCellValue("CVSS Scoring");
            vulnerabilityHeader.createCell(28).setCellValue("");
            vulnerabilityHeader.createCell(29).setCellValue("");
            vulnerabilityHeader.createCell(30).setCellValue("");
            

            HSSFRow cvssScoringColumns = excelSheet.createRow(4);
            cvssScoringColumns.createCell(0).setCellValue("");
            cvssScoringColumns.createCell(1).setCellValue("");
            cvssScoringColumns.createCell(2).setCellValue("");
            cvssScoringColumns.createCell(3).setCellValue("");
            cvssScoringColumns.createCell(4).setCellValue("");
            cvssScoringColumns.createCell(5).setCellValue("");
            cvssScoringColumns.createCell(6).setCellValue("");
            cvssScoringColumns.createCell(7).setCellValue("");
            cvssScoringColumns.createCell(8).setCellValue("");
            cvssScoringColumns.createCell(9).setCellValue("");
            cvssScoringColumns.createCell(10).setCellValue("");
            cvssScoringColumns.createCell(11).setCellValue("");
            cvssScoringColumns.createCell(12).setCellValue("");
            cvssScoringColumns.createCell(13).setCellValue("");
            cvssScoringColumns.createCell(14).setCellValue("");
            cvssScoringColumns.createCell(15).setCellValue("");
            cvssScoringColumns.createCell(16).setCellValue("");
            cvssScoringColumns.createCell(17).setCellValue("");
            cvssScoringColumns.createCell(18).setCellValue("");
            cvssScoringColumns.createCell(19).setCellValue("");
            cvssScoringColumns.createCell(20).setCellValue("");
            cvssScoringColumns.createCell(21).setCellValue("");
            cvssScoringColumns.createCell(22).setCellValue("");
            cvssScoringColumns.createCell(23).setCellValue("");
            cvssScoringColumns.createCell(24).setCellValue("");
            cvssScoringColumns.createCell(25).setCellValue("");
            cvssScoringColumns.createCell(26).setCellValue("");
            cvssScoringColumns.createCell(27).setCellValue("Overall Score");
            cvssScoringColumns.createCell(28).setCellValue("Base score");
            cvssScoringColumns.createCell(29).setCellValue("Temporal score");
            cvssScoringColumns.createCell(30).setCellValue("Environmental Score");

            cvssScoringColumns.getCell(0).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(1).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(2).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(3).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(4).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(5).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(6).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(7).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(8).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(9).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(10).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(11).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(12).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(13).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(14).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(15).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(16).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(17).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(18).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(19).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(20).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(21).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(22).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(23).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(24).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(25).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(26).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(27).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(28).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(29).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(30).setCellStyle(scoreBorderStyle);

            vulnerabilityHeader.createCell(31).setCellValue("Risk Status");
            vulnerabilityHeader.createCell(32).setCellValue("");
            vulnerabilityHeader.createCell(33).setCellValue("");

            cvssScoringColumns.createCell(31).setCellValue("Severity");
            cvssScoringColumns.createCell(32).setCellValue("Probability");
            cvssScoringColumns.createCell(33).setCellValue("Impact");
            cvssScoringColumns.getCell(31).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(32).setCellStyle(scoreBorderStyle);
            cvssScoringColumns.getCell(33).setCellStyle(scoreBorderStyle);

            vulnerabilityHeader.getCell(0).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(1).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(2).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(3).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(4).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(5).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(6).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(7).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(8).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(9).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(10).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(11).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(12).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(13).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(14).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(15).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(16).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(17).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(18).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(19).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(20).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(21).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(22).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(23).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(24).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(25).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(26).setCellStyle(vulnerabilityBorderStyle);
            vulnerabilityHeader.getCell(27).setCellStyle(cvssRiskBorderStyle);
            vulnerabilityHeader.getCell(28).setCellStyle(cvssRiskBorderStyle);
            vulnerabilityHeader.getCell(29).setCellStyle(cvssRiskBorderStyle);
            vulnerabilityHeader.getCell(30).setCellStyle(cvssRiskBorderStyle);
            vulnerabilityHeader.getCell(31).setCellStyle(cvssRiskBorderStyle);
            vulnerabilityHeader.getCell(32).setCellStyle(cvssRiskBorderStyle);
            vulnerabilityHeader.getCell(33).setCellStyle(cvssRiskBorderStyle);

            List<VulnerabilityDTO> vulnerabilityList = (List<VulnerabilityDTO>) model.get("vulnerabilityList");
            int rowNumber = 5;
            for (VulnerabilityDTO report : vulnerabilityList) {
                if (null != report.getClientEngagementDTO()) {
                    HSSFRow excelRowForVulnerability = excelSheet.createRow(rowNumber);
                    excelRowForVulnerability.createCell(0).setCellValue(report.getInstanceIdentifier());
                    excelRowForVulnerability.createCell(1).setCellValue(report.getVulnerabilityName());
                    excelRowForVulnerability.createCell(2).setCellValue(report.getClientEngagementDTO().getSecurityServiceName());
                    excelRowForVulnerability.createCell(3).setCellValue(report.getSourceName());
                    excelRowForVulnerability.createCell(4).setCellValue(report.getCveInformationDTO().getCostEffortName());
                    excelRowForVulnerability.createCell(5).setCellValue(report.getDomainName());
                    excelRowForVulnerability.createCell(6).setCellValue(report.getIpAddress());
                    excelRowForVulnerability.createCell(7).setCellValue(report.getCveInformationDTO().getSeverityName());
                    excelRowForVulnerability.createCell(8).setCellValue(report.getStatusName());
                    excelRowForVulnerability.createCell(9).setCellValue(report.getScanIdentifier());
                    excelRowForVulnerability.createCell(10).setCellValue(report.getScanStartDate());
                    excelRowForVulnerability.createCell(11).setCellValue(report.getScanEndDate());
                    excelRowForVulnerability.createCell(12).setCellValue(report.getSoftwareName());
                    excelRowForVulnerability.createCell(13).setCellValue(report.getHostName());
                    excelRowForVulnerability.createCell(14).setCellValue(report.getAppURL());
                    excelRowForVulnerability.createCell(15).setCellValue(report.getOperatingSystem());
                    excelRowForVulnerability.createCell(16).setCellValue(report.getNetbiosName());
                    excelRowForVulnerability.createCell(17).setCellValue(report.getMacAddress());
                    excelRowForVulnerability.createCell(18).setCellValue(report.getPortNumber());
                    excelRowForVulnerability.createCell(19).setCellValue(CommonUtil.removeHtmlTagsFromString(report.getDescription()));
                    excelRowForVulnerability.createCell(20).setCellValue(CommonUtil.removeHtmlTagsFromString(report.getTechDetails()));
                    excelRowForVulnerability.createCell(21).setCellValue(CommonUtil.removeHtmlTagsFromString(report.getImpactDetails()));
                    excelRowForVulnerability.createCell(22).setCellValue(CommonUtil.removeHtmlTagsFromString(report.getRecommendation()));
                    excelRowForVulnerability.createCell(23).setCellValue(report.getRootCauseName());
                    excelRowForVulnerability.createCell(24).setCellValue(report.getOwaspName());
                    excelRowForVulnerability.createCell(25).setCellValue(report.getCveInformationDTO().getCveIdentifier());
                    excelRowForVulnerability.createCell(26).setCellValue(report.getCveInformationDTO().getCveDesc());
                    if (null != report.getCveInformationDTO().getOverallScore()) {
                        excelRowForVulnerability.createCell(27).setCellValue(report.getCveInformationDTO().getOverallScore().toString());
                    } else {
                        excelRowForVulnerability.createCell(27).setCellValue("");
                    }
                    if (null != report.getCveInformationDTO().getBaseScore()) {
                        excelRowForVulnerability.createCell(28).setCellValue(report.getCveInformationDTO().getBaseScore().toString());
                    } else {
                        excelRowForVulnerability.createCell(28).setCellValue("");
                    }
                    if (null != report.getCveInformationDTO().getTemporalScore()) {
                        excelRowForVulnerability.createCell(29).setCellValue(report.getCveInformationDTO().getTemporalScore().toString());
                    } else {
                        excelRowForVulnerability.createCell(29).setCellValue("");
                    }
                    if (null != report.getCveInformationDTO().getEnvironmentalScore()) {
                        excelRowForVulnerability.createCell(30).setCellValue(report.getCveInformationDTO().getEnvironmentalScore().toString());
                    } else {
                        excelRowForVulnerability.createCell(30).setCellValue("");
                    }
                    excelRowForVulnerability.createCell(31).setCellValue(report.getCveInformationDTO().getSeverityName());
                    excelRowForVulnerability.createCell(32).setCellValue(report.getCveInformationDTO().getProbabilityName());
                    excelRowForVulnerability.createCell(33).setCellValue(report.getCveInformationDTO().getImpactName());

                    excelRowForVulnerability.getCell(0).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(1).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(2).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(3).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(4).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(5).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(6).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(7).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(8).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(9).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(10).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(11).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(12).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(13).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(14).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(15).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(16).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(17).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(18).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(19).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(20).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(21).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(22).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(23).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(24).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(25).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(26).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(27).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(28).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(29).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(30).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(31).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(32).setCellStyle(vulnerabilityCellStyle);
                    excelRowForVulnerability.getCell(33).setCellStyle(vulnerabilityCellStyle);
                    rowNumber++;
                }
            }
            response.setHeader("Content-Type", "application/octet-stream");
            response.setHeader("Content-Disposition", "attachment; filename=\"Findings_" + clientEngagementDto.getEngagementCode() + "_"
                    + dateNow + ".xls\"");
        } catch (Exception e) {
            e.printStackTrace();
            logger.debug("Exceptionoccured : buildExcelDocument: " + e.getMessage());
            throw new AppException("Exception occured while Excecuting the "
                    + "buildExcelDocument(): " + e.getMessage());
        }
        log.info("End: AnalystVulnerabilityExcelView : buildExcelDocument() for build excel report based on selected vulnerabilities");
    }
}
