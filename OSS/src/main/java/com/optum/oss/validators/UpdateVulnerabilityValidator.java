/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.optum.oss.validators;

import com.optum.oss.constants.ApplicationConstants;
import com.optum.oss.dto.VulnerabilityDTO;
import com.optum.oss.helper.ValidationHelper;
import java.math.BigDecimal;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

/**
 *
 * @author sbhagavatula
 */
@Component
public class UpdateVulnerabilityValidator implements Validator{
    
    @Autowired
    private ValidationHelper validationHelper;
    
    @Override
    public boolean supports(Class clazz) {
        return VulnerabilityDTO.class.equals(clazz);
    }

    @Override
    public void validate(Object target, Errors errors) {
        VulnerabilityDTO vulnerabilityDTO = (VulnerabilityDTO) target;
        
        //Start: Check when source of finding is Manual
        if (ApplicationConstants.DB_SOURCE_NAME.equalsIgnoreCase(vulnerabilityDTO.getSourceName())) {
            if (!validationHelper.validateTextEmptyData(vulnerabilityDTO.getSecurityServiceObj().getSecurityServiceCode())) {
                errors.rejectValue("securityServiceObj.securityServiceCode", "error.securityServiceCode");
            }
            if (!validationHelper.validateDataLength(vulnerabilityDTO.getIpAddress().trim(), 100)) {
                errors.rejectValue("ipAddress", "error.ipaddress.length");
            } else if (vulnerabilityDTO.getIpAddress().length() > 0) {
                if (!validationHelper.validateIPAddress(vulnerabilityDTO.getIpAddress().trim())) {
                    errors.rejectValue("ipAddress", "error.ipaddress.valid");
                }
            }
            if (!validationHelper.validateDataLength(vulnerabilityDTO.getSoftwareName().trim(), 100)) {
                errors.rejectValue("softwareName", "error.software.length");
            }

            if (!validationHelper.validateDataLength(vulnerabilityDTO.getHostName().trim(), 100)) {
                errors.rejectValue("hostName", "error.hostName.length");
            }

            if (!validationHelper.validateDataLength(vulnerabilityDTO.getDomainName().trim(), 100)) {
                errors.rejectValue("domainName", "error.domainName.length");
            }

            if (!validationHelper.validateDataLength(vulnerabilityDTO.getAppURL().trim(), 100)) {
                errors.rejectValue("appURL", "error.appURL.length");
            }

            if (!validationHelper.validateDataLength(vulnerabilityDTO.getMacAddress().trim(), 100)) {
                errors.rejectValue("macAddress", "error.macAddress.length");
            }

            if (!validationHelper.validateDataLength(vulnerabilityDTO.getPortNumber().trim(), 10)) {
                errors.rejectValue("portNumber", "error.portNumber.length");
            } else if (!validationHelper.validateNumeric(vulnerabilityDTO.getPortNumber().trim())) {
                errors.rejectValue("portNumber", "error.portNumber.numeric");
            }
        }
        //End: Check when source of finding is Manual
        
        if(!validationHelper.validateTextEmptyData(vulnerabilityDTO.getVulnerabilityName().trim())){
            errors.rejectValue("vulnerabilityName", "error.vulnerabilityName");
        }
        
        if(!validationHelper.validateDataLength(vulnerabilityDTO.getVulnerabilityName().trim(),200)){
            errors.rejectValue("vulnerabilityName", "error.vulnerabilityName.length");
        }
        
//        if (vulnerabilityDTO.getOldSelectedStatusCode().equalsIgnoreCase("O")) {
//            if (!validationHelper.validateTextEmptyData(vulnerabilityDTO.getStatusCode())) {
//                errors.rejectValue("statusCode", "error.status");
//            }
//        }
        
        if (!validationHelper.validateTextEmptyData(vulnerabilityDTO.getStatusCode())) {
            errors.rejectValue("statusCode", "error.status");
        }
        
        //CHECK IF STATUS IS VALIDATED
        if("V".equalsIgnoreCase(vulnerabilityDTO.getStatusCode())){
            
            if(!validationHelper.validateTextEmptyData(vulnerabilityDTO.getDescription().trim())){
                errors.rejectValue("description", "error.description");
            }
            
            if(!validationHelper.validateTextEmptyData(vulnerabilityDTO.getImpactDetails().trim())){
                errors.rejectValue("impactDetails", "error.impactDetails");
            }
            
            if(!validationHelper.validateTextEmptyData(vulnerabilityDTO.getRecommendation().trim())){
                errors.rejectValue("recommendation", "error.recommendation");
            }
            
            if(!validationHelper.validateTextEmptyData(vulnerabilityDTO.getRootCauseCode())){
                errors.rejectValue("rootCauseCode", "error.rootCauseCode");
            }
            
            if(vulnerabilityDTO.getCveInformationDTO().getBaseScore() == null){
                errors.rejectValue("cveInformationDTO.baseScore", "error.baseScore");
            }
            
            if(!validationHelper.validateTextEmptyData(vulnerabilityDTO.getCveInformationDTO().getCostEffortCode())){
                errors.rejectValue("cveInformationDTO.costEffortCode", "error.costEffortCode");
            }
        }
    
        if (!validationHelper.validateDataLength(vulnerabilityDTO.getDescription().replaceAll("\n","").trim(), 8000)) {
            errors.rejectValue("description", "error.description.length");
        }

        if (!validationHelper.validateDataLength(vulnerabilityDTO.getTechDetails().replaceAll("\n","").trim(), 1000)) {
            errors.rejectValue("techDetails", "error.techDetails.length");
        }

        if (!validationHelper.validateDataLength(vulnerabilityDTO.getImpactDetails().replaceAll("\n","").trim(), 1000)) {
            errors.rejectValue("impactDetails", "error.impactDetails.length");
        }

        if (!validationHelper.validateDataLength(vulnerabilityDTO.getRecommendation().replaceAll("\n","").trim(), 1000)) {
            errors.rejectValue("recommendation", "error.recommendation.length");
        }
    }
    
}
