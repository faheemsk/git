/*
Deployment script for IRMaaSTest

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "IRMaaSTest"
:setvar DefaultFilePrefix "IRMaaSTest"
:setvar DefaultDataPath "F:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "F:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [stg]...';


GO
CREATE SCHEMA [stg]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [dbo].[OS_NMs]...';


GO
CREATE TYPE [dbo].[OS_NMs] AS TABLE (
    [OS_NM] NVARCHAR (150) NULL);


GO
PRINT N'Creating [dbo].[VULN_NMs]...';


GO
CREATE TYPE [dbo].[VULN_NMs] AS TABLE (
    [VULN_NM] NVARCHAR (255) NULL);


GO
PRINT N'Creating [stg].[REG_CMPLN_STG]...';


GO
CREATE TABLE [stg].[REG_CMPLN_STG] (
    [REG_CMPLN_CD]      VARCHAR (20)   NOT NULL,
    [REG_CMPLN_VER]     VARCHAR (20)   NOT NULL,
    [REG_CMPLN_NM]      VARCHAR (200)  NULL,
    [REG_CMPLN_DESC]    VARCHAR (2000) NULL,
    [REG_CMPLN_PUBL_DT] DATE           NULL,
    [CREAT_DT]          DATETIME       NOT NULL,
    [CREAT_USER_ID]     INT            NOT NULL,
    CONSTRAINT [PK_REG_CMPLN_STG] PRIMARY KEY CLUSTERED ([REG_CMPLN_CD] ASC, [REG_CMPLN_VER] ASC)
);


GO
PRINT N'Creating [stg].[SECUR_CTL_MAP_STG]...';


GO
CREATE TABLE [stg].[SECUR_CTL_MAP_STG] (
    [PRI_REG_CMPLN_CD]  VARCHAR (20) NOT NULL,
    [PRI_REG_CMPLN_VER] VARCHAR (20) NOT NULL,
    [PRI_SECUR_CTL_CD]  VARCHAR (20) NOT NULL,
    [SEC_REG_CMPLN_CD]  VARCHAR (20) NOT NULL,
    [SEC_REG_CMPLN_VER] VARCHAR (20) NOT NULL,
    [SEC_SECUR_CTL_CD]  VARCHAR (20) NOT NULL,
    [CREAT_DT]          DATETIME     NOT NULL,
    [CREAT_USER_ID]     INT          NOT NULL,
    CONSTRAINT [PK_SECUR_CTL_MAP_STG] PRIMARY KEY CLUSTERED ([PRI_REG_CMPLN_CD] ASC, [PRI_REG_CMPLN_VER] ASC, [PRI_SECUR_CTL_CD] ASC, [SEC_REG_CMPLN_CD] ASC, [SEC_REG_CMPLN_VER] ASC, [SEC_SECUR_CTL_CD] ASC)
);


GO
PRINT N'Creating [stg].[CISCO_SECUR_RISK_ASES_STG]...';


GO
CREATE TABLE [stg].[CISCO_SECUR_RISK_ASES_STG] (
    [RISK_NBR]               INT            NULL,
    [RISK_NM]                VARCHAR (255)  NULL,
    [CTL_EFF]                VARCHAR (150)  NULL,
    [RISK_LVL_IMP]           VARCHAR (150)  NULL,
    [RISK_LVL_PRBL]          VARCHAR (150)  NULL,
    [RISK_LVL_OVALL]         VARCHAR (150)  NULL,
    [RISK_DESC]              TEXT           NULL,
    [IMP_COMMT]              TEXT           NULL,
    [CTL_DEFICIENCIES]       TEXT           NULL,
    [RMDTN_RECOM]            TEXT           NULL,
    [MITG_CTL_AREA]          VARCHAR (2000) NULL,
    [RLVN_STRG_TRND]         VARCHAR (2000) NULL,
    [APPL_FL_UPLOAD_LOG_KEY] INT            NOT NULL,
    [CREAT_DT]               DATETIME       NOT NULL,
    [CREAT_USER_ID]          INT            NOT NULL
);


GO
PRINT N'Creating [stg].[CISCO_PEN_TST_STG]...';


GO
CREATE TABLE [stg].[CISCO_PEN_TST_STG] (
    [ID]                     VARCHAR (50)    NULL,
    [SEV]                    INT             NULL,
    [SEV_LBL]                VARCHAR (150)   NULL,
    [PRBL]                   INT             NULL,
    [PRBL_LBL]               VARCHAR (150)   NULL,
    [URL]                    VARCHAR (2000)  NULL,
    [DESC]                   TEXT            NULL,
    [CREAT_AT]               DATETIME        NULL,
    [STS]                    VARCHAR (150)   NULL,
    [IP]                     VARCHAR (255)   NULL,
    [IP_AS_INTG]             BIGINT          NULL,
    [PORT]                   INT             NULL,
    [PRTCL]                  VARCHAR (255)   NULL,
    [CVSS_BAS]               DECIMAL (10, 2) NULL,
    [CVSS_TMPRL]             DECIMAL (10, 2) NULL,
    [HST]                    VARCHAR (255)   NULL,
    [OS]                     VARCHAR (255)   NULL,
    [SCOR]                   INT             NULL,
    [SCOR_LBL]               VARCHAR (150)   NULL,
    [RMDTN_EFFRT]            INT             NULL,
    [RMDTN_EFFRT_LBL]        VARCHAR (150)   NULL,
    [PROJ_ID]                VARCHAR (150)   NULL,
    [PROJ_STRT_DT]           DATETIME        NULL,
    [PROJ_END_DT]            DATETIME        NULL,
    [VULN_CLSS]              VARCHAR (255)   NULL,
    [CVE]                    VARCHAR (2000)  NULL,
    [CATGY]                  VARCHAR (255)   NULL,
    [DTL]                    TEXT            NULL,
    [SECUR_IMP]              TEXT            NULL,
    [MITG_FCT]               TEXT            NULL,
    [SOLN]                   TEXT            NULL,
    [REPRD_STEP]             TEXT            NULL,
    [REPRD_NOTE]             TEXT            NULL,
    [CSTM_FLD_1]             VARCHAR (1000)  NULL,
    [CSTM_FLD_2]             VARCHAR (1000)  NULL,
    [CSTM_FLD_3]             VARCHAR (1000)  NULL,
    [CSTM_FLD_4]             VARCHAR (1000)  NULL,
    [CSTM_COL_TYP]           VARCHAR (1000)  NULL,
    [CSTM_COL_LBL]           VARCHAR (1000)  NULL,
    [APPL_FL_UPLOAD_LOG_KEY] INT             NOT NULL,
    [CREAT_DT]               DATETIME        NOT NULL,
    [CREAT_USER_ID]          INT             NOT NULL
);


GO
PRINT N'Creating [stg].[CMN_FMT_V1_STG]...';


GO
CREATE TABLE [stg].[CMN_FMT_V1_STG] (
    [SRC_VULN_SCAN_ID]       VARCHAR (150)   NULL,
    [SRC_VULN_SCAN_STRT_DT]  DATETIME        NULL,
    [SRC_VULN_SCAN_END_DT]   DATETIME        NULL,
    [SRC_VULN_INSTC_ID]      VARCHAR (150)   NULL,
    [SRC_VULN_ID]            VARCHAR (150)   NULL,
    [VULN_NM]                VARCHAR (255)   NOT NULL,
    [VULN_DESC]              TEXT            NULL,
    [VULN_CREAT_DT]          DATETIME        NOT NULL,
    [VULN_SEV_CD]            VARCHAR (3)     NULL,
    [VULN_SEV_NM]            VARCHAR (150)   NULL,
    [VULN_IMP_CD]            VARCHAR (3)     NULL,
    [VULN_IMP_NM]            VARCHAR (150)   NULL,
    [RISK_PRBL_CD]           VARCHAR (3)     NULL,
    [RISK_PRBL_NM]           VARCHAR (150)   NULL,
    [RMDTN_CST_EFFRT_CD]     VARCHAR (3)     NULL,
    [RMDTN_CST_EFFRT_NM]     VARCHAR (150)   NULL,
    [OWASP_CD]               VARCHAR (10)    NULL,
    [IPADR]                  VARCHAR (39)    NULL,
    [PORT_NBR]               INT             NULL,
    [HST_NM]                 VARCHAR (150)   NULL,
    [NTWK_NM]                VARCHAR (150)   NULL,
    [PRTCL_NM]               VARCHAR (255)   NULL,
    [NETBIOS_NM]             VARCHAR (150)   NULL,
    [MAC_ADR_NM]             VARCHAR (150)   NULL,
    [APPL_URL]               NVARCHAR (2000) NULL,
    [SFTW_NM]                VARCHAR (150)   NULL,
    [CVE_ID]                 VARCHAR (25)    NULL,
    [SRC_ADVS_TXT]           VARCHAR (1024)  NULL,
    [DOM_NM]                 VARCHAR (150)   NULL,
    [OS_NM]                  VARCHAR (150)   NULL,
    [VULN_BAS_SCOR]          DECIMAL (10, 2) NULL,
    [VULN_EXPLT_SUB_SCOR]    DECIMAL (10, 2) NULL,
    [VULN_IMP_SUB_SCOR]      DECIMAL (10, 2) NULL,
    [VULN_TMPRL_SCOR]        DECIMAL (10, 2) NULL,
    [VULN_ENV_SCOR]          DECIMAL (10, 2) NULL,
    [VULN_VCTR_TXT]          VARCHAR (100)   NULL,
    [RECOM_COMMT_TXT]        TEXT            NULL,
    [VULN_IMP_COMMT_TXT]     TEXT            NULL,
    [ROOT_CAUS_COMMT_TXT]    TEXT            NULL,
    [VULN_TECH_COMMT_TXT]    TEXT            NULL,
    [APPL_FL_UPLOAD_LOG_KEY] INT             NOT NULL,
    [CREAT_DT]               DATETIME        NOT NULL,
    [CREAT_USER_ID]          INT             NOT NULL
);


GO
PRINT N'Creating [stg].[TRIPWIRE_IP360_STG]...';


GO
CREATE TABLE [stg].[TRIPWIRE_IP360_STG] (
    [AUD_ID]            INT            NOT NULL,
    [NTWK_ID]           INT            NOT NULL,
    [NTWK_NM]           VARCHAR (256)  NOT NULL,
    [NTWK_GRP_NM]       VARCHAR (128)  NULL,
    [SCANPROFILE_ID]    INT            NOT NULL,
    [STRT_DT]           DATETIME       NULL,
    [END_DT]            DATETIME       NULL,
    [VULN_ID]           INT            NOT NULL,
    [VULN_NM]           VARCHAR (512)  NULL,
    [DESC]              TEXT           NULL,
    [ADVS]              VARCHAR (1024) NULL,
    [RISK]              VARCHAR (32)   NULL,
    [SKL]               VARCHAR (32)   NULL,
    [STRG]              VARCHAR (32)   NULL,
    [PUBL_DT]           DATETIME       NULL,
    [GUID]              INT            NULL,
    [APPL_NM]           VARCHAR (256)  NULL,
    [PORT]              INT            NULL,
    [PRTCL]             VARCHAR (64)   NULL,
    [MAX_CVSS_BAS_SCOR] DECIMAL (3, 1) NULL,
    [VNE_ID]            INT            NOT NULL,
    [IP]                VARCHAR (39)   NULL,
    [HST_NM]            VARCHAR (128)  NULL,
    [NETBIOS_NM]        VARCHAR (128)  NULL,
    [DOM_NM]            VARCHAR (128)  NULL,
    [OS_NM]             VARCHAR (128)  NULL,
    [MAC_ADR]           VARCHAR (32)   NULL,
    [IP_NBR]            BIGINT         NULL,
    [CREAT_DT]          DATETIME       NOT NULL,
    [CREAT_USER_ID]     INT            NOT NULL
);


GO
PRINT N'Creating [stg].[SECUR_CTL_STG]...';


GO
CREATE TABLE [stg].[SECUR_CTL_STG] (
    [REG_CMPLN_CD]       VARCHAR (20)   NOT NULL,
    [REG_CMPLN_VER]      VARCHAR (20)   NOT NULL,
    [SECUR_CTL_CD]       VARCHAR (20)   NOT NULL,
    [SECUR_CTL_FAM_CD]   VARCHAR (20)   NOT NULL,
    [SECUR_CTL_FAM_NM]   VARCHAR (200)  NULL,
    [SECUR_CTL_FAM_DESC] VARCHAR (2000) NULL,
    [SECUR_OBJ_CD]       VARCHAR (20)   NULL,
    [SECUR_OBJ_NM]       VARCHAR (500)  NULL,
    [SECUR_OBJ_DESC]     VARCHAR (2000) NULL,
    [SECUR_CTL_NM]       VARCHAR (500)  NULL,
    [SECUR_CTL_DESC]     VARCHAR (2000) NULL,
    [CTL_TYP_NM]         VARCHAR (150)  NULL,
    [TPC_TXT]            VARCHAR (2000) NULL,
    [SECUR_CTL_IMPL]     VARCHAR (8000) NULL,
    [RQR_FOR_CERT_IND]   CHAR (1)       NULL,
    [CREAT_DT]           DATETIME       NOT NULL,
    [CREAT_USER_ID]      INT            NOT NULL,
    CONSTRAINT [PK_SECUR_CTL_STG] PRIMARY KEY CLUSTERED ([REG_CMPLN_CD] ASC, [REG_CMPLN_VER] ASC, [SECUR_CTL_CD] ASC)
);


GO
PRINT N'Creating [dbo].[APPL_FL_UPLOAD_LOG]...';


GO
CREATE TABLE [dbo].[APPL_FL_UPLOAD_LOG] (
    [APPL_FL_UPLOAD_LOG_KEY] INT            IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]            INT            NOT NULL,
    [ORG_KEY]                INT            NOT NULL,
    [CLNT_ENGMT_CD]          VARCHAR (30)   NOT NULL,
    [SECUR_SRVC_CD]          VARCHAR (10)   NOT NULL,
    [SRC_KEY]                INT            NOT NULL,
    [DOC_TYP_KEY]            INT            NOT NULL,
    [UPLOAD_USER_ID]         INT            NOT NULL,
    [FL_STS_KEY]             INT            NOT NULL,
    [FL_NM]                  VARCHAR (150)  NOT NULL,
    [FL_FLDR_PTH]            VARCHAR (500)  NOT NULL,
    [FL_UPLOAD_DT]           DATETIME       NOT NULL,
    [ETL_PROC_END_DT]        DATETIME       NULL,
    [FL_COMMT]               VARCHAR (1000) NULL,
    [FL_SZ]                  VARCHAR (100)  NULL,
    [CREAT_USER_ID]          INT            NOT NULL,
    [CREAT_DT]               DATETIME       NOT NULL,
    [UPDT_USER_ID]           INT            NULL,
    [UPDT_DT]                DATETIME       NULL,
    CONSTRAINT [PK_APPL_FL_UPLOAD_LOG] PRIMARY KEY CLUSTERED ([APPL_FL_UPLOAD_LOG_KEY] ASC),
    CONSTRAINT [AK1_APPL_FL_UPLOAD_LOG] UNIQUE NONCLUSTERED ([FL_NM] ASC, [FL_UPLOAD_DT] ASC, [FL_FLDR_PTH] ASC)
);


GO
PRINT N'Creating [dbo].[APPL_ROLE]...';


GO
CREATE TABLE [dbo].[APPL_ROLE] (
    [APPL_ROLE_KEY]  INT            IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]    INT            NOT NULL,
    [APPL_ROLE_NM]   VARCHAR (100)  NOT NULL,
    [APPL_ROLE_DESC] VARCHAR (1000) NULL,
    [STS_COMMT_TXT]  TEXT           NULL,
    [USER_TYP_KEY]   INT            NOT NULL,
    [CREAT_DT]       DATETIME       NOT NULL,
    [CREAT_USER_ID]  INT            NOT NULL,
    [UPDT_DT]        DATETIME       NULL,
    [UPDT_USER_ID]   INT            NULL,
    CONSTRAINT [PK_APPL_ROLE] PRIMARY KEY CLUSTERED ([APPL_ROLE_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[APPL_ROLE_PERMSN_GRP]...';


GO
CREATE TABLE [dbo].[APPL_ROLE_PERMSN_GRP] (
    [USER_ROLE_PERMSN_GRP_KEY] INT      IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]              INT      NOT NULL,
    [APPL_ROLE_KEY]            INT      NOT NULL,
    [PERMSN_GRP_KEY]           INT      NOT NULL,
    [CREAT_DT]                 DATETIME NOT NULL,
    [CREAT_USER_ID]            INT      NOT NULL,
    [UPDT_DT]                  DATETIME NULL,
    [UPDT_USER_ID]             INT      NULL,
    CONSTRAINT [PK_APPL_ROLE_PERMSN_GRP] PRIMARY KEY CLUSTERED ([USER_ROLE_PERMSN_GRP_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[CD_XREF]...';


GO
CREATE TABLE [dbo].[CD_XREF] (
    [CD_XREF_KEY]       INT           IDENTITY (1, 1) NOT NULL,
    [SRC_KEY]           INT           NOT NULL,
    [REFERRENCE_TYP_NM] VARCHAR (100) NOT NULL,
    [TGT_REF_CD]        VARCHAR (10)  NOT NULL,
    [SRC_REF_CD]        VARCHAR (10)  NULL,
    [SRC_REF_NM]        VARCHAR (150) NULL,
    [CREAT_DT]          DATETIME      NOT NULL,
    [CREAT_USER_ID]     INT           NOT NULL,
    [UPDT_DT]           DATETIME      NULL,
    [UPDT_USER_ID]      INT           NULL,
    CONSTRAINT [PK_CD_XREF] PRIMARY KEY CLUSTERED ([CD_XREF_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[CLNT_ENGMT]...';


GO
CREATE TABLE [dbo].[CLNT_ENGMT] (
    [CLNT_ENGMT_CD]    VARCHAR (30)   NOT NULL,
    [ROW_STS_KEY]      INT            NOT NULL,
    [CLNT_ORG_KEY]     INT            NOT NULL,
    [SECUR_PKG_CD]     VARCHAR (10)   NOT NULL,
    [ENGMT_STS_KEY]    INT            NOT NULL,
    [CLNT_ENGMT_NM]    VARCHAR (150)  NULL,
    [AGR_DT]           DATETIME       NOT NULL,
    [ENGMT_STRT_DT]    DATETIME       NOT NULL,
    [ENGMT_EST_END_DT] DATETIME       NULL,
    [CLNT_ENGMT_DESC]  VARCHAR (1000) NULL,
    [ENGMT_COMMT]      TEXT           NULL,
    [CLNT_PUBL_DT]     DATETIME       NULL,
    [CREAT_DT]         DATETIME       NOT NULL,
    [CREAT_USER_ID]    INT            NOT NULL,
    [UPDT_DT]          DATETIME       NULL,
    [UPDT_USER_ID]     INT            NULL,
    CONSTRAINT [PK_CLNT_ENGMT] PRIMARY KEY CLUSTERED ([CLNT_ENGMT_CD] ASC),
    CONSTRAINT [AK1_CLNT_ENGMT] UNIQUE NONCLUSTERED ([CLNT_ORG_KEY] ASC, [SECUR_PKG_CD] ASC, [AGR_DT] ASC)
);


GO
PRINT N'Creating [dbo].[CLNT_ENGMT_USER_ASGN]...';


GO
CREATE TABLE [dbo].[CLNT_ENGMT_USER_ASGN] (
    [CLNT_ENGMT_USER_ASGN_KEY] INT           IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]              INT           NOT NULL,
    [CLNT_ENGMT_CD]            VARCHAR (30)  NOT NULL,
    [USER_ID]                  INT           NOT NULL,
    [SECUR_SRVC_LIST_CD]       VARCHAR (150) NULL,
    [CREAT_DT]                 DATETIME      NOT NULL,
    [CREAT_USER_ID]            INT           NOT NULL,
    [UPDT_DT]                  DATETIME      NULL,
    [UPDT_USER_ID]             INT           NULL,
    CONSTRAINT [PK_CLNT_ENGMT_USER_ASGN] PRIMARY KEY CLUSTERED ([CLNT_ENGMT_USER_ASGN_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[CLNT_REL_ENGMT_ID]...';


GO
CREATE TABLE [dbo].[CLNT_REL_ENGMT_ID] (
    [CLNT_REL_ENGMT_ID_KEY] INT           IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]           INT           NOT NULL,
    [CLNT_ENGMT_CD]         VARCHAR (30)  NOT NULL,
    [SRC_KEY]               INT           NOT NULL,
    [SRC_REL_ENGMT_ID]      VARCHAR (150) NULL,
    [CREAT_DT]              DATETIME      NOT NULL,
    [CREAT_USER_ID]         INT           NOT NULL,
    [UPDT_DT]               DATETIME      NULL,
    [UPDT_USER_ID]          INT           NULL,
    CONSTRAINT [PK_CLNT_REL_ENGMT_ID] PRIMARY KEY CLUSTERED ([CLNT_REL_ENGMT_ID_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[CLNT_SCHM_LOG]...';


GO
CREATE TABLE [dbo].[CLNT_SCHM_LOG] (
    [CLNT_SCHM_LOG_KEY] INT          IDENTITY (1, 1) NOT NULL,
    [ORG_KEY]           INT          NOT NULL,
    [SCHM_STS_DESC]     VARCHAR (40) NULL,
    [ERR_DESC]          TEXT         NULL,
    [CREAT_DT]          DATETIME     NOT NULL,
    CONSTRAINT [PK_CLNT_SCHM_LOG] PRIMARY KEY CLUSTERED ([CLNT_SCHM_LOG_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[CLNT_SCHM_LOG].[IF1_CLNT_SCHM_LOG]...';


GO
CREATE NONCLUSTERED INDEX [IF1_CLNT_SCHM_LOG]
    ON [dbo].[CLNT_SCHM_LOG]([ORG_KEY] ASC);


GO
PRINT N'Creating [dbo].[CLNT_SECUR_SRVC_ENGMT]...';


GO
CREATE TABLE [dbo].[CLNT_SECUR_SRVC_ENGMT] (
    [CLNT_ENGMT_CD]      VARCHAR (30) NOT NULL,
    [SECUR_SRVC_CD]      VARCHAR (10) NOT NULL,
    [ROW_STS_KEY]        INT          NOT NULL,
    [SRVC_ENGMT_STS_KEY] INT          NOT NULL,
    [SRVC_EST_STRT_DT]   DATETIME     NOT NULL,
    [SRVC_EST_END_DT]    DATETIME     NULL,
    [FL_LCK_IND]         INT          NOT NULL,
    [CREAT_DT]           DATETIME     NOT NULL,
    [CREAT_USER_ID]      INT          NOT NULL,
    [UPDT_DT]            DATETIME     NULL,
    [UPDT_USER_ID]       INT          NULL,
    CONSTRAINT [PK_CLNT_SECUR_SRVC_ENGMT] PRIMARY KEY CLUSTERED ([CLNT_ENGMT_CD] ASC, [SECUR_SRVC_CD] ASC)
);


GO
PRINT N'Creating [dbo].[CLNT_VULN_INSTC]...';


GO
CREATE TABLE [dbo].[CLNT_VULN_INSTC] (
    [CLNT_VULN_INSTC_KEY]    INT             IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]            INT             NOT NULL,
    [ORG_KEY]                INT             NOT NULL,
    [CLNT_ENGMT_CD]          VARCHAR (30)    NOT NULL,
    [SECUR_SRVC_CD]          VARCHAR (10)    NOT NULL,
    [VULN_SRC_KEY]           INT             NOT NULL,
    [VULN_INSTC_STS_CD]      VARCHAR (3)     NOT NULL,
    [VULN_SEV_CD]            VARCHAR (3)     NULL,
    [VULN_IMP_CD]            VARCHAR (3)     NULL,
    [RISK_PRBL_CD]           VARCHAR (3)     NULL,
    [RMDTN_CST_EFFRT_CD]     VARCHAR (3)     NULL,
    [VULN_CATGY_CD]          VARCHAR (10)    NULL,
    [OWASP_TOP_10_KEY]       INT             NULL,
    [CVE_ID]                 VARCHAR (25)    NULL,
    [OS_KEY]                 INT             NULL,
    [SRC_VULN_SCAN_ID]       VARCHAR (150)   NULL,
    [SRC_VULN_SCAN_STRT_DT]  DATETIME        NULL,
    [SRC_VULN_SCAN_END_DT]   DATETIME        NULL,
    [SRC_VULN_INSTC_ID]      VARCHAR (150)   NULL,
    [SRC_VULN_ID]            VARCHAR (150)   NULL,
    [VULN_NM]                VARCHAR (255)   NOT NULL,
    [VULN_DESC]              TEXT            NULL,
    [VULN_CREAT_DT]          DATETIME        NOT NULL,
    [IPADR]                  VARCHAR (39)    NULL,
    [PORT_NBR]               INT             NULL,
    [SRC_ADVS_TXT]           VARCHAR (1024)  NULL,
    [SRC_VULN_BAS_SCOR]      DECIMAL (10, 2) NULL,
    [VULN_BAS_SCOR]          DECIMAL (10, 2) NULL,
    [VULN_IMP_SUB_SCOR]      DECIMAL (10, 2) NULL,
    [VULN_EXPLT_SUB_SCOR]    DECIMAL (10, 2) NULL,
    [VULN_TMPRL_SCOR]        DECIMAL (10, 2) NULL,
    [VULN_ENV_SCOR]          DECIMAL (10, 2) NULL,
    [VULN_OVALL_SCOR]        DECIMAL (10, 2) NULL,
    [VULN_VCTR_TXT]          VARCHAR (100)   NULL,
    [NTWK_NM]                VARCHAR (150)   NULL,
    [PRTCL_NM]               VARCHAR (255)   NULL,
    [HST_NM]                 VARCHAR (150)   NULL,
    [DOM_NM]                 VARCHAR (150)   NULL,
    [SFTW_NM]                VARCHAR (150)   NULL,
    [APPL_URL]               NVARCHAR (2000) NULL,
    [NETBIOS_NM]             VARCHAR (150)   NULL,
    [MAC_ADR_NM]             VARCHAR (150)   NULL,
    [VULN_TECH_COMMT_TXT]    TEXT            NULL,
    [VULN_IMP_COMMT_TXT]     TEXT            NULL,
    [RECOM_COMMT_TXT]        TEXT            NULL,
    [ROOT_CAUS_COMMT_TXT]    TEXT            NULL,
    [APPL_FL_UPLOAD_LOG_KEY] INT             NULL,
    [CREAT_DT]               DATETIME        NOT NULL,
    [CREAT_USER_ID]          INT             NOT NULL,
    [UPDT_DT]                DATETIME        NULL,
    [UPDT_USER_ID]           INT             NULL,
    CONSTRAINT [PK_CLNT_VULN_INSTC] PRIMARY KEY CLUSTERED ([CLNT_VULN_INSTC_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[CLNT_VULN_INSTC].[IF27_CLNT_VULN_INSTC]...';


GO
CREATE NONCLUSTERED INDEX [IF27_CLNT_VULN_INSTC]
    ON [dbo].[CLNT_VULN_INSTC]([VULN_NM] ASC);


GO
PRINT N'Creating [dbo].[CLNT_VULN_SECUR_CTL]...';


GO
CREATE TABLE [dbo].[CLNT_VULN_SECUR_CTL] (
    [CLNT_VULN_INSTC_KEY] INT          NOT NULL,
    [REG_CMPLN_CD]        VARCHAR (20) NOT NULL,
    [REG_CMPLN_VER]       VARCHAR (20) NOT NULL,
    [SECUR_CTL_CD]        VARCHAR (20) NOT NULL,
    [ROW_STS_KEY]         INT          NOT NULL,
    [CREAT_DT]            DATETIME     NOT NULL,
    [CREAT_USER_ID]       INT          NOT NULL,
    [UPDT_DT]             DATETIME     NULL,
    [UPDT_USER_ID]        INT          NULL,
    CONSTRAINT [PK_CLNT_VULN_SECUR_CTL] PRIMARY KEY CLUSTERED ([CLNT_VULN_INSTC_KEY] ASC, [REG_CMPLN_CD] ASC, [REG_CMPLN_VER] ASC, [SECUR_CTL_CD] ASC)
);


GO
PRINT N'Creating [dbo].[CNTRY_CD]...';


GO
CREATE TABLE [dbo].[CNTRY_CD] (
    [CNTRY_CD]      VARCHAR (10)  NOT NULL,
    [CNTRY_NM]      VARCHAR (150) NOT NULL,
    [CREAT_DT]      DATETIME      NOT NULL,
    [CREAT_USER_ID] INT           NOT NULL,
    [UPDT_DT]       DATETIME      NULL,
    [UPDT_USER_ID]  INT           NULL,
    CONSTRAINT [PK_CNTRY_CD] PRIMARY KEY CLUSTERED ([CNTRY_CD] ASC)
);


GO
PRINT N'Creating [dbo].[CVE]...';


GO
CREATE TABLE [dbo].[CVE] (
    [CVE_ID]         VARCHAR (25)    NOT NULL,
    [CVE_DESC]       VARCHAR (4000)  NULL,
    [PUBL_DT]        DATETIME        NULL,
    [LST_MOD_DT]     DATETIME        NULL,
    [CWE_ID]         VARCHAR (50)    NULL,
    [BAS_SCOR]       DECIMAL (10, 2) NULL,
    [ACS_VCTR]       VARCHAR (100)   NULL,
    [ACS_CMPLX]      VARCHAR (100)   NULL,
    [AUTH]           VARCHAR (100)   NULL,
    [CONFDTY_IMP]    VARCHAR (100)   NULL,
    [INGTY_IMP]      VARCHAR (100)   NULL,
    [AVL_IMP]        VARCHAR (100)   NULL,
    [VCTR_TXT]       VARCHAR (50)    NULL,
    [IMP_SUB_SCOR]   DECIMAL (10, 2) NULL,
    [EXPLT_SUB_SCOR] DECIMAL (10, 2) NULL,
    [CREAT_DT]       DATETIME        NOT NULL,
    [CREAT_USER_ID]  INT             NOT NULL,
    [UPDT_DT]        DATETIME        NULL,
    [UPDT_USER_ID]   INT             NULL,
    CONSTRAINT [PK_CVE] PRIMARY KEY CLUSTERED ([CVE_ID] ASC)
);


GO
PRINT N'Creating [dbo].[CVE_SECUR_CTL_MAP]...';


GO
CREATE TABLE [dbo].[CVE_SECUR_CTL_MAP] (
    [CVE_ID]        VARCHAR (25) NOT NULL,
    [REG_CMPLN_CD]  VARCHAR (20) NOT NULL,
    [REG_CMPLN_VER] VARCHAR (20) NOT NULL,
    [SECUR_CTL_CD]  VARCHAR (20) NOT NULL,
    [ROW_STS_KEY]   INT          NOT NULL,
    [CREAT_DT]      DATETIME     NOT NULL,
    [CREAT_USER_ID] INT          NOT NULL,
    [UPDT_DT]       DATETIME     NULL,
    [UPDT_USER_ID]  INT          NULL,
    CONSTRAINT [PK_CVE_SECUR_CTL_MAP] PRIMARY KEY CLUSTERED ([CVE_ID] ASC, [REG_CMPLN_CD] ASC, [REG_CMPLN_VER] ASC, [SECUR_CTL_CD] ASC)
);


GO
PRINT N'Creating [dbo].[CVSS_SCOR_MTRC]...';


GO
CREATE TABLE [dbo].[CVSS_SCOR_MTRC] (
    [CVSS_SCOR_MTRC_KEY] INT             IDENTITY (1, 1) NOT NULL,
    [CVSS_VER]           VARCHAR (20)    NULL,
    [MTRC_GRP_NM]        VARCHAR (100)   NULL,
    [MTRC_NM]            VARCHAR (100)   NULL,
    [MTRC_VCTR_CD]       VARCHAR (3)     NOT NULL,
    [MTRC_VAL_TXT]       VARCHAR (100)   NULL,
    [MTRC_VAL_VCTR_CD]   VARCHAR (3)     NOT NULL,
    [MTRC_VAL_SCOR]      DECIMAL (10, 3) NOT NULL,
    [VCTR_ORDR]          INT             NULL,
    [UPDT_USER_ID]       INT             NULL,
    [UPDT_DT]            DATETIME        NULL,
    [CREAT_USER_ID]      INT             NOT NULL,
    [CREAT_DT]           DATETIME        NOT NULL,
    CONSTRAINT [PK_CVSS_SCOR_MTRC] PRIMARY KEY CLUSTERED ([CVSS_SCOR_MTRC_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[ETL_AUD_LOG]...';


GO
CREATE TABLE [dbo].[ETL_AUD_LOG] (
    [ETL_AUD_LOG_KEY]   INT           IDENTITY (1, 1) NOT NULL,
    [JOB_NM]            VARCHAR (150) NOT NULL,
    [JOB_STRT_DT]       DATETIME      NOT NULL,
    [JOB_END_DT]        DATETIME      NULL,
    [JOB_STS]           VARCHAR (100) NOT NULL,
    [SRC_FL_NM]         VARCHAR (150) NULL,
    [SRC_FL_FLDR_PTH]   VARCHAR (500) NULL,
    [TGT_TBL_NM]        VARCHAR (50)  NULL,
    [SRC_ROW_CNT]       INT           NULL,
    [TGT_INSRT_ROW_CNT] INT           NULL,
    [TGT_UPDT_ROW_CNT]  INT           NULL,
    [TGT_REJ_ROW_CNT]   INT           NULL,
    CONSTRAINT [PK_ETL_AUD_LOG] PRIMARY KEY CLUSTERED ([ETL_AUD_LOG_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[ETL_ERR_LOG]...';


GO
CREATE TABLE [dbo].[ETL_ERR_LOG] (
    [ETL_ERR_LOG_KEY] INT            IDENTITY (1, 1) NOT NULL,
    [ETL_AUD_LOG_KEY] INT            NOT NULL,
    [ERR_LOG_DT]      DATETIME       NULL,
    [ERR_CD]          VARCHAR (150)  NULL,
    [ERR_MSG_TXT]     VARCHAR (1000) NULL,
    [ERR_REC_TXT]     VARCHAR (2000) NULL,
    CONSTRAINT [PK_ETL_ERR_LOG] PRIMARY KEY CLUSTERED ([ETL_ERR_LOG_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[MSTR_LKP]...';


GO
CREATE TABLE [dbo].[MSTR_LKP] (
    [MSTR_LKP_KEY]    INT            IDENTITY (1, 1) NOT NULL,
    [LKP_ENTY_TYP_NM] VARCHAR (500)  NOT NULL,
    [LKP_ENTY_NM]     VARCHAR (500)  NOT NULL,
    [LKP_ENTY_DESC]   VARCHAR (1000) NULL,
    [ACTV_IND]        INT            NOT NULL,
    [CREAT_DT]        DATETIME       NOT NULL,
    [CREAT_USER_ID]   INT            NOT NULL,
    [UPDT_DT]         DATETIME       NULL,
    [UPDT_USER_ID]    INT            NULL,
    CONSTRAINT [PK_MSTR_LKP] PRIMARY KEY CLUSTERED ([MSTR_LKP_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[NTF_MSG]...';


GO
CREATE TABLE [dbo].[NTF_MSG] (
    [NTF_MSG_KEY]   INT           IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]   INT           NOT NULL,
    [NTF_TYP_NM]    VARCHAR (255) NOT NULL,
    [MSG_SBJ_TXT]   VARCHAR (255) NULL,
    [MSG_CNTN_TXT]  TEXT          NULL,
    [CREAT_DT]      DATETIME      NOT NULL,
    [CREAT_USER_ID] INT           NOT NULL,
    [UPDT_DT]       DATETIME      NULL,
    [UPDT_USER_ID]  INT           NULL,
    CONSTRAINT [PK_NTF_MSG] PRIMARY KEY CLUSTERED ([NTF_MSG_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[ORG]...';


GO
CREATE TABLE [dbo].[ORG] (
    [ORG_KEY]            INT           IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]        INT           NOT NULL,
    [PAR_ORG_KEY]        INT           NULL,
    [ORG_TYP_KEY]        INT           NOT NULL,
    [ORG_INDUS_KEY]      INT           NULL,
    [ORG_NM]             VARCHAR (150) NOT NULL,
    [STR_ADR_1]          VARCHAR (255) NULL,
    [STR_ADR_2]          VARCHAR (255) NULL,
    [CTY_NM]             VARCHAR (255) NULL,
    [ST_NM]              VARCHAR (255) NULL,
    [CNTRY_NM]           VARCHAR (255) NULL,
    [PST_CD]             VARCHAR (20)  NULL,
    [ORG_DESC]           TEXT          NULL,
    [STS_COMMT_TXT]      TEXT          NULL,
    [ORG_SCHM]           VARCHAR (30)  NULL,
    [CREAT_ORG_SCHM_IND] CHAR (1)      NOT NULL,
    [CREAT_DT]           DATETIME      NOT NULL,
    [CREAT_USER_ID]      INT           NOT NULL,
    [UPDT_DT]            DATETIME      NULL,
    [UPDT_USER_ID]       INT           NULL,
    CONSTRAINT [PK_ORG] PRIMARY KEY CLUSTERED ([ORG_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[ORG_REL_ID]...';


GO
CREATE TABLE [dbo].[ORG_REL_ID] (
    [ORG_REL_ID_KEY] INT           IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]    INT           NOT NULL,
    [ORG_KEY]        INT           NOT NULL,
    [SRC_KEY]        INT           NOT NULL,
    [SRC_CLNT_ID]    VARCHAR (150) NULL,
    [CREAT_DT]       DATETIME      NOT NULL,
    [CREAT_USER_ID]  INT           NOT NULL,
    [UPDT_DT]        DATETIME      NULL,
    [UPDT_USER_ID]   INT           NULL,
    CONSTRAINT [PK_ORG_REL_ID] PRIMARY KEY CLUSTERED ([ORG_REL_ID_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[OS]...';


GO
CREATE TABLE [dbo].[OS] (
    [OS_KEY]        INT           IDENTITY (1, 1) NOT NULL,
    [OS_NM]         VARCHAR (150) NULL,
    [OS_CATGY_KEY]  INT           NOT NULL,
    [CREAT_DT]      DATETIME      NOT NULL,
    [CREAT_USER_ID] INT           NOT NULL,
    [UPDT_DT]       DATETIME      NULL,
    [UPDT_USER_ID]  INT           NULL,
    CONSTRAINT [PK_OS] PRIMARY KEY CLUSTERED ([OS_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[OS_CATGY]...';


GO
CREATE TABLE [dbo].[OS_CATGY] (
    [OS_CATGY_KEY]  INT           IDENTITY (1, 1) NOT NULL,
    [OS_CATGY_NM]   VARCHAR (150) NULL,
    [CREAT_DT]      DATETIME      NOT NULL,
    [CREAT_USER_ID] INT           NOT NULL,
    [UPDT_DT]       DATETIME      NULL,
    [UPDT_USER_ID]  INT           NULL,
    CONSTRAINT [PK_OS_CATGY] PRIMARY KEY CLUSTERED ([OS_CATGY_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[OS_CATGY_MAP]...';


GO
CREATE TABLE [dbo].[OS_CATGY_MAP] (
    [OS_CATGY_KEY]  INT           NULL,
    [OS_CATGY_NM]   VARCHAR (150) NULL,
    [OS_NM_QUAL]    VARCHAR (150) NULL,
    [CREAT_DT]      DATETIME      NOT NULL,
    [CREAT_USER_ID] INT           NOT NULL,
    [UPDT_DT]       DATETIME      NULL,
    [UPDT_USER_ID]  INT           NULL
);


GO
PRINT N'Creating [dbo].[OWASP_TOP_10]...';


GO
CREATE TABLE [dbo].[OWASP_TOP_10] (
    [OWASP_TOP_10_KEY] INT            IDENTITY (1, 1) NOT NULL,
    [OWASP_CD]         VARCHAR (10)   NOT NULL,
    [OWASP_NM]         VARCHAR (150)  NOT NULL,
    [OWASP_DESC]       VARCHAR (1000) NULL,
    [OWASP_SHRT_DESC]  VARCHAR (255)  NULL,
    [PUBL_DT]          DATE           NULL,
    [CURR_IND]         INT            NULL,
    [CREAT_DT]         DATETIME       NOT NULL,
    [CREAT_USER_ID]    INT            NOT NULL,
    [UPDT_DT]          DATETIME       NULL,
    [UPDT_USER_ID]     INT            NULL,
    CONSTRAINT [PK_OWASP_TOP_10] PRIMARY KEY CLUSTERED ([OWASP_TOP_10_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[PERMSN]...';


GO
CREATE TABLE [dbo].[PERMSN] (
    [PERMSN_KEY]     INT            IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]    INT            NOT NULL,
    [PAR_PERMSN_KEY] INT            NULL,
    [PERMSN_TYP_KEY] INT            NOT NULL,
    [PERMSN_NM]      VARCHAR (100)  NOT NULL,
    [PERMSN_DESC]    VARCHAR (1000) NULL,
    [DSPL_TXT]       VARCHAR (100)  NULL,
    [CHLD_XST_IND]   INT            NOT NULL,
    [SEQ_ORDR]       INT            NOT NULL,
    [CREAT_DT]       DATETIME       NOT NULL,
    [CREAT_USER_ID]  INT            NOT NULL,
    [UPDT_DT]        DATETIME       NULL,
    [UPDT_USER_ID]   INT            NULL,
    CONSTRAINT [PK_PERMSN] PRIMARY KEY CLUSTERED ([PERMSN_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[PERMSN_GRP]...';


GO
CREATE TABLE [dbo].[PERMSN_GRP] (
    [PERMSN_GRP_KEY]  INT            IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]     INT            NOT NULL,
    [PERMSN_GRP_NM]   VARCHAR (100)  NOT NULL,
    [PERMSN_GRP_DESC] VARCHAR (1000) NULL,
    [STS_COMMT_TXT]   TEXT           NULL,
    [CREAT_DT]        DATETIME       NOT NULL,
    [CREAT_USER_ID]   INT            NOT NULL,
    [UPDT_DT]         DATETIME       NULL,
    [UPDT_USER_ID]    INT            NULL,
    CONSTRAINT [PK_PERMSN_GRP] PRIMARY KEY CLUSTERED ([PERMSN_GRP_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[PERMSN_GRP_ASSOC]...';


GO
CREATE TABLE [dbo].[PERMSN_GRP_ASSOC] (
    [PERMSN_GRP_ASSOC_KEY] INT      IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]          INT      NOT NULL,
    [PERMSN_GRP_KEY]       INT      NOT NULL,
    [PERMSN_KEY]           INT      NOT NULL,
    [MDUL_ID]              INT      NULL,
    [MNU_ID]               INT      NOT NULL,
    [SUB_MNU_ID]           INT      NOT NULL,
    [CREAT_DT]             DATETIME NOT NULL,
    [CREAT_USER_ID]        INT      NOT NULL,
    [UPDT_DT]              DATETIME NULL,
    [UPDT_USER_ID]         INT      NULL,
    CONSTRAINT [PK_PERMSN_GRP_ASSOC] PRIMARY KEY CLUSTERED ([PERMSN_GRP_ASSOC_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[REG_CMPLN]...';


GO
CREATE TABLE [dbo].[REG_CMPLN] (
    [REG_CMPLN_CD]      VARCHAR (20)   NOT NULL,
    [REG_CMPLN_VER]     VARCHAR (20)   NOT NULL,
    [REG_CMPLN_NM]      VARCHAR (200)  NULL,
    [REG_CMPLN_DESC]    VARCHAR (2000) NULL,
    [REG_CMPLN_PUBL_DT] DATE           NULL,
    [CREAT_DT]          DATETIME       NOT NULL,
    [CREAT_USER_ID]     INT            NOT NULL,
    [UPDT_DT]           DATETIME       NULL,
    [UPDT_USER_ID]      INT            NULL,
    CONSTRAINT [PK_REG_CMPLN] PRIMARY KEY CLUSTERED ([REG_CMPLN_CD] ASC, [REG_CMPLN_VER] ASC)
);


GO
PRINT N'Creating [dbo].[RISK_PRBL]...';


GO
CREATE TABLE [dbo].[RISK_PRBL] (
    [RISK_PRBL_CD]        VARCHAR (3)     NOT NULL,
    [RISK_PRBL_NM]        VARCHAR (150)   NOT NULL,
    [RISK_PRBL_ORDR_NBR]  INT             NOT NULL,
    [CVSS_EXPLT_SCOR_MIN] DECIMAL (10, 2) NULL,
    [CVSS_EXPLT_SCOR_MAX] DECIMAL (10, 2) NULL,
    [CREAT_DT]            DATETIME        NOT NULL,
    [CREAT_USER_ID]       INT             NOT NULL,
    [UPDT_DT]             DATETIME        NULL,
    [UPDT_USER_ID]        INT             NULL,
    CONSTRAINT [PK_RISK_PRBL] PRIMARY KEY CLUSTERED ([RISK_PRBL_CD] ASC)
);


GO
PRINT N'Creating [dbo].[RMDTN_CST_EFFRT]...';


GO
CREATE TABLE [dbo].[RMDTN_CST_EFFRT] (
    [RMDTN_CST_EFFRT_CD]       VARCHAR (3)   NOT NULL,
    [RMDTN_CST_EFFRT_NM]       VARCHAR (150) NOT NULL,
    [RMDTN_CST_EFFRT_ORDR_NBR] INT           NULL,
    [CREAT_DT]                 DATETIME      NOT NULL,
    [CREAT_USER_ID]            INT           NOT NULL,
    [UPDT_DT]                  DATETIME      NULL,
    [UPDT_USER_ID]             INT           NULL,
    CONSTRAINT [PK_RMDTN_CST_EFFRT] PRIMARY KEY CLUSTERED ([RMDTN_CST_EFFRT_CD] ASC)
);


GO
PRINT N'Creating [dbo].[ROOT_CAUS_ANLYS]...';


GO
CREATE TABLE [dbo].[ROOT_CAUS_ANLYS] (
    [ROOT_CAUS_ANLYS_CD]   VARCHAR (10)   NOT NULL,
    [ROOT_CAUS_ANLYS_NM]   VARCHAR (150)  NOT NULL,
    [ROOT_CAUS_ANLYS_DESC] VARCHAR (1000) NULL,
    [CREAT_DT]             DATETIME       NOT NULL,
    [CREAT_USER_ID]        INT            NOT NULL,
    [UPDT_DT]              DATETIME       NULL,
    [UPDT_USER_ID]         INT            NULL,
    CONSTRAINT [PK_ROOT_CAUS_ANLYS] PRIMARY KEY CLUSTERED ([ROOT_CAUS_ANLYS_CD] ASC)
);


GO
PRINT N'Creating [dbo].[RPT_FL_UPLOAD_LOG]...';


GO
CREATE TABLE [dbo].[RPT_FL_UPLOAD_LOG] (
    [RPT_FL_UPLOAD_LOG_KEY] INT           IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]           INT           NOT NULL,
    [ORG_KEY]               INT           NOT NULL,
    [CLNT_ENGMT_CD]         VARCHAR (30)  NOT NULL,
    [RPT_NM_KEY]            INT           NOT NULL,
    [RPT_STS_KEY]           INT           NOT NULL,
    [FL_NM]                 VARCHAR (150) NOT NULL,
    [FL_FLDR_PTH]           VARCHAR (500) NOT NULL,
    [FL_SZ]                 VARCHAR (100) NULL,
    [RPT_PUBL_DT]           DATETIME      NULL,
    [CREAT_USER_ID]         INT           NOT NULL,
    [CREAT_DT]              DATETIME      NOT NULL,
    [UPDT_USER_ID]          INT           NULL,
    [UPDT_DT]               DATETIME      NULL,
    CONSTRAINT [PK_RPT_FL_UPLOAD_LOG] PRIMARY KEY CLUSTERED ([RPT_FL_UPLOAD_LOG_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[RPT_NM]...';


GO
CREATE TABLE [dbo].[RPT_NM] (
    [RPT_NM_KEY]    INT           IDENTITY (1, 1) NOT NULL,
    [SECUR_SRVC_CD] VARCHAR (10)  NULL,
    [RPT_NM]        VARCHAR (150) NOT NULL,
    [CREAT_DT]      DATETIME      NOT NULL,
    [CREAT_USER_ID] INT           NOT NULL,
    [UPDT_DT]       DATETIME      NULL,
    [UPDT_USER_ID]  INT           NULL,
    CONSTRAINT [PK_RPT_NM] PRIMARY KEY CLUSTERED ([RPT_NM_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[SECUR_CTL]...';


GO
CREATE TABLE [dbo].[SECUR_CTL] (
    [REG_CMPLN_CD]       VARCHAR (20)   NOT NULL,
    [REG_CMPLN_VER]      VARCHAR (20)   NOT NULL,
    [SECUR_CTL_CD]       VARCHAR (20)   NOT NULL,
    [SECUR_CTL_FAM_CD]   VARCHAR (20)   NOT NULL,
    [SECUR_CTL_FAM_NM]   VARCHAR (200)  NULL,
    [SECUR_CTL_FAM_DESC] VARCHAR (2000) NULL,
    [SECUR_OBJ_CD]       VARCHAR (20)   NULL,
    [SECUR_OBJ_NM]       VARCHAR (500)  NULL,
    [SECUR_OBJ_DESC]     VARCHAR (2000) NULL,
    [SECUR_CTL_NM]       VARCHAR (500)  NULL,
    [SECUR_CTL_DESC]     VARCHAR (8000) NULL,
    [CTL_TYP_NM]         VARCHAR (150)  NULL,
    [TPC_TXT]            VARCHAR (2000) NULL,
    [SECUR_CTL_IMPL]     VARCHAR (8000) NULL,
    [RQR_FOR_CERT_IND]   CHAR (1)       NULL,
    [CREAT_DT]           DATETIME       NOT NULL,
    [CREAT_USER_ID]      INT            NOT NULL,
    [UPDT_DT]            DATETIME       NULL,
    [UPDT_USER_ID]       INT            NULL,
    CONSTRAINT [PK_SECUR_CTL] PRIMARY KEY CLUSTERED ([REG_CMPLN_CD] ASC, [REG_CMPLN_VER] ASC, [SECUR_CTL_CD] ASC)
);


GO
PRINT N'Creating [dbo].[SECUR_CTL_MAP]...';


GO
CREATE TABLE [dbo].[SECUR_CTL_MAP] (
    [SECUR_CTL_MAP_KEY] INT          IDENTITY (1, 1) NOT NULL,
    [PRI_REG_CMPLN_CD]  VARCHAR (20) NOT NULL,
    [PRI_REG_CMPLN_VER] VARCHAR (20) NOT NULL,
    [PRI_SECUR_CTL_CD]  VARCHAR (20) NOT NULL,
    [SEC_REG_CMPLN_CD]  VARCHAR (20) NOT NULL,
    [SEC_REG_CMPLN_VER] VARCHAR (20) NOT NULL,
    [SEC_SECUR_CTL_CD]  VARCHAR (20) NOT NULL,
    [CREAT_DT]          DATETIME     NOT NULL,
    [CREAT_USER_ID]     INT          NOT NULL,
    [UPDT_DT]           DATETIME     NULL,
    [UPDT_USER_ID]      INT          NULL,
    CONSTRAINT [PK_SECUR_CTL_MAP] PRIMARY KEY CLUSTERED ([SECUR_CTL_MAP_KEY] ASC),
    CONSTRAINT [AK1_SECUR_CTL_MAP] UNIQUE NONCLUSTERED ([PRI_REG_CMPLN_CD] ASC, [PRI_REG_CMPLN_VER] ASC, [PRI_SECUR_CTL_CD] ASC, [SEC_REG_CMPLN_CD] ASC, [SEC_REG_CMPLN_VER] ASC, [SEC_SECUR_CTL_CD] ASC)
);


GO
PRINT N'Creating [dbo].[SECUR_PKG]...';


GO
CREATE TABLE [dbo].[SECUR_PKG] (
    [SECUR_PKG_CD]   VARCHAR (10)   NOT NULL,
    [ROW_STS_KEY]    INT            NOT NULL,
    [SECUR_PKG_NM]   VARCHAR (150)  NOT NULL,
    [SECUR_PKG_DESC] VARCHAR (1000) NULL,
    [CREAT_DT]       DATETIME       NOT NULL,
    [CREAT_USER_ID]  INT            NOT NULL,
    [UPDT_DT]        DATETIME       NULL,
    [UPDT_USER_ID]   INT            NULL,
    CONSTRAINT [PK_SECUR_PKG] PRIMARY KEY CLUSTERED ([SECUR_PKG_CD] ASC)
);


GO
PRINT N'Creating [dbo].[SECUR_PKG_OFR]...';


GO
CREATE TABLE [dbo].[SECUR_PKG_OFR] (
    [SECUR_PKG_CD]  VARCHAR (10) NOT NULL,
    [SECUR_SRVC_CD] VARCHAR (10) NOT NULL,
    [ROW_STS_KEY]   INT          NOT NULL,
    [CREAT_DT]      DATETIME     NOT NULL,
    [CREAT_USER_ID] INT          NOT NULL,
    [UPDT_DT]       DATETIME     NULL,
    [UPDT_USER_ID]  INT          NULL,
    CONSTRAINT [PK_SECUR_PKG_OFR] PRIMARY KEY CLUSTERED ([SECUR_PKG_CD] ASC, [SECUR_SRVC_CD] ASC)
);


GO
PRINT N'Creating [dbo].[SECUR_SRVC]...';


GO
CREATE TABLE [dbo].[SECUR_SRVC] (
    [SECUR_SRVC_CD]   VARCHAR (10)   NOT NULL,
    [ROW_STS_KEY]     INT            NOT NULL,
    [SECUR_SRVC_NM]   VARCHAR (150)  NOT NULL,
    [SECUR_SRVC_DESC] VARCHAR (1000) NULL,
    [CREAT_DT]        DATETIME       NOT NULL,
    [CREAT_USER_ID]   INT            NOT NULL,
    [UPDT_DT]         DATETIME       NULL,
    [UPDT_USER_ID]    INT            NULL,
    CONSTRAINT [PK_SECUR_SRVC] PRIMARY KEY CLUSTERED ([SECUR_SRVC_CD] ASC)
);


GO
PRINT N'Creating [dbo].[ST_CD]...';


GO
CREATE TABLE [dbo].[ST_CD] (
    [ST_CD_KEY]     INT           IDENTITY (1, 1) NOT NULL,
    [ST_CD]         VARCHAR (10)  NOT NULL,
    [CNTRY_CD]      VARCHAR (10)  NULL,
    [ST_NM]         VARCHAR (150) NOT NULL,
    [CREAT_DT]      DATETIME      NOT NULL,
    [CREAT_USER_ID] INT           NOT NULL,
    [UPDT_DT]       DATETIME      NULL,
    [UPDT_USER_ID]  INT           NULL,
    CONSTRAINT [PK_ST_CD] PRIMARY KEY CLUSTERED ([ST_CD_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[USER_APPL_ROLE]...';


GO
CREATE TABLE [dbo].[USER_APPL_ROLE] (
    [USER_APPL_ROLE_KEY] INT      IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]        INT      NOT NULL,
    [APPL_ROLE_KEY]      INT      NOT NULL,
    [USER_ID]            INT      NOT NULL,
    [CREAT_DT]           DATETIME NOT NULL,
    [CREAT_USER_ID]      INT      NOT NULL,
    [UPDT_DT]            DATETIME NULL,
    [UPDT_USER_ID]       INT      NULL,
    CONSTRAINT [PK_USER_APPL_ROLE] PRIMARY KEY CLUSTERED ([USER_APPL_ROLE_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[USER_CLNT_SRVC_ASGN]...';


GO
CREATE TABLE [dbo].[USER_CLNT_SRVC_ASGN] (
    [USER_CLNT_SRVC_ASGN_KEY] INT          IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]             INT          NOT NULL,
    [CLNT_ENGMT_CD]           VARCHAR (30) NOT NULL,
    [SECUR_SRVC_CD]           VARCHAR (10) NOT NULL,
    [USER_ID]                 INT          NOT NULL,
    [USER_STRT_DT]            DATETIME     NULL,
    [USER_END_DT]             DATETIME     NULL,
    [CREAT_DT]                DATETIME     NOT NULL,
    [CREAT_USER_ID]           INT          NOT NULL,
    [UPDT_DT]                 DATETIME     NULL,
    [UPDT_USER_ID]            INT          NULL,
    CONSTRAINT [PK_USER_CLNT_SRVC_ASGN] PRIMARY KEY CLUSTERED ([USER_CLNT_SRVC_ASGN_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[USER_EMAIL_LOG]...';


GO
CREATE TABLE [dbo].[USER_EMAIL_LOG] (
    [USER_EMAIL_LOG]     INT            IDENTITY (1, 1) NOT NULL,
    [NTF_MSG_KEY]        INT            NULL,
    [USER_ID]            INT            NOT NULL,
    [FROM_EMAIL_ID]      VARCHAR (150)  NULL,
    [TO_EMAIL_ID]        TEXT           NULL,
    [CC_EMAIL_ID]        TEXT           NULL,
    [BCC_EMAIL_ID]       TEXT           NULL,
    [EMAIL_SND_DT]       DATETIME       NULL,
    [EMAIL_MSG_SBJ_TXT]  VARCHAR (255)  NULL,
    [EMAIL_MSG_CNTN_TXT] TEXT           NULL,
    [SND_SUC_IND]        INT            NULL,
    [RESND_CNT]          INT            NULL,
    [ERR_DESC]           VARCHAR (5000) NULL,
    CONSTRAINT [PK_USER_EMAIL_LOG] PRIMARY KEY CLUSTERED ([USER_EMAIL_LOG] ASC)
);


GO
PRINT N'Creating [dbo].[USER_EVNT_LOG]...';


GO
CREATE TABLE [dbo].[USER_EVNT_LOG] (
    [USER_EVNT_LOG_KEY]  INT            IDENTITY (1, 1) NOT NULL,
    [USER_ID]            INT            NOT NULL,
    [ACT_NM]             VARCHAR (100)  NULL,
    [MDUL_NM]            VARCHAR (100)  NULL,
    [EVNT_DT]            DATETIME       NULL,
    [EVNT_DESC]          VARCHAR (1000) NULL,
    [CLNT_ENGMT_CD]      VARCHAR (30)   NULL,
    [CLNT_SRVC_ENGMT_CD] VARCHAR (150)  NULL,
    [IPADR]              VARCHAR (20)   NULL,
    [SFTW_INFO_TXT]      VARCHAR (5000) NULL,
    [FILL_TXT]           TEXT           NULL,
    CONSTRAINT [PK_USER_EVNT_LOG] PRIMARY KEY CLUSTERED ([USER_EVNT_LOG_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[USER_PRFL]...';


GO
CREATE TABLE [dbo].[USER_PRFL] (
    [USER_ID]         INT           IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]     INT           NOT NULL,
    [ORG_KEY]         INT           NOT NULL,
    [USER_TYP_KEY]    INT           NULL,
    [FST_NM]          VARCHAR (150) NOT NULL,
    [LST_NM]          VARCHAR (150) NOT NULL,
    [MIDL_NM]         VARCHAR (150) NULL,
    [JOB_TITL_NM]     VARCHAR (150) NULL,
    [EMAIL_ID]        VARCHAR (150) NOT NULL,
    [TEL_NBR]         VARCHAR (20)  NULL,
    [MAC_ADR_NM]      VARCHAR (50)  NULL,
    [USER_VERF_IND]   INT           NOT NULL,
    [LCK_IND]         INT           NOT NULL,
    [LOGIN_ATMPT_CNT] INT           NULL,
    [LST_LOGIN_DT]    DATETIME      NULL,
    [PSWD_RSET_DT]    DATETIME      NULL,
    [STS_COMMT_TXT]   TEXT          NULL,
    [CREAT_DT]        DATETIME      NOT NULL,
    [CREAT_USER_ID]   INT           NOT NULL,
    [UPDT_DT]         DATETIME      NULL,
    [UPDT_USER_ID]    INT           NULL,
    CONSTRAINT [PK_USER_PRFL] PRIMARY KEY CLUSTERED ([USER_ID] ASC)
);


GO
PRINT N'Creating [dbo].[USER_SECUR_DTL]...';


GO
CREATE TABLE [dbo].[USER_SECUR_DTL] (
    [USER_SECUR_DTL_KEY] INT            IDENTITY (1, 1) NOT NULL,
    [ROW_STS_KEY]        INT            NOT NULL,
    [USER_ID]            INT            NOT NULL,
    [SECUR_QUES_KEY]     INT            NOT NULL,
    [ANS_TXT]            VARCHAR (1000) NULL,
    [SEQ_ORDR_NBR]       INT            NOT NULL,
    [CREAT_DT]           DATETIME       NOT NULL,
    [CREAT_USER_ID]      INT            NOT NULL,
    [UPDT_DT]            DATETIME       NULL,
    [UPDT_USER_ID]       INT            NULL,
    CONSTRAINT [PK_USER_SECUR_DTL] PRIMARY KEY CLUSTERED ([USER_SECUR_DTL_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[USER_SESS_LOG]...';


GO
CREATE TABLE [dbo].[USER_SESS_LOG] (
    [USER_SESS_INFO_KEY] INT           IDENTITY (1, 1) NOT NULL,
    [USER_ID]            INT           NOT NULL,
    [EMAIL_ID]           VARCHAR (150) NULL,
    [SESS_ID]            VARCHAR (500) NULL,
    [LST_ACT_DT]         DATETIME      NULL,
    CONSTRAINT [PK_USER_SESS_LOG] PRIMARY KEY CLUSTERED ([USER_SESS_INFO_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[VULN]...';


GO
CREATE TABLE [dbo].[VULN] (
    [VULN_NM]       VARCHAR (255) NOT NULL,
    [VULN_CATGY_CD] VARCHAR (10)  NULL,
    [CREAT_DT]      DATETIME      NOT NULL,
    [CREAT_USER_ID] INT           NOT NULL,
    [UPDT_DT]       DATETIME      NULL,
    [UPDT_USER_ID]  INT           NULL,
    CONSTRAINT [PK_VULN] PRIMARY KEY CLUSTERED ([VULN_NM] ASC)
);


GO
PRINT N'Creating [dbo].[VULN].[IF1_VULN]...';


GO
CREATE NONCLUSTERED INDEX [IF1_VULN]
    ON [dbo].[VULN]([VULN_CATGY_CD] ASC);


GO
PRINT N'Creating [dbo].[VULN_CATGY]...';


GO
CREATE TABLE [dbo].[VULN_CATGY] (
    [VULN_CATGY_CD]   VARCHAR (10)   NOT NULL,
    [VULN_CATGY_NM]   VARCHAR (150)  NOT NULL,
    [VULN_CATGY_DESC] VARCHAR (1000) NULL,
    [CREAT_DT]        DATETIME       NOT NULL,
    [CREAT_USER_ID]   INT            NOT NULL,
    [UPDT_DT]         DATETIME       NULL,
    [UPDT_USER_ID]    INT            NULL,
    CONSTRAINT [VULN_CATGY_CD] PRIMARY KEY CLUSTERED ([VULN_CATGY_CD] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[VULN_IMP]...';


GO
CREATE TABLE [dbo].[VULN_IMP] (
    [VULN_IMP_CD]       VARCHAR (3)     NOT NULL,
    [VULN_IMP_NM]       VARCHAR (150)   NOT NULL,
    [VULN_IMP_ORDR_NBR] INT             NULL,
    [CVSS_IMP_SCOR_MIN] DECIMAL (10, 2) NULL,
    [CVSS_IMP_SCOR_MAX] DECIMAL (10, 2) NULL,
    [CREAT_DT]          DATETIME        NOT NULL,
    [CREAT_USER_ID]     INT             NOT NULL,
    [UPDT_DT]           DATETIME        NULL,
    [UPDT_USER_ID]      INT             NULL,
    CONSTRAINT [PK_VULN_IMP] PRIMARY KEY CLUSTERED ([VULN_IMP_CD] ASC)
);


GO
PRINT N'Creating [dbo].[VULN_INSTC_STS]...';


GO
CREATE TABLE [dbo].[VULN_INSTC_STS] (
    [VULN_INSTC_STS_CD] VARCHAR (3)   NOT NULL,
    [VULN_INSTC_STS_NM] VARCHAR (150) NULL,
    [CREAT_DT]          DATETIME      NOT NULL,
    [CREAT_USER_ID]     INT           NOT NULL,
    [UPDT_DT]           DATETIME      NULL,
    [UPDT_USER_ID]      INT           NULL,
    CONSTRAINT [PK_VULN_INSTC_STS] PRIMARY KEY CLUSTERED ([VULN_INSTC_STS_CD] ASC)
);


GO
PRINT N'Creating [dbo].[VULN_SEV]...';


GO
CREATE TABLE [dbo].[VULN_SEV] (
    [VULN_SEV_CD]       VARCHAR (3)     NOT NULL,
    [VULN_SEV_NM]       VARCHAR (150)   NOT NULL,
    [VULN_SEV_ORDR_NBR] INT             NULL,
    [OVALL_SCOR_MIN]    DECIMAL (10, 2) NULL,
    [OVALL_SCOR_MAX]    DECIMAL (10, 2) NULL,
    [CREAT_DT]          DATETIME        NOT NULL,
    [CREAT_USER_ID]     INT             NOT NULL,
    [UPDT_DT]           DATETIME        NULL,
    [UPDT_USER_ID]      INT             NULL,
    CONSTRAINT [PK_VULN_SEV] PRIMARY KEY CLUSTERED ([VULN_SEV_CD] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[MSTR_LKP]...';


GO
ALTER TABLE [dbo].[MSTR_LKP]
    ADD DEFAULT ((1)) FOR [ACTV_IND];


GO
PRINT N'Creating [dbo].[ORG_CREAT_ORG_SCHM_IND]...';


GO
ALTER TABLE [dbo].[ORG]
    ADD CONSTRAINT [ORG_CREAT_ORG_SCHM_IND] DEFAULT ('N') FOR [CREAT_ORG_SCHM_IND];


GO
PRINT N'Creating unnamed constraint on [dbo].[PERMSN]...';


GO
ALTER TABLE [dbo].[PERMSN]
    ADD DEFAULT ((0)) FOR [CHLD_XST_IND];


GO
PRINT N'Creating unnamed constraint on [dbo].[PERMSN]...';


GO
ALTER TABLE [dbo].[PERMSN]
    ADD DEFAULT ((0)) FOR [SEQ_ORDR];


GO
PRINT N'Creating [dbo].[DF_SECUR_CTL_RQR_FOR_CERT_IND]...';


GO
ALTER TABLE [dbo].[SECUR_CTL]
    ADD CONSTRAINT [DF_SECUR_CTL_RQR_FOR_CERT_IND] DEFAULT ('Y') FOR [RQR_FOR_CERT_IND];


GO
PRINT N'Creating unnamed constraint on [dbo].[USER_SECUR_DTL]...';


GO
ALTER TABLE [dbo].[USER_SECUR_DTL]
    ADD DEFAULT ((0)) FOR [SEQ_ORDR_NBR];


GO
PRINT N'Creating [dbo].[FK_CLNT_ENGMT_15]...';


GO
ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_CLNT_ENGMT_15] FOREIGN KEY ([CLNT_ENGMT_CD]) REFERENCES [dbo].[CLNT_ENGMT] ([CLNT_ENGMT_CD]);


GO
PRINT N'Creating [dbo].[FK_CLNT_SECUR_SRVC_ENGMT_19]...';


GO
ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_CLNT_SECUR_SRVC_ENGMT_19] FOREIGN KEY ([CLNT_ENGMT_CD], [SECUR_SRVC_CD]) REFERENCES [dbo].[CLNT_SECUR_SRVC_ENGMT] ([CLNT_ENGMT_CD], [SECUR_SRVC_CD]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_16]...';


GO
ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_16] FOREIGN KEY ([DOC_TYP_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_17]...';


GO
ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_17] FOREIGN KEY ([SRC_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_18]...';


GO
ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_18] FOREIGN KEY ([FL_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_23]...';


GO
ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_23] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_ORG_25]...';


GO
ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_ORG_25] FOREIGN KEY ([ORG_KEY]) REFERENCES [dbo].[ORG] ([ORG_KEY]);


GO
PRINT N'Creating [dbo].[FK_USER_PRFL_12]...';


GO
ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_USER_PRFL_12] FOREIGN KEY ([UPLOAD_USER_ID]) REFERENCES [dbo].[USER_PRFL] ([USER_ID]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_93]...';


GO
ALTER TABLE [dbo].[APPL_ROLE] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_93] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_114]...';


GO
ALTER TABLE [dbo].[APPL_ROLE] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_114] FOREIGN KEY ([USER_TYP_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_APPL_ROLE_27]...';


GO
ALTER TABLE [dbo].[APPL_ROLE_PERMSN_GRP] WITH NOCHECK
    ADD CONSTRAINT [FK_APPL_ROLE_27] FOREIGN KEY ([APPL_ROLE_KEY]) REFERENCES [dbo].[APPL_ROLE] ([APPL_ROLE_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_33]...';


GO
ALTER TABLE [dbo].[APPL_ROLE_PERMSN_GRP] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_33] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_PERMSN_GRP_86]...';


GO
ALTER TABLE [dbo].[APPL_ROLE_PERMSN_GRP] WITH NOCHECK
    ADD CONSTRAINT [FK_PERMSN_GRP_86] FOREIGN KEY ([PERMSN_GRP_KEY]) REFERENCES [dbo].[PERMSN_GRP] ([PERMSN_GRP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_30]...';


GO
ALTER TABLE [dbo].[CD_XREF] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_30] FOREIGN KEY ([SRC_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_1]...';


GO
ALTER TABLE [dbo].[CLNT_ENGMT] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_1] FOREIGN KEY ([ENGMT_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_2]...';


GO
ALTER TABLE [dbo].[CLNT_ENGMT] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_2] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_ORG_44]...';


GO
ALTER TABLE [dbo].[CLNT_ENGMT] WITH NOCHECK
    ADD CONSTRAINT [FK_ORG_44] FOREIGN KEY ([CLNT_ORG_KEY]) REFERENCES [dbo].[ORG] ([ORG_KEY]);


GO
PRINT N'Creating [dbo].[FK_SECUR_PKG_4]...';


GO
ALTER TABLE [dbo].[CLNT_ENGMT] WITH NOCHECK
    ADD CONSTRAINT [FK_SECUR_PKG_4] FOREIGN KEY ([SECUR_PKG_CD]) REFERENCES [dbo].[SECUR_PKG] ([SECUR_PKG_CD]);


GO
PRINT N'Creating [dbo].[FK_CLNT_ENGMT_63]...';


GO
ALTER TABLE [dbo].[CLNT_ENGMT_USER_ASGN] WITH NOCHECK
    ADD CONSTRAINT [FK_CLNT_ENGMT_63] FOREIGN KEY ([CLNT_ENGMT_CD]) REFERENCES [dbo].[CLNT_ENGMT] ([CLNT_ENGMT_CD]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_50]...';


GO
ALTER TABLE [dbo].[CLNT_ENGMT_USER_ASGN] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_50] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_USER_PRFL_62]...';


GO
ALTER TABLE [dbo].[CLNT_ENGMT_USER_ASGN] WITH NOCHECK
    ADD CONSTRAINT [FK_USER_PRFL_62] FOREIGN KEY ([USER_ID]) REFERENCES [dbo].[USER_PRFL] ([USER_ID]);


GO
PRINT N'Creating [dbo].[FK_CLNT_ENGMT_3]...';


GO
ALTER TABLE [dbo].[CLNT_REL_ENGMT_ID] WITH NOCHECK
    ADD CONSTRAINT [FK_CLNT_ENGMT_3] FOREIGN KEY ([CLNT_ENGMT_CD]) REFERENCES [dbo].[CLNT_ENGMT] ([CLNT_ENGMT_CD]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_5]...';


GO
ALTER TABLE [dbo].[CLNT_REL_ENGMT_ID] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_5] FOREIGN KEY ([SRC_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_54]...';


GO
ALTER TABLE [dbo].[CLNT_REL_ENGMT_ID] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_54] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_ORG_115]...';


GO
ALTER TABLE [dbo].[CLNT_SCHM_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_ORG_115] FOREIGN KEY ([ORG_KEY]) REFERENCES [dbo].[ORG] ([ORG_KEY]);


GO
PRINT N'Creating [dbo].[FK_CLNT_ENGMT_61]...';


GO
ALTER TABLE [dbo].[CLNT_SECUR_SRVC_ENGMT] WITH NOCHECK
    ADD CONSTRAINT [FK_CLNT_ENGMT_61] FOREIGN KEY ([CLNT_ENGMT_CD]) REFERENCES [dbo].[CLNT_ENGMT] ([CLNT_ENGMT_CD]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_47]...';


GO
ALTER TABLE [dbo].[CLNT_SECUR_SRVC_ENGMT] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_47] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_48]...';


GO
ALTER TABLE [dbo].[CLNT_SECUR_SRVC_ENGMT] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_48] FOREIGN KEY ([SRVC_ENGMT_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_SECUR_SRVC_43]...';


GO
ALTER TABLE [dbo].[CLNT_SECUR_SRVC_ENGMT] WITH NOCHECK
    ADD CONSTRAINT [FK_SECUR_SRVC_43] FOREIGN KEY ([SECUR_SRVC_CD]) REFERENCES [dbo].[SECUR_SRVC] ([SECUR_SRVC_CD]);


GO
PRINT N'Creating [dbo].[FK_APPL_FL_UPLOAD_LOG_95]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH NOCHECK
    ADD CONSTRAINT [FK_APPL_FL_UPLOAD_LOG_95] FOREIGN KEY ([APPL_FL_UPLOAD_LOG_KEY]) REFERENCES [dbo].[APPL_FL_UPLOAD_LOG] ([APPL_FL_UPLOAD_LOG_KEY]);


GO
PRINT N'Creating [dbo].[FK_CLNT_SECUR_SRVC_ENGMT_106]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH NOCHECK
    ADD CONSTRAINT [FK_CLNT_SECUR_SRVC_ENGMT_106] FOREIGN KEY ([CLNT_ENGMT_CD], [SECUR_SRVC_CD]) REFERENCES [dbo].[CLNT_SECUR_SRVC_ENGMT] ([CLNT_ENGMT_CD], [SECUR_SRVC_CD]);


GO
PRINT N'Creating [dbo].[FK_CVE_113]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH NOCHECK
    ADD CONSTRAINT [FK_CVE_113] FOREIGN KEY ([CVE_ID]) REFERENCES [dbo].[CVE] ([CVE_ID]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_102]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_102] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_103]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_103] FOREIGN KEY ([VULN_SRC_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_ORG_104]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH NOCHECK
    ADD CONSTRAINT [FK_ORG_104] FOREIGN KEY ([ORG_KEY]) REFERENCES [dbo].[ORG] ([ORG_KEY]);


GO
PRINT N'Creating [dbo].[FK_OS_112]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH NOCHECK
    ADD CONSTRAINT [FK_OS_112] FOREIGN KEY ([OS_KEY]) REFERENCES [dbo].[OS] ([OS_KEY]);


GO
PRINT N'Creating [dbo].[FK_OWASP_TOP_10_100]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH NOCHECK
    ADD CONSTRAINT [FK_OWASP_TOP_10_100] FOREIGN KEY ([OWASP_TOP_10_KEY]) REFERENCES [dbo].[OWASP_TOP_10] ([OWASP_TOP_10_KEY]);


GO
PRINT N'Creating [dbo].[FK_RISK_PRBL_109]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH NOCHECK
    ADD CONSTRAINT [FK_RISK_PRBL_109] FOREIGN KEY ([RISK_PRBL_CD]) REFERENCES [dbo].[RISK_PRBL] ([RISK_PRBL_CD]);


GO
PRINT N'Creating [dbo].[FK_RMDTN_CST_EFFRT_110]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH NOCHECK
    ADD CONSTRAINT [FK_RMDTN_CST_EFFRT_110] FOREIGN KEY ([RMDTN_CST_EFFRT_CD]) REFERENCES [dbo].[RMDTN_CST_EFFRT] ([RMDTN_CST_EFFRT_CD]);


GO
PRINT N'Creating [dbo].[FK_VULN_CATGY_111]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH NOCHECK
    ADD CONSTRAINT [FK_VULN_CATGY_111] FOREIGN KEY ([VULN_CATGY_CD]) REFERENCES [dbo].[VULN_CATGY] ([VULN_CATGY_CD]);


GO
PRINT N'Creating [dbo].[FK_VULN_IMP_108]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH NOCHECK
    ADD CONSTRAINT [FK_VULN_IMP_108] FOREIGN KEY ([VULN_IMP_CD]) REFERENCES [dbo].[VULN_IMP] ([VULN_IMP_CD]);


GO
PRINT N'Creating [dbo].[FK_VULN_INSTC_STS_107]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH NOCHECK
    ADD CONSTRAINT [FK_VULN_INSTC_STS_107] FOREIGN KEY ([VULN_INSTC_STS_CD]) REFERENCES [dbo].[VULN_INSTC_STS] ([VULN_INSTC_STS_CD]);


GO
PRINT N'Creating [dbo].[FK_VULN_SEV_101]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH NOCHECK
    ADD CONSTRAINT [FK_VULN_SEV_101] FOREIGN KEY ([VULN_SEV_CD]) REFERENCES [dbo].[VULN_SEV] ([VULN_SEV_CD]);


GO
PRINT N'Creating [dbo].[FK_CLNT_VULN_INSTC_83]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_SECUR_CTL] WITH NOCHECK
    ADD CONSTRAINT [FK_CLNT_VULN_INSTC_83] FOREIGN KEY ([CLNT_VULN_INSTC_KEY]) REFERENCES [dbo].[CLNT_VULN_INSTC] ([CLNT_VULN_INSTC_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_79]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_SECUR_CTL] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_79] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_SECUR_CTL_76]...';


GO
ALTER TABLE [dbo].[CLNT_VULN_SECUR_CTL] WITH NOCHECK
    ADD CONSTRAINT [FK_SECUR_CTL_76] FOREIGN KEY ([REG_CMPLN_CD], [REG_CMPLN_VER], [SECUR_CTL_CD]) REFERENCES [dbo].[SECUR_CTL] ([REG_CMPLN_CD], [REG_CMPLN_VER], [SECUR_CTL_CD]);


GO
PRINT N'Creating [dbo].[FK_CVE_8]...';


GO
ALTER TABLE [dbo].[CVE_SECUR_CTL_MAP] WITH NOCHECK
    ADD CONSTRAINT [FK_CVE_8] FOREIGN KEY ([CVE_ID]) REFERENCES [dbo].[CVE] ([CVE_ID]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_78]...';


GO
ALTER TABLE [dbo].[CVE_SECUR_CTL_MAP] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_78] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_SECUR_CTL_9]...';


GO
ALTER TABLE [dbo].[CVE_SECUR_CTL_MAP] WITH NOCHECK
    ADD CONSTRAINT [FK_SECUR_CTL_9] FOREIGN KEY ([REG_CMPLN_CD], [REG_CMPLN_VER], [SECUR_CTL_CD]) REFERENCES [dbo].[SECUR_CTL] ([REG_CMPLN_CD], [REG_CMPLN_VER], [SECUR_CTL_CD]);


GO
PRINT N'Creating [dbo].[FK_ETL_AUD_LOG_11]...';


GO
ALTER TABLE [dbo].[ETL_ERR_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_ETL_AUD_LOG_11] FOREIGN KEY ([ETL_AUD_LOG_KEY]) REFERENCES [dbo].[ETL_AUD_LOG] ([ETL_AUD_LOG_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_35]...';


GO
ALTER TABLE [dbo].[NTF_MSG] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_35] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_57]...';


GO
ALTER TABLE [dbo].[ORG] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_57] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_58]...';


GO
ALTER TABLE [dbo].[ORG] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_58] FOREIGN KEY ([ORG_TYP_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_60]...';


GO
ALTER TABLE [dbo].[ORG] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_60] FOREIGN KEY ([ORG_INDUS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_ORG_59]...';


GO
ALTER TABLE [dbo].[ORG] WITH NOCHECK
    ADD CONSTRAINT [FK_ORG_59] FOREIGN KEY ([PAR_ORG_KEY]) REFERENCES [dbo].[ORG] ([ORG_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_51]...';


GO
ALTER TABLE [dbo].[ORG_REL_ID] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_51] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_67]...';


GO
ALTER TABLE [dbo].[ORG_REL_ID] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_67] FOREIGN KEY ([SRC_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_ORG_64]...';


GO
ALTER TABLE [dbo].[ORG_REL_ID] WITH NOCHECK
    ADD CONSTRAINT [FK_ORG_64] FOREIGN KEY ([ORG_KEY]) REFERENCES [dbo].[ORG] ([ORG_KEY]);


GO
PRINT N'Creating [dbo].[FK_OS_CATGY_82]...';


GO
ALTER TABLE [dbo].[OS] WITH NOCHECK
    ADD CONSTRAINT [FK_OS_CATGY_82] FOREIGN KEY ([OS_CATGY_KEY]) REFERENCES [dbo].[OS_CATGY] ([OS_CATGY_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_80]...';


GO
ALTER TABLE [dbo].[PERMSN] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_80] FOREIGN KEY ([PERMSN_TYP_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_92]...';


GO
ALTER TABLE [dbo].[PERMSN] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_92] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_PERMSN_68]...';


GO
ALTER TABLE [dbo].[PERMSN] WITH NOCHECK
    ADD CONSTRAINT [FK_PERMSN_68] FOREIGN KEY ([PAR_PERMSN_KEY]) REFERENCES [dbo].[PERMSN] ([PERMSN_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_70]...';


GO
ALTER TABLE [dbo].[PERMSN_GRP] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_70] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_31]...';


GO
ALTER TABLE [dbo].[PERMSN_GRP_ASSOC] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_31] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_PERMSN_69]...';


GO
ALTER TABLE [dbo].[PERMSN_GRP_ASSOC] WITH NOCHECK
    ADD CONSTRAINT [FK_PERMSN_69] FOREIGN KEY ([PERMSN_KEY]) REFERENCES [dbo].[PERMSN] ([PERMSN_KEY]);


GO
PRINT N'Creating [dbo].[FK_PERMSN_GRP_85]...';


GO
ALTER TABLE [dbo].[PERMSN_GRP_ASSOC] WITH NOCHECK
    ADD CONSTRAINT [FK_PERMSN_GRP_85] FOREIGN KEY ([PERMSN_GRP_KEY]) REFERENCES [dbo].[PERMSN_GRP] ([PERMSN_GRP_KEY]);


GO
PRINT N'Creating [dbo].[FK_CLNT_ENGMT_13]...';


GO
ALTER TABLE [dbo].[RPT_FL_UPLOAD_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_CLNT_ENGMT_13] FOREIGN KEY ([CLNT_ENGMT_CD]) REFERENCES [dbo].[CLNT_ENGMT] ([CLNT_ENGMT_CD]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_20]...';


GO
ALTER TABLE [dbo].[RPT_FL_UPLOAD_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_20] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_22]...';


GO
ALTER TABLE [dbo].[RPT_FL_UPLOAD_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_22] FOREIGN KEY ([RPT_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_ORG_21]...';


GO
ALTER TABLE [dbo].[RPT_FL_UPLOAD_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_ORG_21] FOREIGN KEY ([ORG_KEY]) REFERENCES [dbo].[ORG] ([ORG_KEY]);


GO
PRINT N'Creating [dbo].[FK_RPT_NM_14]...';


GO
ALTER TABLE [dbo].[RPT_FL_UPLOAD_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_RPT_NM_14] FOREIGN KEY ([RPT_NM_KEY]) REFERENCES [dbo].[RPT_NM] ([RPT_NM_KEY]);


GO
PRINT N'Creating [dbo].[FK_SECUR_SRVC_24]...';


GO
ALTER TABLE [dbo].[RPT_NM] WITH NOCHECK
    ADD CONSTRAINT [FK_SECUR_SRVC_24] FOREIGN KEY ([SECUR_SRVC_CD]) REFERENCES [dbo].[SECUR_SRVC] ([SECUR_SRVC_CD]);


GO
PRINT N'Creating [dbo].[FK_REG_CMPLN_6]...';


GO
ALTER TABLE [dbo].[SECUR_CTL] WITH NOCHECK
    ADD CONSTRAINT [FK_REG_CMPLN_6] FOREIGN KEY ([REG_CMPLN_CD], [REG_CMPLN_VER]) REFERENCES [dbo].[REG_CMPLN] ([REG_CMPLN_CD], [REG_CMPLN_VER]);


GO
PRINT N'Creating [dbo].[FK_SECUR_CTL_10]...';


GO
ALTER TABLE [dbo].[SECUR_CTL_MAP] WITH NOCHECK
    ADD CONSTRAINT [FK_SECUR_CTL_10] FOREIGN KEY ([PRI_REG_CMPLN_CD], [PRI_REG_CMPLN_VER], [PRI_SECUR_CTL_CD]) REFERENCES [dbo].[SECUR_CTL] ([REG_CMPLN_CD], [REG_CMPLN_VER], [SECUR_CTL_CD]);


GO
PRINT N'Creating [dbo].[FK_SECUR_CTL_7]...';


GO
ALTER TABLE [dbo].[SECUR_CTL_MAP] WITH NOCHECK
    ADD CONSTRAINT [FK_SECUR_CTL_7] FOREIGN KEY ([SEC_REG_CMPLN_CD], [SEC_REG_CMPLN_VER], [SEC_SECUR_CTL_CD]) REFERENCES [dbo].[SECUR_CTL] ([REG_CMPLN_CD], [REG_CMPLN_VER], [SECUR_CTL_CD]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_49]...';


GO
ALTER TABLE [dbo].[SECUR_PKG] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_49] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_53]...';


GO
ALTER TABLE [dbo].[SECUR_PKG_OFR] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_53] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_SECUR_PKG_45]...';


GO
ALTER TABLE [dbo].[SECUR_PKG_OFR] WITH NOCHECK
    ADD CONSTRAINT [FK_SECUR_PKG_45] FOREIGN KEY ([SECUR_PKG_CD]) REFERENCES [dbo].[SECUR_PKG] ([SECUR_PKG_CD]);


GO
PRINT N'Creating [dbo].[FK_SECUR_SRVC_46]...';


GO
ALTER TABLE [dbo].[SECUR_PKG_OFR] WITH NOCHECK
    ADD CONSTRAINT [FK_SECUR_SRVC_46] FOREIGN KEY ([SECUR_SRVC_CD]) REFERENCES [dbo].[SECUR_SRVC] ([SECUR_SRVC_CD]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_55]...';


GO
ALTER TABLE [dbo].[SECUR_SRVC] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_55] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_CNTRY_CD_29]...';


GO
ALTER TABLE [dbo].[ST_CD] WITH NOCHECK
    ADD CONSTRAINT [FK_CNTRY_CD_29] FOREIGN KEY ([CNTRY_CD]) REFERENCES [dbo].[CNTRY_CD] ([CNTRY_CD]);


GO
PRINT N'Creating [dbo].[FK_APPL_ROLE_28]...';


GO
ALTER TABLE [dbo].[USER_APPL_ROLE] WITH NOCHECK
    ADD CONSTRAINT [FK_APPL_ROLE_28] FOREIGN KEY ([APPL_ROLE_KEY]) REFERENCES [dbo].[APPL_ROLE] ([APPL_ROLE_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_71]...';


GO
ALTER TABLE [dbo].[USER_APPL_ROLE] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_71] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_USER_PRFL_32]...';


GO
ALTER TABLE [dbo].[USER_APPL_ROLE] WITH NOCHECK
    ADD CONSTRAINT [FK_USER_PRFL_32] FOREIGN KEY ([USER_ID]) REFERENCES [dbo].[USER_PRFL] ([USER_ID]);


GO
PRINT N'Creating [dbo].[FK_CLNT_SECUR_SRVC_ENGMT_65]...';


GO
ALTER TABLE [dbo].[USER_CLNT_SRVC_ASGN] WITH NOCHECK
    ADD CONSTRAINT [FK_CLNT_SECUR_SRVC_ENGMT_65] FOREIGN KEY ([CLNT_ENGMT_CD], [SECUR_SRVC_CD]) REFERENCES [dbo].[CLNT_SECUR_SRVC_ENGMT] ([CLNT_ENGMT_CD], [SECUR_SRVC_CD]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_52]...';


GO
ALTER TABLE [dbo].[USER_CLNT_SRVC_ASGN] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_52] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_SECUR_SRVC_42]...';


GO
ALTER TABLE [dbo].[USER_CLNT_SRVC_ASGN] WITH NOCHECK
    ADD CONSTRAINT [FK_SECUR_SRVC_42] FOREIGN KEY ([SECUR_SRVC_CD]) REFERENCES [dbo].[SECUR_SRVC] ([SECUR_SRVC_CD]);


GO
PRINT N'Creating [dbo].[FK_USER_PRFL_66]...';


GO
ALTER TABLE [dbo].[USER_CLNT_SRVC_ASGN] WITH NOCHECK
    ADD CONSTRAINT [FK_USER_PRFL_66] FOREIGN KEY ([USER_ID]) REFERENCES [dbo].[USER_PRFL] ([USER_ID]);


GO
PRINT N'Creating [dbo].[FK_NTF_MSG_39]...';


GO
ALTER TABLE [dbo].[USER_EMAIL_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_NTF_MSG_39] FOREIGN KEY ([NTF_MSG_KEY]) REFERENCES [dbo].[NTF_MSG] ([NTF_MSG_KEY]);


GO
PRINT N'Creating [dbo].[FK_USER_PRFL_41]...';


GO
ALTER TABLE [dbo].[USER_EMAIL_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_USER_PRFL_41] FOREIGN KEY ([USER_ID]) REFERENCES [dbo].[USER_PRFL] ([USER_ID]);


GO
PRINT N'Creating [dbo].[FK_USER_PRFL_38]...';


GO
ALTER TABLE [dbo].[USER_EVNT_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_USER_PRFL_38] FOREIGN KEY ([USER_ID]) REFERENCES [dbo].[USER_PRFL] ([USER_ID]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_36]...';


GO
ALTER TABLE [dbo].[USER_PRFL] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_36] FOREIGN KEY ([USER_TYP_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_37]...';


GO
ALTER TABLE [dbo].[USER_PRFL] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_37] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_ORG_56]...';


GO
ALTER TABLE [dbo].[USER_PRFL] WITH NOCHECK
    ADD CONSTRAINT [FK_ORG_56] FOREIGN KEY ([ORG_KEY]) REFERENCES [dbo].[ORG] ([ORG_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_74]...';


GO
ALTER TABLE [dbo].[USER_SECUR_DTL] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_74] FOREIGN KEY ([ROW_STS_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_MSTR_LKP_81]...';


GO
ALTER TABLE [dbo].[USER_SECUR_DTL] WITH NOCHECK
    ADD CONSTRAINT [FK_MSTR_LKP_81] FOREIGN KEY ([SECUR_QUES_KEY]) REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY]);


GO
PRINT N'Creating [dbo].[FK_USER_PRFL_88]...';


GO
ALTER TABLE [dbo].[USER_SECUR_DTL] WITH NOCHECK
    ADD CONSTRAINT [FK_USER_PRFL_88] FOREIGN KEY ([USER_ID]) REFERENCES [dbo].[USER_PRFL] ([USER_ID]);


GO
PRINT N'Creating [dbo].[FK_USER_PRFL_40]...';


GO
ALTER TABLE [dbo].[USER_SESS_LOG] WITH NOCHECK
    ADD CONSTRAINT [FK_USER_PRFL_40] FOREIGN KEY ([USER_ID]) REFERENCES [dbo].[USER_PRFL] ([USER_ID]);


GO
PRINT N'Creating [dbo].[FK_VULN_CATGY_118]...';


GO
ALTER TABLE [dbo].[VULN] WITH NOCHECK
    ADD CONSTRAINT [FK_VULN_CATGY_118] FOREIGN KEY ([VULN_CATGY_CD]) REFERENCES [dbo].[VULN_CATGY] ([VULN_CATGY_CD]);


GO
PRINT N'Creating [dbo].[fnGetMasterLkpID]...';


GO
CREATE FUNCTION [dbo].[fnGetMasterLkpID]
(	
	@EntityType	VARCHAR(100),
    @EntityName	VARCHAR(500)
)
RETURNS INTEGER
AS
BEGIN
    DECLARE @EntityID INTEGER
      
      SELECT @EntityID = MSTR_LKP_KEY FROM [MSTR_LKP] 
      WHERE	 LKP_ENTY_TYP_NM = @EntityType AND LKP_ENTY_NM  = @EntityName

    RETURN @EntityID
END
GO
PRINT N'Creating [dbo].[fnGetMasterLkpNameByID]...';


GO
CREATE FUNCTION [dbo].[fnGetMasterLkpNameByID]
(	
    @EntityID	INTEGER
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @EntityName NVARCHAR(500)
      
      SELECT @EntityName = LKP_ENTY_NM FROM [MSTR_LKP] 
      WHERE	 MSTR_LKP_KEY = @EntityID

    RETURN @EntityName
END
GO
PRINT N'Creating [dbo].[fnGetParentOrgNameID]...';


GO
CREATE FUNCTION [dbo].[fnGetParentOrgNameID]
(	
	@ParentKey INTEGER
)
RETURNS VARCHAR(150)
AS
BEGIN
    DECLARE @EntityID VARCHAR(150)
      
      SELECT @EntityID = ORG_NM FROM ORG 
      WHERE	 ORG_KEY = @ParentKey

    RETURN @EntityID
END
GO
PRINT N'Creating [dbo].[fnGetServiceNameBycode]...';


GO

CREATE  FUNCTION [dbo].[fnGetServiceNameBycode]
(	
	@SECUR_SRVC_CD VARCHAR(10)
)
RETURNS VARCHAR(150)
AS
BEGIN
    DECLARE @EntityID VARCHAR(150)
      
      SELECT @EntityID = SECUR_SRVC_NM FROM SECUR_SRVC 
      WHERE	 SECUR_SRVC_CD = @SECUR_SRVC_CD

    RETURN @EntityID
END
GO
PRINT N'Creating [dbo].[fnGetUserEmailByID]...';


GO
CREATE FUNCTION [dbo].[fnGetUserEmailByID]
(	
    @Userid	INTEGER
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @EmailID NVARCHAR(500)
   
      SELECT @EmailID = EMAIL_ID  FROM USER_PRFL
      WHERE	 USER_ID = @Userid

    RETURN @EmailID
END
GO
PRINT N'Creating [dbo].[fnGetUserNameByID]...';


GO
CREATE FUNCTION [dbo].[fnGetUserNameByID]
(	
    @Userid	INTEGER
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @UserName NVARCHAR(500)
   
      SELECT @UserName = FST_NM+' '+LST_NM  FROM USER_PRFL
      WHERE	 USER_ID = @Userid

    RETURN @UserName
END
GO
PRINT N'Creating [dbo].[fnGetSecurCtlMap]...';


GO

CREATE FUNCTION dbo.fnGetSecurCtlMap(@REG_CMPLN_CD AS VARCHAR(20), @REG_CMPLN_VER AS VARCHAR(20), @SECUR_CTL_CD AS VARCHAR(20))
    RETURNS TABLE
AS
RETURN

	SELECT REG_CMPLN_CD, REG_CMPLN_VER, SECUR_CTL_CD
	FROM
	(
	  SELECT PRI_REG_CMPLN_CD AS REG_CMPLN_CD, PRI_REG_CMPLN_VER AS REG_CMPLN_VER, PRI_SECUR_CTL_CD AS SECUR_CTL_CD 
	  FROM [dbo].SECUR_CTL_MAP
			WHERE PRI_REG_CMPLN_CD = @REG_CMPLN_CD
				AND PRI_REG_CMPLN_VER = @REG_CMPLN_VER
				AND PRI_SECUR_CTL_CD = @SECUR_CTL_CD
	  UNION
	  SELECT SEC_REG_CMPLN_CD AS REG_CMPLN_CD, SEC_REG_CMPLN_VER AS REG_CMPLN_VER, SEC_SECUR_CTL_CD AS SECUR_CTL_CD 
	  FROM [dbo].SECUR_CTL_MAP 
			WHERE PRI_REG_CMPLN_CD = @REG_CMPLN_CD
				AND PRI_REG_CMPLN_VER = @REG_CMPLN_VER
				AND PRI_SECUR_CTL_CD = @SECUR_CTL_CD
	) SecurCtldata
GO
PRINT N'Creating [dbo].[FnSplit]...';


GO
-- DROP FUNCTION   FnSplit
CREATE FUNCTION [dbo].[FnSplit]
(
	@String varchar(MAX), 
	@Delimiter char(1)
 )       
returns @temptable TABLE (items varchar(MAX))       
as       
begin      
    declare @idx int       
    declare @slice varchar(8000)       

    select @idx = 1       
        if len(@String)<1 or @String is null  return       

    while @idx!= 0       
    begin       
        set @idx = charindex(@Delimiter,@String)       
        if @idx!=0       
            set @slice = left(@String,@idx - 1)       
        else       
            set @slice = @String       

        if(len(@slice)>0)  
            insert into @temptable(Items) values(@slice)       

        set @String = right(@String,len(@String) - @idx)       
        if len(@String) = 0 break       
    end   
return 
end;
GO
PRINT N'Creating [dbo].[Analyst_GetClientVulnerabiltysecctrlByVulnkey]...';


GO
CREATE PROCEDURE [dbo].[Analyst_GetClientVulnerabiltysecctrlByVulnkey]
(
	@CLNT_VULN_INSTC_KEY	INTEGER,
	@Flag					VARCHAR(1),
	@schema					VARCHAR(50)

	

)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
	DECLARE @Query VARCHAR(max)


	IF 	@Flag ='A'	-- ACTIVE AND INACTIVE RECORDS
	BEGIN
	SET		@Query = 'SELECT  A.CLNT_VULN_INSTC_KEY,A.SECUR_CTL_CD,A.CREAT_DT,A.UPDT_DT,A.UPDT_USER_ID,
			B.REG_CMPLN_CD, B.SECUR_CTL_FAM_CD,B.SECUR_CTL_FAM_NM,B.SECUR_OBJ_CD,
			B.SECUR_OBJ_NM,B.SECUR_CTL_NM,B.SECUR_CTL_DESC,A.ROW_STS_KEY,B.REG_CMPLN_VER
	FROM	'+ @schema+'.CLNT_VULN_SECUR_CTL		A
	JOIN	SECUR_CTL				B
	ON		A.SECUR_CTL_CD		=	B.SECUR_CTL_CD
	WHERE	CLNT_VULN_INSTC_KEY	=	'+ CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY)+'
	AND		A.ROW_STS_KEY		IN(1,2)
	AND		A.REG_CMPLN_CD		= ''HITRUST'' '
--	PRINT    @Query
	EXECUTE (@Query)
	END

	IF 	@Flag ='T'	-- ALL RECORDS
	BEGIN
	SET		@Query = 'SELECT  A.CLNT_VULN_INSTC_KEY,A.SECUR_CTL_CD,A.CREAT_DT,A.UPDT_DT,A.UPDT_USER_ID,
			B.REG_CMPLN_CD, B.SECUR_CTL_FAM_CD,B.SECUR_CTL_FAM_NM,B.SECUR_OBJ_CD,
			B.SECUR_OBJ_NM,B.SECUR_CTL_NM,B.SECUR_CTL_DESC,A.ROW_STS_KEY,B.REG_CMPLN_VER
	FROM	'+ @schema+'.CLNT_VULN_SECUR_CTL		A
	JOIN	SECUR_CTL								B
	ON		A.SECUR_CTL_CD						=	B.SECUR_CTL_CD
	WHERE	CLNT_VULN_INSTC_KEY					=	'+ CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY)+'
	AND		A.REG_CMPLN_CD						= ''HITRUST'' '
	EXECUTE (@Query)
	END

	IF 	@Flag ='S'	-- ALL SECONDRY COMPLIANCES 
	BEGIN
	SET		@Query = 'SELECT  A.CLNT_VULN_INSTC_KEY,A.SECUR_CTL_CD,A.CREAT_DT,A.UPDT_DT,A.UPDT_USER_ID,
			B.REG_CMPLN_CD, B.SECUR_CTL_FAM_CD,B.SECUR_CTL_FAM_NM,B.SECUR_OBJ_CD,
			B.SECUR_OBJ_NM,B.SECUR_CTL_NM,B.SECUR_CTL_DESC,A.ROW_STS_KEY,B.REG_CMPLN_VER
	FROM	'+ @schema+'.CLNT_VULN_SECUR_CTL		A
	JOIN	SECUR_CTL								B
	ON		A.SECUR_CTL_CD						=	B.SECUR_CTL_CD
	WHERE	CLNT_VULN_INSTC_KEY					=	'+ CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY)
	-- PRINT   @Query
	EXECUTE (@Query)
	END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_GetComplianceInfoBycveID]...';


GO
CREATE PROCEDURE [dbo].[Analyst_GetComplianceInfoBycveID]
(
	
	@CVE_ID		 VARCHAR(25)
	
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
		
		SELECT  A.REG_CMPLN_CD, A.SECUR_CTL_FAM_CD,A.SECUR_CTL_FAM_NM,A.SECUR_OBJ_CD,A.SECUR_OBJ_NM,A.SECUR_CTL_NM,
				A.SECUR_CTL_DESC,A.SECUR_CTL_CD
		FROM	SECUR_CTL					A
		JOIN	CVE_SECUR_CTL_MAP			B	
		ON		A.SECUR_CTL_CD	        =	B.SECUR_CTL_CD	
		WHERE	B.CVE_ID				=   @CVE_ID
		AND		B.ROW_STS_KEY			=  1
			       


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_GetCROSSWALKBYCNTLCD]...';


GO

CREATE PROCEDURE [dbo].[Analyst_GetCROSSWALKBYCNTLCD]
(
       @PRI_SECUR_CTL_CD    VARCHAR(500)
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
              
              SELECT DISTINCT A.SEC_SECUR_CTL_CD [SECUR_CTL_CD],A.SEC_REG_CMPLN_CD [REG_CMPLN_CD],
                     B.SECUR_CTL_NM,A.SEC_REG_CMPLN_VER REG_CMPLN_VER,
                     B.SECUR_CTL_FAM_CD,B.SECUR_CTL_FAM_NM,B.SECUR_OBJ_CD,B.SECUR_OBJ_NM,B.SECUR_CTL_DESC
              FROM   [SECUR_CTL_MAP]       A
              JOIN   [SECUR_CTL]           B
              ON     A.SEC_SECUR_CTL_CD  = B.SECUR_CTL_CD
			  AND	 A.SEC_REG_CMPLN_CD	 = B.REG_CMPLN_CD
			  AND	 A.SEC_REG_CMPLN_VER = B.REG_CMPLN_VER
              JOIN   REG_CMPLN             C
              ON     A.SEC_REG_CMPLN_CD  = C.REG_CMPLN_CD
			  CROSS APPLY FnSplit(@PRI_SECUR_CTL_CD,',') D
              WHERE  A.PRI_SECUR_CTL_CD    = D.items
              ORDER BY A.SEC_REG_CMPLN_CD 
                            


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_GetCVEInformationByID]...';


GO
CREATE PROCEDURE [dbo].[Analyst_GetCVEInformationByID]
(
	
	@CVE_ID		 VARCHAR(25)
	
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
		
		SELECT CVE_ID,CVE_DESC,CWE_ID,UPDT_DT,BAS_SCOR,ACS_VCTR,ACS_CMPLX,CONFDTY_IMP,INGTY_IMP,AVL_IMP,VCTR_TXT,IMP_SUB_SCOR,EXPLT_SUB_SCOR
	    FROM CVE
		WHERE CVE_ID = @CVE_ID
			       


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_GetCVSSMetricScore]...';


GO



CREATE PROCEDURE [dbo].[Analyst_GetCVSSMetricScore]
(
	
	@CVSS_VER			VARCHAR(20),
	@MTRC_VCTR_CD		VARCHAR(3),
	@MTRC_VAL_VCTR_CD	VARCHAR(3)
	
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
		
		SELECT MTRC_GRP_NM,MTRC_NM,CVSS_VER,MTRC_VCTR_CD,MTRC_VAL_TXT,MTRC_VAL_VCTR_CD,MTRC_VAL_SCOR,VCTR_ORDR
	    FROM CVSS_SCOR_MTRC
		WHERE CVSS_VER = @CVSS_VER
		AND  MTRC_VCTR_CD = CASE WHEN @MTRC_VCTR_CD='' THEN MTRC_VCTR_CD ELSE @MTRC_VCTR_CD END
		AND  MTRC_VAL_VCTR_CD = CASE WHEN @MTRC_VAL_VCTR_CD='' THEN MTRC_VAL_VCTR_CD ELSE @MTRC_VAL_VCTR_CD END
		ORDER BY VCTR_ORDR
				  

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_GetEngmtAnalystWorkList]...';


GO
CREATE PROCEDURE [dbo].[Analyst_GetEngmtAnalystWorkList]
(
	@PiUserID			INTEGER,
	@OrgName			VARCHAR(150),
	@CLNT_ENGMT_CD		VARCHAR(30),	
	@CLNT_ENGMT_NM		VARCHAR(150),
	@SECUR_SRVC_NM		VARCHAR(150),
	@STRT_DT			VARCHAR(10),
	@END_DT				VARCHAR(10),
	@PiUserType			INTEGER,
	@UPDT_DT			VARCHAR(10),
	@Status				VARCHAR(50),	
	@PvcFlag			VARCHAR(1)
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON

IF @PvcFlag = 'A' -- Analyst


BEGIN

	SELECT  [Client NAME],CLNT_ORG_KEY, CLNT_ENGMT_CD,CLNT_ENGMT_NM,SECUR_SRVC_NM,SECUR_SRVC_CD,
			FL_LCK_IND, [Start Date],[End Date], UpdatedDate,
			SRVC_ENGMT_STS_KEY,ENGMT_STS_KEY, ReviewStatus,CREAT_DT,UPDT_DT,ORG_SCHM FROM
	(SELECT  DISTINCT H.ORG_NM [Client NAME],B.CLNT_ORG_KEY, A.CLNT_ENGMT_CD,B.CLNT_ENGMT_NM,D.SECUR_SRVC_NM,D.SECUR_SRVC_CD,
			A.FL_LCK_IND,A.SRVC_EST_STRT_DT [Start Date],A.SRVC_EST_END_DT [End Date],A.UPDT_DT UpdatedDate,
			A.SRVC_ENGMT_STS_KEY,B.ENGMT_STS_KEY,I.LKP_ENTY_NM ReviewStatus,B.CREAT_DT,B.UPDT_DT,H.ORG_SCHM
	FROM	CLNT_SECUR_SRVC_ENGMT		A
	JOIN	CLNT_ENGMT					B
	ON		A.CLNT_ENGMT_CD			=	B.CLNT_ENGMT_CD
	JOIN	SECUR_SRVC					D
	ON		D.SECUR_SRVC_CD			=	A.SECUR_SRVC_CD
	JOIN	USER_CLNT_SRVC_ASGN			G
	ON		B.CLNT_ENGMT_CD			=	G.CLNT_ENGMT_CD
	AND		D.SECUR_SRVC_CD			=   G.SECUR_SRVC_CD
	JOIN	ORG							H
	ON		H.ORG_KEY				=	B.CLNT_ORG_KEY 
	JOIN	MSTR_LKP					I
	ON		I.MSTR_LKP_KEY			=   A.SRVC_ENGMT_STS_KEY
	WHERE	G.USER_ID				=   @PiUserID 
	AND		ISNULL(H.ORG_NM,'') LIKE CASE WHEN @OrgName = '' THEN	ISNULL(H.ORG_NM,'') ELSE '%' + @OrgName + '%' END
	AND		ISNULL(A.CLNT_ENGMT_CD,'') LIKE CASE WHEN @CLNT_ENGMT_CD = '' THEN	A.CLNT_ENGMT_CD ELSE '%' + @CLNT_ENGMT_CD +'%' END	
	AND		ISNULL(B.CLNT_ENGMT_NM,'') LIKE CASE WHEN @CLNT_ENGMT_NM = '' THEN	B.CLNT_ENGMT_NM ELSE '%' + @CLNT_ENGMT_NM + '%'   END	
	AND		ISNULL(D.SECUR_SRVC_NM,'') LIKE CASE WHEN @SECUR_SRVC_NM = '' THEN	D.SECUR_SRVC_NM ELSE '%' + @SECUR_SRVC_NM + '%' END
	AND		CONVERT(VARCHAR(20),A.SRVC_EST_STRT_DT,101)	 = CASE WHEN @STRT_DT  = '' THEN CONVERT(VARCHAR(20),A.SRVC_EST_STRT_DT,101)  ELSE @STRT_DT END
	AND		CONVERT(VARCHAR(20),A.SRVC_EST_END_DT,101)	 = CASE WHEN @END_DT  = '' THEN CONVERT(VARCHAR(20),A.SRVC_EST_END_DT,101)  ELSE @END_DT END
	AND		CONVERT(VARCHAR(20),ISNULL(A.UPDT_DT,''),101)	 = CASE WHEN @UPDT_DT  = '' THEN CONVERT(VARCHAR(20),ISNULL(A.UPDT_DT,''),101)  ELSE  @UPDT_DT END
	AND		ISNULL(I.LKP_ENTY_NM ,'') =  CASE WHEN @Status = '' THEN	I.LKP_ENTY_NM  ELSE @Status END		
	AND		A.ROW_STS_KEY	= 1) A
	
	ORDER BY CASE WHEN ISNULL(UPDT_DT,'') ='' THEN CREAT_DT ELSE UPDT_DT END  DESC
	
END

IF @PvcFlag = 'E' -- Engmt Lead
BEGIN
	
	SELECT   [Client NAME],CLNT_ORG_KEY, CLNT_ENGMT_CD,CLNT_ENGMT_NM,SECUR_SRVC_NM,SECUR_SRVC_CD,
			FL_LCK_IND, [Start Date],[End Date], UpdatedDate,
			SRVC_ENGMT_STS_KEY,ENGMT_STS_KEY, ReviewStatus,CREAT_DT,UPDT_DT,ORG_SCHM  FROM
	(
	SELECT   DISTINCT H.ORG_NM [Client NAME],B.CLNT_ORG_KEY, A.CLNT_ENGMT_CD,B.CLNT_ENGMT_NM,D.SECUR_SRVC_NM,D.SECUR_SRVC_CD,
			A.FL_LCK_IND,A.SRVC_EST_STRT_DT [Start Date],A.SRVC_EST_END_DT [End Date],A.UPDT_DT UpdatedDate,
			A.SRVC_ENGMT_STS_KEY,B.ENGMT_STS_KEY,I.LKP_ENTY_NM ReviewStatus,B.CREAT_DT,B.UPDT_DT,H.ORG_SCHM
	FROM	CLNT_SECUR_SRVC_ENGMT		A
	JOIN	CLNT_ENGMT					B
	ON		A.CLNT_ENGMT_CD			=	B.CLNT_ENGMT_CD
	JOIN	SECUR_SRVC					D
	ON		D.SECUR_SRVC_CD			=	A.SECUR_SRVC_CD
	JOIN	CLNT_ENGMT_USER_ASGN		G
	ON		B.CLNT_ENGMT_CD			=	G.CLNT_ENGMT_CD
	JOIN	ORG							H
	ON		H.ORG_KEY				=	B.CLNT_ORG_KEY
	JOIN	MSTR_LKP					I
	ON		I.MSTR_LKP_KEY			=   A.SRVC_ENGMT_STS_KEY
	WHERE	G.USER_ID				=	@PiUserID
	AND		ISNULL(H.ORG_NM,'')		   LIKE CASE WHEN @OrgName = ''		  THEN	ISNULL(H.ORG_NM,'') ELSE '%' + @OrgName +'%' END
	AND		ISNULL(A.CLNT_ENGMT_CD,'') LIKE CASE WHEN @CLNT_ENGMT_CD = '' THEN	A.CLNT_ENGMT_CD ELSE '%' + @CLNT_ENGMT_CD +'%' END	
	AND		ISNULL(B.CLNT_ENGMT_NM,'') LIKE CASE WHEN @CLNT_ENGMT_NM = '' THEN	B.CLNT_ENGMT_NM ELSE '%' + @CLNT_ENGMT_NM + '%' END	
	AND		ISNULL(D.SECUR_SRVC_NM,'') LIKE CASE WHEN @SECUR_SRVC_NM = '' THEN	D.SECUR_SRVC_NM ELSE '%' + @SECUR_SRVC_NM + '%' END
	AND		CONVERT(VARCHAR(20),A.SRVC_EST_STRT_DT,101)	 = CASE WHEN @STRT_DT  = '' THEN CONVERT(VARCHAR(20),A.SRVC_EST_STRT_DT,101)  ELSE @STRT_DT END
	AND		CONVERT(VARCHAR(20),A.SRVC_EST_END_DT,101)	 = CASE WHEN @END_DT  = ''  THEN CONVERT(VARCHAR(20),A.SRVC_EST_END_DT,101)  ELSE @END_DT END
	AND		CONVERT(VARCHAR(20),ISNULL(A.UPDT_DT,''),101)	 = CASE WHEN @UPDT_DT  = '' THEN CONVERT(VARCHAR(20),ISNULL(A.UPDT_DT,''),101)  ELSE  @UPDT_DT END
	AND		ISNULL(I.LKP_ENTY_NM ,'') =  CASE WHEN @Status = '' THEN	I.LKP_ENTY_NM  ELSE @Status END		
	AND		A.ROW_STS_KEY	= 1) B
	
	ORDER BY CASE WHEN ISNULL(UPDT_DT,'') ='' THEN CREAT_DT ELSE UPDT_DT END  DESC
	
	
END
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_GetRiskByCvssScore]...';


GO



CREATE PROCEDURE [dbo].[Analyst_GetRiskByCvssScore]
(
	
	@BaseScore				DECIMAL(10,2),	
	@ExpltScore				DECIMAL(10,2),
	@ImpScore				DECIMAL(10,2)	
	
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
		
		
		SELECT  TOP 1 VULN_SEV_CD,VULN_SEV_NM 
		FROM VULN_SEV 
		WHERE @BaseScore >= OVALL_SCOR_MIN 
		ORDER BY OVALL_SCOR_MIN DESC
		
		

		SELECT TOP 1 RISK_PRBL_CD,RISK_PRBL_NM 
		FROM   RISK_PRBL
		WHERE  @ExpltScore >= CVSS_EXPLT_SCOR_MIN 
		ORDER BY CVSS_EXPLT_SCOR_MIN DESC
		

		SELECT TOP 1 VULN_IMP_CD,VULN_IMP_NM 
		FROM   VULN_IMP
		WHERE  @ImpScore >= CVSS_IMP_SCOR_MIN 
		ORDER BY CVSS_IMP_SCOR_MIN DESC
			        
				   

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_GetVulnerabilityDetailsByID]...';


GO
CREATE PROCEDURE [dbo].[Analyst_GetVulnerabilityDetailsByID]
(
	@CLNT_VULN_INSTC_KEY INTEGER,
	@schema				 VARCHAR(50)
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(max)

			SET		@Query = 'SELECT  A.CLNT_VULN_INSTC_KEY,A.VULN_NM,A.VULN_SRC_KEY,B.LKP_ENTY_DESC VULN_SRC,A.VULN_SEV_CD,C.VULN_SEV_NM,A.IPADR,
					D.VULN_INSTC_STS_CD,D.VULN_INSTC_STS_NM,A.SRC_VULN_SCAN_ID,CONVERT(VARCHAR,A.SRC_VULN_SCAN_STRT_DT,101)STRT_DT,
					CONVERT(VARCHAR,A.SRC_VULN_SCAN_END_DT,101)END_DT,A.SFTW_NM,A.HST_NM,A.DOM_NM,A.APPL_URL,E.OS_NM,A.NETBIOS_NM,
					A.MAC_ADR_NM,A.PORT_NBR
			FROM	'+ @schema+'.CLNT_VULN_INSTC A
			JOIN	MSTR_LKP					 B
			ON		A.VULN_SRC_KEY			=	 B.MSTR_LKP_KEY
			JOIN	VULN_SEV					 C
			ON		C.VULN_SEV_CD			=    A.VULN_SEV_CD
			JOIN	VULN_INSTC_STS				 D
			ON		D.VULN_INSTC_STS_CD		=    A.VULN_INSTC_STS_CD
			JOIN	OS							 E
			ON		A.OS_KEY		=			 E.OS_KEY
			WHERE	A.ROW_STS_KEY			=    1
			AND		A.CLNT_VULN_INSTC_KEY	=    '+CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY)
			EXECUTE (@Query)
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_GetVulnerabilityInfoByID]...';


GO
CREATE PROCEDURE [dbo].[Analyst_GetVulnerabilityInfoByID]
(
	@CLNT_VULN_INSTC_KEY INTEGER,
	@schema				 VARCHAR(50)
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON

DECLARE @Query VARCHAR(max)

			SET		@Query ='SELECT CLNT_VULN_INSTC_KEY,VULN_NM,CONVERT(VARCHAR,CREAT_DT,101)CREAT_DT,VULN_DESC,VULN_TECH_COMMT_TXT,
					VULN_IMP_COMMT_TXT,RECOM_COMMT_TXT,ROOT_CAUS_COMMT_TXT,VULN_CATGY_CD,
					VULN_INSTC_STS_CD,VULN_INSTC_STS_NM,CVE_ID,CVE_DESC,LST_MOD_DT,CWE_ID,
					VULN_BAS_SCOR,VULN_TMPRL_SCOR,VULN_ENV_SCOR,VULN_VCTR_TXT,
					VULN_SEV_NM,RISK_PRBL_NM,VULN_IMP_NM,RMDTN_CST_EFFRT_NM,SECUR_CTL_FAM_NM,SECUR_OBJ_NM,SECUR_CTL_NM,
					OWASP_TOP_10_KEY,OWASP_CD,OWASP_NM 
			FROM	'+ @schema+'.Findings
			WHERE	CLNT_VULN_INSTC_KEY	=   '+CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY)
			EXECUTE (@Query)

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_GetVulnerabilityInstcBycd]...';


GO


CREATE PROCEDURE [dbo].[Analyst_GetVulnerabilityInstcBycd]
(
	
	@VULN_INSTC_STS_CD	 VARCHAR(3)
	
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
		
		SELECT VULN_INSTC_STS_CD,VULN_INSTC_STS_NM
	    FROM VULN_INSTC_STS
		WHERE VULN_INSTC_STS_CD = @VULN_INSTC_STS_CD
			       


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_INS_CLNT_VULN_INSTC]...';


GO
CREATE PROCEDURE [dbo].[Analyst_INS_CLNT_VULN_INSTC]
(
       @ROW_STS_KEY               INTEGER,
       @ORG_KEY                          INTEGER,
       @CLNT_ENGMT_CD                    VARCHAR(30),  
       @SECUR_SRVC_CD                    VARCHAR(10),
       @VULN_SRC_KEY              INTEGER,
       @VULN_INSTC_STS_CD         VARCHAR(3),
       @VULN_SEV_CD               VARCHAR(3),
       @VULN_IMP_CD               VARCHAR(3),
       @RISK_PRBL_CD              VARCHAR(3),
       @RMDTN_CST_EFFRT_CD        VARCHAR(3) = NULL,
       @VULN_CATGY_CD		      VARCHAR(10),
       @CVE_ID                                  VARCHAR(25),
       @SRC_VULN_INSTC_ID         VARCHAR(150),
       @VULN_NM                          VARCHAR(255),
       @VULN_DESC                        TEXT,
       @IPADR                            VARCHAR(39),
       @PORT_NBR                         INTEGER,
       @SRC_ADVS_TXT              VARCHAR(1024),
       @VULN_BAS_SCOR                    DECIMAL(10,2),
       @VULN_IMP_SUB_SCOR         DECIMAL(10,2),
       @VULN_EXPLT_SUB_SCOR DECIMAL(10,2),
       @VULN_TMPRL_SCOR           DECIMAL(10,2),
       @VULN_ENV_SCOR                    DECIMAL(10,2),
       @VULN_VCTR_TXT                    VARCHAR(100),
       @NTWK_NM                          VARCHAR(150),
       @PRTCL_NM                         VARCHAR(255),
       @HST_NM                                  VARCHAR(150),
       @DOM_NM                                  VARCHAR(150),
       @SFTW_NM                          VARCHAR(150),
       @OS_KEY                                  INTEGER,
       @APPL_URL                         NVARCHAR(2000),
       @NETBIOS_NM                       VARCHAR(150),
       @MAC_ADR_NM                       VARCHAR(150),
       @VULN_TECH_COMMT_TXT TEXT,
       @VULN_IMP_COMMT_TXT        TEXT,
       @RECOM_COMMT_TXT           TEXT,
       @ROOT_CAUS_COMMT_TXT    TEXT,
       @USER_ID                          INTEGER,
       @VULN_OVALL_SCOR           DECIMAL(10,2),
       @OWASP_TOP_10_KEY          INTEGER,
       @schema                                  VARCHAR(50)

)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
DECLARE @Query nVARCHAR(max)
DECLARE @id INTEGER


SET          @Query = 'INSERT '+ @schema+'.CLNT_VULN_INSTC (ROW_STS_KEY,ORG_KEY, CLNT_ENGMT_CD, SECUR_SRVC_CD,VULN_SRC_KEY,VULN_INSTC_STS_CD,VULN_SEV_CD,VULN_IMP_CD,
RISK_PRBL_CD,RMDTN_CST_EFFRT_CD, VULN_CATGY_CD,CVE_ID,SRC_VULN_INSTC_ID,
VULN_NM,VULN_DESC,VULN_CREAT_DT,IPADR,PORT_NBR,SRC_ADVS_TXT,VULN_BAS_SCOR,VULN_IMP_SUB_SCOR,VULN_EXPLT_SUB_SCOR,
VULN_TMPRL_SCOR,VULN_ENV_SCOR,VULN_VCTR_TXT,NTWK_NM,PRTCL_NM,HST_NM,DOM_NM,SFTW_NM,OS_KEY,APPL_URL,NETBIOS_NM,
MAC_ADR_NM,VULN_TECH_COMMT_TXT,VULN_IMP_COMMT_TXT,RECOM_COMMT_TXT,ROOT_CAUS_COMMT_TXT,
CREAT_DT,CREAT_USER_ID,VULN_OVALL_SCOR,OWASP_TOP_10_KEY) VALUES

('+CONVERT(VARCHAR, @ROW_STS_KEY)+',
'+CONVERT(VARCHAR,@ORG_KEY)+',
'''+CONVERT(VARCHAR,@CLNT_ENGMT_CD)+''',
''' +CONVERT(VARCHAR,@SECUR_SRVC_CD)+''',
'+CONVERT(VARCHAR,@VULN_SRC_KEY)+',
''' +CONVERT(VARCHAR,@VULN_INSTC_STS_CD)+''',
  '+ isnull('''' + convert(varchar(3),@VULN_SEV_CD) + '''','null') + ',
  '+ isnull('''' + convert(varchar(3),@VULN_IMP_CD) + '''','null') + ',
  '+ isnull('''' + convert(varchar(3),@RISK_PRBL_CD) + '''','null') + ',
  '+ isnull('''' + convert(varchar(3),@RMDTN_CST_EFFRT_CD) + '''','null') + ',
  '+ isnull('''' + convert(varchar(10),@VULN_CATGY_CD) + '''','null') + ',
  '+ isnull('''' + convert(varchar(25),@CVE_ID) + '''','null') + ',
  '+ isnull('''' + convert(varchar(150),@SRC_VULN_INSTC_ID) + '''','null') + ',
  '+ isnull('''' + convert(varchar(255),@VULN_NM) + '''','null') + ',
  '+ isnull('''' + convert(varchar(max),@VULN_DESC) + '''','null') + ',
'+'GETDATE()'+',
  '+ isnull('''' + convert(varchar(39),@IPADR) + '''','null') + ',
  '+ isnull('''' + convert(varchar,@PORT_NBR) + '''','null') + ',
  '+ isnull('''' + convert(varchar(1024),@SRC_ADVS_TXT) + '''','null') + ',
  '+ isnull('''' + convert(varchar,@VULN_BAS_SCOR) + '''','null') + ',
  '+ isnull('''' + convert(varchar,@VULN_IMP_SUB_SCOR) + '''','null') + ',
  '+ isnull('''' + convert(varchar,@VULN_EXPLT_SUB_SCOR) + '''','null') + ',
  '+ isnull('''' + convert(varchar,@VULN_TMPRL_SCOR) + '''','null') + ',
  '+ isnull('''' + convert(varchar,@VULN_ENV_SCOR) + '''','null') + ',
  '+ isnull('''' + convert(varchar(100),@VULN_VCTR_TXT) + '''','null') + ',
  '+ isnull('''' + convert(varchar(150),@NTWK_NM) + '''','null') + ',
  '+ isnull('''' + convert(varchar(255),@PRTCL_NM) + '''','null') + ',
  '+ isnull('''' + convert(varchar(150),@HST_NM) + '''','null') + ',
  '+ isnull('''' + convert(varchar(150),@DOM_NM) + '''','null') + ',
  '+ isnull('''' + convert(varchar(150),@SFTW_NM) + '''','null') + ',
  '+ isnull('''' + convert(varchar,@OS_KEY) + '''','null') + ',
  '+ isnull('''' + convert(varchar(2000),@APPL_URL) + '''','null') + ',
  '+ isnull('''' + convert(varchar(150),@NETBIOS_NM) + '''','null') + ',
  '+ isnull('''' + convert(varchar(150),@MAC_ADR_NM) + '''','null') + ',
  '+ isnull('''' + convert(varchar(max),@VULN_TECH_COMMT_TXT) + '''','null') + ',
  '+ isnull('''' + convert(varchar(max),@VULN_IMP_COMMT_TXT) + '''','null') + ',
  '+ isnull('''' + convert(varchar(max),@RECOM_COMMT_TXT) + '''','null') + ',
  '+ isnull('''' + convert(varchar(max),@ROOT_CAUS_COMMT_TXT) + '''','null') + ',
' + 'GETDATE()'+',
'+CONVERT(VARCHAR,@USER_ID)+',
  '+ isnull('''' + convert(varchar,@VULN_OVALL_SCOR) + '''','null') + ',
  '+ isnull('''' + convert(varchar,@OWASP_TOP_10_KEY) + '''','null') + ') ; SELECT @@IDENTITY' 

--  PRINT @Query
--  PRINT @id
--  EXECUTE sp_executesql @Query, N'@Id INTEGER OUTPUT', @NewId OUTPUT
  -- SELECT @Result = @id
  DECLARE @Result AS Table (RetValue int)
  INSERT INTO @Result EXECUTE (@Query)
  SELECT RetValue FROM @Result
--  SELECT @id AS RETVAL
END TRY
                                  

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_INSClientVulnerabiltysecctrl]...';


GO
CREATE PROCEDURE [dbo].[Analyst_INSClientVulnerabiltysecctrl]
(
       @CLNT_VULN_INSTC_KEY       INTEGER,
       @SECUR_CTL_CD              VARCHAR(20),
       @USER_ID                   INTEGER,
       @REG_CMPLN_CD              VARCHAR(20),
       @REG_CMPLN_VER             VARCHAR(20),
       @ROW_STS_KEY               INTEGER,
       @Flag                      VARCHAR(1),    
       @schema                    VARCHAR(50)       

)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(max)

       IF @Flag = 'D'
       BEGIN
              
        SET   @Query = 'DELETE FROM '+ @schema+'.CLNT_VULN_SECUR_CTL
                                    WHERE CLNT_VULN_INSTC_KEY  ='+CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY)

              EXECUTE (@Query)
              SELECT @@ROWCOUNT AS RETVALS
                     
       END

       IF @Flag = 'I'
       BEGIN
        SET   @Query = 'INSERT '+ @schema+'.CLNT_VULN_SECUR_CTL(CLNT_VULN_INSTC_KEY,REG_CMPLN_CD,REG_CMPLN_VER,SECUR_CTL_CD,CREAT_DT,
                                    CREAT_USER_ID,ROW_STS_KEY) VALUES
                                  ( '+CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY)+','+CONVERT(VARCHAR,+''''+@REG_CMPLN_CD)+''''+','+CONVERT(VARCHAR,+''''+@REG_CMPLN_VER)+''''+','+
                                  CONVERT(VARCHAR,+''''+@SECUR_CTL_CD)+''''+','+'GETDATE()'+','+CONVERT(VARCHAR,@USER_ID)+','+CONVERT(VARCHAR,@ROW_STS_KEY)+')'

                                                --  PRINT @Query
                                    EXECUTE (@Query)    
              SELECT @@ROWCOUNT AS RETVAL
                       
       END


       IF @Flag = 'U'
       BEGIN
              
               SET   @Query = 'UPDATE  '+ @schema+'.CLNT_VULN_SECUR_CTL
               SET     ROW_STS_KEY         =      '+ CONVERT(VARCHAR,@ROW_STS_KEY) +',
                       UPDT_USER_ID        =      '+ CONVERT(VARCHAR,@USER_ID) +',
                       UPDT_DT             =      '+'GETDATE()'+'
               WHERE   CLNT_VULN_INSTC_KEY =      '+ CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY) +'
               AND      SECUR_CTL_CD        =     '''+ CONVERT(VARCHAR,@SECUR_CTL_CD) +''''
              
                        EXECUTE (@Query)
               SELECT @@ROWCOUNT AS RETVALS
       END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_ListCntrlByFamilyID]...';


GO

CREATE PROCEDURE [dbo].[Analyst_ListCntrlByFamilyID]
(
	@SECUR_CTL_FAM_CD	VARCHAR(50)
)

AS
BEGIN


BEGIN TRY
SET NOCOUNT ON

			SELECT   SECUR_OBJ_NM,SECUR_CTL_NM,SECUR_CTL_DESC
			FROM	 SECUR_CTL			
			WHERE	 SECUR_CTL_FAM_CD	= @SECUR_CTL_FAM_CD
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_ListCostEffort]...';


GO

CREATE PROCEDURE [dbo].[Analyst_ListCostEffort]

AS
BEGIN


BEGIN TRY
SET NOCOUNT ON

			SELECT   RMDTN_CST_EFFRT_CD,RMDTN_CST_EFFRT_NM
			FROM	 RMDTN_CST_EFFRT		
			ORDER BY RMDTN_CST_EFFRT_ORDR_NBR
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_ListCve]...';


GO
CREATE PROCEDURE [dbo].[Analyst_ListCve]
(
       
       @CVE_DESC                    VARCHAR(500),
       @PageNo                      INTEGER,
       @RowspPage					INTEGER,
       @CVE_ID                      VARCHAR(25),
       @Flag                        VARCHAR(1)
)
AS
BEGIN

DECLARE @Count INTEGER

BEGIN TRY
SET NOCOUNT ON

                BEGIN TRAN

                IF @Flag = 'N'
                BEGIN
                     SELECT   COUNT(CVE_ID) TotalCount 
                     FROM   CVE                                     
                     WHERE  ISNULL(CVE_DESC,'') LIKE CASE WHEN @CVE_DESC = '' THEN       ISNULL(CVE_DESC,'') ELSE '%' + @CVE_DESC +'%' END
                     AND     ISNULL(CVE_ID,'') LIKE CASE WHEN @CVE_ID = '' THEN       ISNULL(CVE_ID,'') ELSE   '%' + @CVE_ID +'%'  END
                     ;

                     SELECT   CVE_ID      ,CVE_DESC,PUBL_DT,LST_MOD_DT      
                     FROM   CVE                                     
                     WHERE  ISNULL(CVE_DESC,'') LIKE CASE WHEN @CVE_DESC = '' THEN       ISNULL(CVE_DESC,'') ELSE '%' + @CVE_DESC +'%' END
                     AND     ISNULL(CVE_ID,'') LIKE CASE WHEN @CVE_ID = '' THEN       ISNULL(CVE_ID,'') ELSE   '%' + @CVE_ID +'%'  END
                     ORDER BY  CVE_ID ASC
                     OFFSET ((@PageNo - 1) * @RowspPage) ROWS
                     FETCH NEXT @RowspPage ROWS ONLY;
              END

              IF @Flag = 'A'
              BEGIN
                     SELECT   COUNT(CVE_ID) TotalCount 
                     FROM   CVE                                     
                     WHERE  ISNULL(CVE_DESC,'') LIKE CASE WHEN @CVE_DESC = '' THEN       ISNULL(CVE_DESC,'') ELSE '%' + @CVE_DESC +'%' END
                     AND     ISNULL(CVE_ID,'') LIKE CASE WHEN @CVE_ID = '' THEN       ISNULL(CVE_ID,'') ELSE   '%' + @CVE_ID +'%'  END
                     ;

                     SELECT   CVE_ID      ,CVE_DESC,PUBL_DT,LST_MOD_DT      
                     FROM   CVE                                     
                     WHERE  ISNULL(CVE_DESC,'') LIKE CASE WHEN @CVE_DESC = '' THEN       ISNULL(CVE_DESC,'') ELSE '%' + @CVE_DESC +'%' END
                    AND     ISNULL(CVE_ID,'') LIKE CASE WHEN @CVE_ID = '' THEN       ISNULL(CVE_ID,'') ELSE   '%' + @CVE_ID +'%'  END
                     ORDER BY  PUBL_DT ASC
                     OFFSET ((@PageNo - 1) * @RowspPage) ROWS
                     FETCH NEXT @RowspPage ROWS ONLY;
              END 

              IF @Flag = 'D'
              BEGIN
                     SELECT   COUNT(CVE_ID) TotalCount 
                     FROM   CVE                                     
                     WHERE  ISNULL(CVE_DESC,'') LIKE CASE WHEN @CVE_DESC = '' THEN       ISNULL(CVE_DESC,'') ELSE '%' + @CVE_DESC +'%' END
                     AND     ISNULL(CVE_ID,'') LIKE CASE WHEN @CVE_ID = '' THEN       ISNULL(CVE_ID,'') ELSE   '%' + @CVE_ID +'%'  END
                     ;

                     SELECT   CVE_ID      ,CVE_DESC,PUBL_DT,LST_MOD_DT      
                     FROM   CVE                                     
                     WHERE  ISNULL(CVE_DESC,'') LIKE CASE WHEN @CVE_DESC = '' THEN       ISNULL(CVE_DESC,'') ELSE '%' + @CVE_DESC +'%' END
                    AND     ISNULL(CVE_ID,'') LIKE CASE WHEN @CVE_ID = '' THEN       ISNULL(CVE_ID,'') ELSE   '%' + @CVE_ID +'%'  END
                     ORDER BY  PUBL_DT DESC
                     OFFSET ((@PageNo - 1) * @RowspPage) ROWS
                     FETCH NEXT @RowspPage ROWS ONLY;
              END 
               
              COMMIT TRAN
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_ListFamilyCntrl]...';


GO

CREATE PROCEDURE [dbo].[Analyst_ListFamilyCntrl]

AS
BEGIN


BEGIN TRY
SET NOCOUNT ON

			SELECT  REG_CMPLN_CD, REG_CMPLN_VER,SECUR_CTL_FAM_CD,SECUR_CTL_FAM_NM,SECUR_OBJ_CD,SECUR_OBJ_NM,SECUR_CTL_NM,
			SECUR_CTL_DESC,SECUR_CTL_CD
			FROM	SECUR_CTL		
			WHERE	REG_CMPLN_CD= 'HITRUST'	
		  
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_ListManualVulnerabilities]...';


GO
CREATE PROCEDURE [dbo].[Analyst_ListManualVulnerabilities]
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON

			SELECT  DISTINCT VULN_NM
			FROM	CLNT_VULN_INSTC				
			WHERE	ROW_STS_KEY			=   1
			AND		VULN_SRC_KEY		=   35

END TRY
BEGIN CATCH
    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_ListOS]...';


GO
CREATE PROCEDURE [dbo].[Analyst_ListOS]

AS
BEGIN


BEGIN TRY
SET NOCOUNT ON

			SELECT   [OS_KEY],[OS_NM]
			FROM	 OS		
			WHERE	 ISNULL(OS_NM,'')<>''
			ORDER BY [OS_KEY]
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_ListServicesByEngmt]...';


GO

CREATE PROCEDURE [dbo].[Analyst_ListServicesByEngmt]
(
	@ENGMT_CD VARCHAR(30)
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON

			SELECT  B.SECUR_SRVC_CD,SECUR_SRVC_NM,D.LKP_ENTY_NM ReviewStatus,
					A.CREAT_USER_ID,ISNULL(C.FST_NM+' '+C.LST_NM,'') UserName,A.UPDT_DT
			FROM	CLNT_SECUR_SRVC_ENGMT		A
			JOIN	SECUR_SRVC					B
			ON		A.SECUR_SRVC_CD			=   B.SECUR_SRVC_CD
			JOIN	USER_PRFL					C
			ON		A.CREAT_USER_ID			=   C.USER_ID
			JOIN	MSTR_LKP					D
			ON		A.SRVC_ENGMT_STS_KEY	=	D.MSTR_LKP_KEY
			WHERE	A.CLNT_ENGMT_CD			=	@ENGMT_CD
			AND		A.ROW_STS_KEY			=   1
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_ListSeverity]...';


GO
CREATE PROCEDURE [dbo].[Analyst_ListSeverity]
(
	@CLNT_ENGMT_CD	VARCHAR(30),
	@SchemaName		VARCHAR(50)
)

AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(MAX)

			SET @Query='
			IF ''' +@CLNT_ENGMT_CD+ ''' = ''''
			BEGIN

			SELECT  DISTINCT VULN_SEV_CD,VULN_SEV_NM,VULN_SEV_ORDR_NBR
			FROM	VULN_SEV
			WHERE	VULN_SEV_CD NOT IN(''I'')	
			ORDER BY VULN_SEV_ORDR_NBR DESC
			END	
			ELSE
			BEGIN
			SELECT  DISTINCT A.VULN_SEV_CD,A.VULN_SEV_NM,VULN_SEV_ORDR_NBR
			FROM	VULN_SEV A
			JOIN	'+ @SchemaName+ '.CLNT_VULN_INSTC B
			ON		A.VULN_SEV_CD	= B.VULN_SEV_CD
			WHERE	A.VULN_SEV_CD NOT IN(''I'')
			AND 	B.CLNT_ENGMT_CD	= '''+@CLNT_ENGMT_CD+'''
			AND     B.VULN_INSTC_STS_CD NOT IN(''D'',''FP'')
            AND     B.ROW_STS_KEY   =   1
			ORDER BY A.VULN_SEV_ORDR_NBR DESC	
			END '
			 -- PRINT (@query)
  EXECUTE(@Query)
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_ListSource]...';


GO
CREATE PROCEDURE [dbo].[Analyst_ListSource]

AS
BEGIN


BEGIN TRY
SET NOCOUNT ON

			SELECT  MSTR_LKP_KEY,LKP_ENTY_NM
			FROM	MSTR_LKP	
			WHERE	LKP_ENTY_TYP_NM = 'Source'
			ORDER BY MSTR_LKP_KEY ASC	
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_ListStatus]...';


GO

CREATE PROCEDURE [dbo].[Analyst_ListStatus]

AS
BEGIN


BEGIN TRY
SET NOCOUNT ON

			SELECT  VULN_INSTC_STS_CD,VULN_INSTC_STS_NM
			FROM	VULN_INSTC_STS		
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_ListVULNCATGY]...';


GO
CREATE PROCEDURE [dbo].[Analyst_ListVULNCATGY]
(
       @CLNT_ENGMT_CD VARCHAR(30),
       @SchemaName          VARCHAR(20)

)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(MAX)

                     SET @Query='
                     IF ''' +@CLNT_ENGMT_CD+ ''' = ''''
                     BEGIN

                     SELECT  DISTINCT VULN_CATGY_CD,VULN_CATGY_NM,VULN_CATGY_DESC
                     FROM   VULN_CATGY      
                     ORDER  BY     VULN_CATGY_NM 
                     END    
                     ELSE
                     BEGIN
                     SELECT  DISTINCT A.VULN_CATGY_CD,A.VULN_CATGY_NM,A.VULN_CATGY_DESC
                     FROM   VULN_CATGY      A
                     JOIN   '+ @SchemaName+ '.CLNT_VULN_INSTC B
                     ON      A.VULN_CATGY_CD = B.VULN_CATGY_CD
                     WHERE   B.CLNT_ENGMT_CD                   = '''+@CLNT_ENGMT_CD+ '''
                     AND     B.VULN_SEV_CD NOT IN(''I'') 
                     AND     B.VULN_INSTC_STS_CD NOT IN(''D'',''FP'')
					 AND     B.ROW_STS_KEY   =   1
                     ORDER  BY     A.VULN_CATGY_NM 


                     END'

                   --   PRINT (@query)
   EXECUTE(@Query)
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_ListVulnerability]...';


GO
CREATE PROCEDURE [dbo].[Analyst_ListVulnerability]
(
       
       @CLNT_ENGMT_CD             VARCHAR(30),
       @PageNo                    INTEGER,
       @RowspPage                          INTEGER,
       @CLNT_VULN_INSTC_KEY         INTEGER,
       @VULN_NM                   VARCHAR(255),
       @SECUR_SRVC_CD             VARCHAR(10),
       @VULN_SRC                  INTEGER,
       @IPADR                              VARCHAR(39),
       @VULN_SEV_CD                        VARCHAR(3),
       @STSKEY                    VARCHAR(3),
       @SFTW_NM                   VARCHAR(150),
          @schema                                 VARCHAR(50)  
)
AS
BEGIN

DECLARE @Count INTEGER

BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(max)
DECLARE @Query1 VARCHAR(max)
DECLARE @Query2 VARCHAR(max)

                BEGIN TRAN

                     SET   @Query = 'SELECT              COUNT(A.CLNT_ENGMT_CD) TotalCount
                     FROM            '+ @schema+'.CLNT_VULN_INSTC   A             
                     WHERE           A.ROW_STS_KEY              =   1
                     AND           A.CLNT_ENGMT_CD                   =   ''' + CONVERT(VARCHAR,@CLNT_ENGMT_CD) +'''
                     AND           CLNT_VULN_INSTC_KEY =                   CASE WHEN ''' + CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY) +'''= 0  THEN       CLNT_VULN_INSTC_KEY ELSE  ''' + CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY) +'''  END
                     AND           ISNULL(A.VULN_NM,'''') LIKE             CASE WHEN ''' + CONVERT(VARCHAR,@VULN_NM) +'''= ''''               THEN       ISNULL(A.VULN_NM,'''') ELSE ''' + '%' + CONVERT(VARCHAR,@VULN_NM) +'%' +''' END      
                     AND           ISNULL(A.SECUR_SRVC_CD,'''') =          CASE WHEN ''' + CONVERT(VARCHAR,@SECUR_SRVC_CD) +''' = ''''    THEN       ISNULL(A.SECUR_SRVC_CD,'''') ELSE ''' + CONVERT(VARCHAR,@SECUR_SRVC_CD) +'''  END   
                     AND           ISNULL(A.VULN_SRC_KEY,0)   =            CASE WHEN ''' + CONVERT(VARCHAR,@VULN_SRC) +'''= 0                 THEN       ISNULL(A.VULN_SRC_KEY,0) ELSE ''' + CONVERT(VARCHAR,@VULN_SRC) +''' END     
                     AND           ISNULL(A.IPADR,'''') LIKE               CASE WHEN ''' + CONVERT(VARCHAR,@IPADR) +''' = ''''                THEN       ISNULL(A.IPADR,'''') ELSE ''' + '%' + CONVERT(VARCHAR,@IPADR) +'%' +''' END
                     AND           ISNULL(A.VULN_SEV_CD,'''') =            CASE WHEN ''' + CONVERT(VARCHAR,@VULN_SEV_CD) +''' = ''''          THEN       ISNULL(A.VULN_SEV_CD,'''') ELSE ''' + CONVERT(VARCHAR,@VULN_SEV_CD) +'''  END
                     AND           ISNULL(A.VULN_INSTC_STS_CD,'''') = CASE WHEN ''' + CONVERT(VARCHAR,@STSKEY) +'''= ''''                THEN       ISNULL(A.VULN_INSTC_STS_CD,'''') ELSE ''' + CONVERT(VARCHAR,@STSKEY) +'''  END
                     AND           ISNULL(A.SFTW_NM,'''') LIKE             CASE WHEN ''' + CONVERT(VARCHAR,@SFTW_NM) +'''= ''''               THEN       ISNULL(A.SFTW_NM,'''') ELSE ''' + '%' + CONVERT(VARCHAR,@SFTW_NM) +'%' +''' END

                     GROUP BY A.CLNT_ENGMT_CD'
                           
                                  -- print @Query
                                    EXECUTE (@Query)

					 SET   @Query2 = 'SELECT              COUNT(A.CLNT_VULN_INSTC_KEY) OpenCount
                     FROM            '+ @schema+'.CLNT_VULN_INSTC   A             
                     WHERE           A.ROW_STS_KEY              =   1
                     AND           A.CLNT_ENGMT_CD                   =   ''' + CONVERT(VARCHAR,@CLNT_ENGMT_CD) +'''
                     AND           CLNT_VULN_INSTC_KEY =                   CASE WHEN ''' + CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY) +'''= 0  THEN       CLNT_VULN_INSTC_KEY ELSE  ''' + CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY) +'''  END
                     AND           ISNULL(A.VULN_NM,'''') LIKE             CASE WHEN ''' + CONVERT(VARCHAR,@VULN_NM) +'''= ''''               THEN       ISNULL(A.VULN_NM,'''') ELSE ''' + '%' + CONVERT(VARCHAR,@VULN_NM) +'%' +''' END      
                     AND           ISNULL(A.SECUR_SRVC_CD,'''') =          CASE WHEN ''' + CONVERT(VARCHAR,@SECUR_SRVC_CD) +''' = ''''    THEN       ISNULL(A.SECUR_SRVC_CD,'''') ELSE ''' + CONVERT(VARCHAR,@SECUR_SRVC_CD) +'''  END   
                     AND           ISNULL(A.VULN_SRC_KEY,0)   =            CASE WHEN ''' + CONVERT(VARCHAR,@VULN_SRC) +'''= 0                 THEN       ISNULL(A.VULN_SRC_KEY,0) ELSE ''' + CONVERT(VARCHAR,@VULN_SRC) +''' END     
                     AND           ISNULL(A.IPADR,'''') LIKE               CASE WHEN ''' + CONVERT(VARCHAR,@IPADR) +''' = ''''                THEN       ISNULL(A.IPADR,'''') ELSE ''' + '%' + CONVERT(VARCHAR,@IPADR) +'%' +''' END
                     AND           ISNULL(A.VULN_SEV_CD,'''') =            CASE WHEN ''' + CONVERT(VARCHAR,@VULN_SEV_CD) +''' = ''''          THEN       ISNULL(A.VULN_SEV_CD,'''') ELSE ''' + CONVERT(VARCHAR,@VULN_SEV_CD) +'''  END
                     AND           ISNULL(A.VULN_INSTC_STS_CD,'''') = CASE WHEN ''' + CONVERT(VARCHAR,@STSKEY) +'''= ''''                THEN       ISNULL(A.VULN_INSTC_STS_CD,'''') ELSE ''' + CONVERT(VARCHAR,@STSKEY) +'''  END
                     AND           ISNULL(A.SFTW_NM,'''') LIKE             CASE WHEN ''' + CONVERT(VARCHAR,@SFTW_NM) +'''= ''''               THEN       ISNULL(A.SFTW_NM,'''') ELSE ''' + '%' + CONVERT(VARCHAR,@SFTW_NM) +'%' +''' END
					 AND		   A.VULN_INSTC_STS_CD =''O''
                     GROUP BY A.CLNT_ENGMT_CD'
                           
                                  -- print @Query
                                    EXECUTE (@Query2)

                     SET   @Query1 = 'SELECT             CLNT_VULN_INSTC_KEY,A.VULN_NM,A.VULN_SRC_KEY,B.LKP_ENTY_NM VULN_SRC,A.VULN_SEV_CD,G.VULN_SEV_NM,A.IPADR,
                                   C.VULN_INSTC_STS_CD,C.VULN_INSTC_STS_NM,D.SECUR_SRVC_NM,A.SECUR_SRVC_CD,F.LKP_ENTY_NM [Service Status],
                                   A.CREAT_DT,A.UPDT_DT,A.SFTW_NM
                     FROM            '+ @schema+'.CLNT_VULN_INSTC             A
                     JOIN            MSTR_LKP                                 B
                     ON            A.VULN_SRC_KEY                    =      B.MSTR_LKP_KEY
                     JOIN            VULN_INSTC_STS                           C
                     ON            C.VULN_INSTC_STS_CD        =   A.VULN_INSTC_STS_CD
                     JOIN            SECUR_SRVC                               D
                     ON            D.SECUR_SRVC_CD                   =   A.SECUR_SRVC_CD
                     JOIN            CLNT_SECUR_SRVC_ENGMT             E
                     ON            E.SECUR_SRVC_CD                   =      A.SECUR_SRVC_CD      
                     JOIN            MSTR_LKP                                 F
                     ON            E.SRVC_ENGMT_STS_KEY =   F.MSTR_LKP_KEY
                     AND           A.CLNT_ENGMT_CD                   =   E.CLNT_ENGMT_CD
                     LEFT JOIN     VULN_SEV                          G
                     ON            G.VULN_SEV_CD              =   A.VULN_SEV_CD          
                     WHERE           A.ROW_STS_KEY              =   1
                     AND           A.CLNT_ENGMT_CD                   =   ''' + CONVERT(VARCHAR,@CLNT_ENGMT_CD) +'''
                     AND           CLNT_VULN_INSTC_KEY =                   CASE WHEN ''' + CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY) +'''= 0  THEN       CLNT_VULN_INSTC_KEY ELSE  ''' + CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY) +'''  END
                     AND           ISNULL(A.VULN_NM,'''') LIKE             CASE WHEN ''' + CONVERT(VARCHAR,@VULN_NM) +'''= ''''               THEN       ISNULL(A.VULN_NM,'''') ELSE ''' + '%' + CONVERT(VARCHAR,@VULN_NM) +'%' +''' END      
                     AND           ISNULL(A.SECUR_SRVC_CD,'''') =          CASE WHEN ''' + CONVERT(VARCHAR,@SECUR_SRVC_CD) +''' = ''''    THEN       ISNULL(A.SECUR_SRVC_CD,'''') ELSE ''' + CONVERT(VARCHAR,@SECUR_SRVC_CD) +'''  END   
                     AND           ISNULL(A.VULN_SRC_KEY,0)   =            CASE WHEN ''' + CONVERT(VARCHAR,@VULN_SRC) +'''= 0                 THEN       ISNULL(A.VULN_SRC_KEY,0) ELSE ''' + CONVERT(VARCHAR,@VULN_SRC) +''' END     
                     AND           ISNULL(A.IPADR,'''') LIKE               CASE WHEN ''' + CONVERT(VARCHAR,@IPADR) +''' = ''''                THEN       ISNULL(A.IPADR,'''') ELSE ''' + '%' + CONVERT(VARCHAR,@IPADR) +'%' +''' END
                     AND           ISNULL(A.VULN_SEV_CD,'''') =            CASE WHEN ''' + CONVERT(VARCHAR,@VULN_SEV_CD) +''' = ''''          THEN       ISNULL(A.VULN_SEV_CD,'''') ELSE ''' + CONVERT(VARCHAR,@VULN_SEV_CD) +'''  END
                     AND           ISNULL(A.VULN_INSTC_STS_CD,'''') = CASE WHEN ''' + CONVERT(VARCHAR,@STSKEY) +'''= ''''                THEN       ISNULL(A.VULN_INSTC_STS_CD,'''') ELSE ''' + CONVERT(VARCHAR,@STSKEY) +'''  END
                     AND           ISNULL(A.SFTW_NM,'''') LIKE             CASE WHEN ''' + CONVERT(VARCHAR,@SFTW_NM) +'''= ''''               THEN       ISNULL(A.SFTW_NM,'''') ELSE ''' + '%' + CONVERT(VARCHAR,@SFTW_NM) +'%' +''' END

                     ORDER BY   CLNT_VULN_INSTC_KEY ASC
                     OFFSET ((' +CONVERT(VARCHAR,@PageNo) +' - 1) * ' + CONVERT(VARCHAR,@RowspPage)+') ROWS
                     FETCH NEXT '+CONVERT(VARCHAR,@RowspPage)+' ROWS ONLY;'
               EXECUTE (@Query1)       
              
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_ListVulnerabilityDetails]...';


GO
CREATE PROCEDURE [dbo].[Analyst_ListVulnerabilityDetails]
(
	@CLNT_VULN_INSTC_KEY INTEGER,
	@schema				 VARCHAR(50) 
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(max)

		    SET	@Query = 'SELECT    *
			FROM	  '+ @schema+ '.Findings								 
    		WHERE CLNT_VULN_INSTC_KEY = '+ CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY)
		-- PRINT @query
			EXECUTE (@Query)

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_REGCMPLNBYCVEID]...';


GO

CREATE PROCEDURE [dbo].[Analyst_REGCMPLNBYCVEID]
(
       @CVEID VARCHAR(50)
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
              
              SELECT A.SECUR_CTL_MAP_KEY,A.PRI_REG_CMPLN_CD,A.PRI_REG_CMPLN_VER,A.PRI_SECUR_CTL_CD,
                     C.REG_CMPLN_NM,C.REG_CMPLN_CD,B.REG_CMPLN_CD,B.REG_CMPLN_VER
              FROM   SECUR_CTL_MAP         A
              JOIN   CVE_SECUR_CTL_MAP     B
              ON     A.PRI_SECUR_CTL_CD  = B.SECUR_CTL_CD
              JOIN   REG_CMPLN             C
              ON     A.PRI_REG_CMPLN_CD  = C.REG_CMPLN_CD
              WHERE  B.CVE_ID            = @CVEID
			  AND	 B.ROW_STS_KEY		 = 1
              UNION
              SELECT A.SECUR_CTL_MAP_KEY,A.SEC_REG_CMPLN_CD,A.SEC_REG_CMPLN_VER,A.SEC_SECUR_CTL_CD,
                     C.REG_CMPLN_NM,C.REG_CMPLN_CD,B.REG_CMPLN_CD,B.REG_CMPLN_VER
              FROM   SECUR_CTL_MAP         A
              JOIN   CVE_SECUR_CTL_MAP     B
              ON     A.SEC_SECUR_CTL_CD  = B.SECUR_CTL_CD
              JOIN   REG_CMPLN                    C
              ON     A.SEC_REG_CMPLN_CD  = C.REG_CMPLN_CD
              WHERE  B.CVE_ID            = @CVEID
			  AND	 B.ROW_STS_KEY		 = 1


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_UpdateRowstatusByVulKey]...';


GO
CREATE PROCEDURE [dbo].[Analyst_UpdateRowstatusByVulKey]
(
       @CLNT_VULN_INSTC_KEY INTEGER,
       @USER_ID                          INTEGER,
       @schema                           VARCHAR(50)
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(max)

              SET    @Query = 'DELETE FROM      '+ @schema+'.CLNT_VULN_SECUR_CTL
              WHERE  CLNT_VULN_INSTC_KEY  =      '+ CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY)

              EXECUTE (@Query)

              SET    @Query = 'UPDATE     '+ @schema+'.CLNT_VULN_INSTC
              SET           ROW_STS_KEY          =   2, 
                           UPDT_USER_ID    =   '+convert(varchar(50),@USER_ID)+ ',
                UPDT_DT         =   '+'GETDATE()'+'
              WHERE  CLNT_VULN_INSTC_KEY  =      '+ CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY)

              EXECUTE (@Query)
              SELECT @@ROWCOUNT AS RETVALS

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_UpdateServiceStatusByEngServCode]...';


GO

CREATE PROCEDURE [dbo].[Analyst_UpdateServiceStatusByEngServCode]
(
	
	@CLNT_ENGMT_CD			VARCHAR(30),
	@SECUR_SRVC_CD			VARCHAR(10),
	@UserID					INTEGER,
	@Status					INTEGER
		

)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON

		IF @Status = 46
	    BEGIN
		UPDATE	CLNT_SECUR_SRVC_ENGMT
		SET		SRVC_ENGMT_STS_KEY	 =  @Status,
				UPDT_DT				 =	GETDATE(),
				UPDT_USER_ID		 =	@UserID
				WHERE	CLNT_ENGMT_CD	=	@CLNT_ENGMT_CD
				AND     SECUR_SRVC_CD	=	@SECUR_SRVC_CD
				SELECT @@ROWCOUNT AS RETVAL
		END

		IF @Status = 45
		BEGIN
		UPDATE	CLNT_SECUR_SRVC_ENGMT
		SET		SRVC_ENGMT_STS_KEY	 =  @Status,
				--UPDT_DT				 =	NULL,
				UPDT_USER_ID		 =	@UserID
				WHERE	CLNT_ENGMT_CD	=	@CLNT_ENGMT_CD
				AND     SECUR_SRVC_CD	=	@SECUR_SRVC_CD
				SELECT @@ROWCOUNT AS RETVAL
		END



END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Analyst_UpdateVulnerabilityInstance]...';


GO
CREATE PROCEDURE [dbo].[Analyst_UpdateVulnerabilityInstance]
(
       @Flag                             VARCHAR(1),
       @SECUR_SRVC_CD                    VARCHAR(10),
       @IPADR                            VARCHAR(39),
       @SFTW_NM                          VARCHAR(150),
       @HST_NM                                  VARCHAR(150),
       @DOM_NM                                  VARCHAR(150),
       @APPL_URL                         NVARCHAR(2000),
       @OS_KEY                                  INTEGER,
       @MAC_ADR_NM                       VARCHAR(150),
       @PORT_NBR                         INTEGER,
       @CLNT_VULN_INSTC_KEY INTEGER,
       @VULN_INSTC_STS_CD         VARCHAR(3),
       @VULN_SEV_CD               VARCHAR(3),
       @VULN_IMP_CD               VARCHAR(3),
       @RISK_PRBL_CD              VARCHAR(3),
       @RMDTN_CST_EFFRT_CD        VARCHAR(3),
       @VULN_CATGY_CD        VARCHAR(10),
       @CVE_ID                                  VARCHAR(25),
       @VULN_NM                          VARCHAR(255),
       @VULN_DESC                        TEXT,
       @SRC_ADVS_TXT              VARCHAR(1024),
       @VULN_BAS_SCOR                    DECIMAL(10,2),
       @VULN_IMP_SUB_SCOR         DECIMAL(10,2),
       @VULN_EXPLT_SUB_SCOR              DECIMAL(10,2),
       @VULN_TMPRL_SCOR           DECIMAL(10,2),
       @VULN_ENV_SCOR                    DECIMAL(10,2),
       @VULN_VCTR_TXT                    VARCHAR(100),
       @VULN_TECH_COMMT_TXT              TEXT,
       @VULN_IMP_COMMT_TXT        TEXT,
       @RECOM_COMMT_TXT           TEXT,
       @ROOT_CAUS_COMMT_TXT    TEXT,
       @USER_ID                          INTEGER,
       @VULN_OVALL_SCOR           DECIMAL(10,2),
       @OWASP_TOP_10_KEY          INTEGER,
       @schema                                  VARCHAR(50)   

)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(max)
       
              IF @Flag      =      'E' -- ETL
                       
              BEGIN

              SET           @Query = 'UPDATE     '+ @schema+'.CLNT_VULN_INSTC
              
              SET           VULN_INSTC_STS_CD    =      ''' +CONVERT(VARCHAR,@VULN_INSTC_STS_CD)+''' ,
                           VULN_SEV_CD                =      '+ isnull('''' + convert(varchar(50),@VULN_SEV_CD) + '''','null') + ',
                           VULN_IMP_CD                =      '+ isnull('''' + convert(varchar(50),@VULN_IMP_CD) + '''','null') + ',
                           RISK_PRBL_CD         =      '+ isnull('''' + convert(varchar(50),@RISK_PRBL_CD) + '''','null') + ',
                           RMDTN_CST_EFFRT_CD   =      '+ isnull('''' + convert(varchar(50),@RMDTN_CST_EFFRT_CD) + '''','null') + ',
                           VULN_CATGY_CD   =      '+ isnull('''' + convert(varchar(50),@VULN_CATGY_CD) + '''','null') + ',
                           CVE_ID                     =      '+ isnull('''' + convert(varchar(25),@CVE_ID) + '''','null') + ',
                           VULN_NM                           =      '+ isnull('''' + convert(varchar(50),@VULN_NM) + '''','null') + ',
                           VULN_DESC                  =      '+ isnull('''' + convert(varchar(max),@VULN_DESC) + '''','null') + ',
                           SRC_ADVS_TXT         =      '+ isnull('''' + convert(varchar(max),@SRC_ADVS_TXT) + '''','null') + ',
                           VULN_BAS_SCOR        =      '+ isnull('''' + convert(varchar(50),@VULN_BAS_SCOR) + '''','null') + ',
                           VULN_IMP_SUB_SCOR    =      '+ isnull('''' + convert(varchar(50),@VULN_IMP_SUB_SCOR) + '''','null') + ',
                           VULN_EXPLT_SUB_SCOR =   '+ isnull('''' + convert(varchar(50),@VULN_EXPLT_SUB_SCOR) + '''','null') + ',
                           VULN_TMPRL_SCOR            =      '+ isnull('''' + convert(varchar(50),@VULN_TMPRL_SCOR) + '''','null') + ',
                           VULN_ENV_SCOR        =      '+ isnull('''' + convert(varchar(50),@VULN_ENV_SCOR) + '''','null') + ',
                           VULN_VCTR_TXT        =      '+ isnull('''' + convert(varchar(max),@VULN_VCTR_TXT) + '''','null') + ',
                           VULN_TECH_COMMT_TXT =   '+ isnull('''' + convert(varchar(max),@VULN_TECH_COMMT_TXT) + '''','null') + ',
                           VULN_IMP_COMMT_TXT   =      '+ isnull('''' + convert(varchar(max),@VULN_IMP_COMMT_TXT) + '''','null') + ',
                           RECOM_COMMT_TXT            =      '+ isnull('''' + convert(varchar(max),@RECOM_COMMT_TXT) + '''','null') + ',
                           ROOT_CAUS_COMMT_TXT =      '+ isnull('''' + convert(varchar(max),@ROOT_CAUS_COMMT_TXT) + '''','null') + ',   
                           UPDT_DT                           =      '+' GETDATE() '+',
                           UPDT_USER_ID         =      '+convert(varchar(50),@USER_ID)+ ',
                           VULN_OVALL_SCOR            =      '+ isnull('''' + convert(varchar(50),@VULN_OVALL_SCOR) + '''','null') + ',
                           OWASP_TOP_10_KEY     =      '+ isnull('''' + convert(varchar(50),@OWASP_TOP_10_KEY) + '''','null') + '

                           WHERE  CLNT_VULN_INSTC_KEY  =      '+ CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY) +''

                           EXECUTE (@Query)
                           SELECT @@ROWCOUNT AS RETVAL

                     END

              IF @Flag    =      'M' -- Manual Entry
                       
              BEGIN

              SET         @Query = 'UPDATE     '+ @schema+'.CLNT_VULN_INSTC

              SET         SECUR_SRVC_CD                       =      ''' +CONVERT(VARCHAR,@SECUR_SRVC_CD)+''',         
                          IPADR                     =     '+ isnull('''' + convert(varchar(50),@IPADR) + '''','null') + ',                         
                          SFTW_NM                   =      '+ isnull('''' + convert(varchar(150),@SFTW_NM) + '''','null') + ',                      
                          HST_NM                    =     '+ isnull('''' + convert(varchar(150),@HST_NM) + '''','null') + ',                      
                          DOM_NM                    =     '+ isnull('''' + convert(varchar(150),@DOM_NM) + '''','null') + ',                            
                          APPL_URL                  =     '+ isnull('''' + convert(varchar(2000),@APPL_URL) + '''','null') + ',                  
                          OS_KEY                    =     '+ isnull('''' + convert(varchar(50),@OS_KEY) + '''','null') + ',                              
                          MAC_ADR_NM                =     '+ isnull('''' + convert(varchar(50),@MAC_ADR_NM) + '''','null') + ',                     
                          PORT_NBR                  =      '+ isnull('''' + convert(varchar(50),@PORT_NBR) + '''','null') + ',
                          VULN_INSTC_STS_CD                   =      ''' +CONVERT(VARCHAR,@VULN_INSTC_STS_CD)+''' ,
                          VULN_SEV_CD               =      '+ isnull('''' + convert(varchar(50),@VULN_SEV_CD) + '''','null') + ',
                           VULN_IMP_CD              =      '+ isnull('''' + convert(varchar(50),@VULN_IMP_CD) + '''','null') + ',
                           RISK_PRBL_CD                       =      '+ isnull('''' + convert(varchar(50),@RISK_PRBL_CD) + '''','null') + ',
                           RMDTN_CST_EFFRT_CD          =      '+ isnull('''' + convert(varchar(50),@RMDTN_CST_EFFRT_CD) + '''','null') + ',
                           VULN_CATGY_CD          =      '+ isnull('''' + convert(varchar(50),@VULN_CATGY_CD) + '''','null') + ',
                           CVE_ID                   =      '+ isnull('''' + convert(varchar(50),@CVE_ID) + '''','null') + ',
                          VULN_NM                   =      '+ isnull('''' + convert(varchar(50),@VULN_NM) + '''','null') + ',
                           VULN_DESC                =      '+ isnull('''' + convert(varchar(max),@VULN_DESC) + '''','null') + ',
                           SRC_ADVS_TXT                       =      '+ isnull('''' + convert(varchar(max),@SRC_ADVS_TXT) + '''','null') + ',
                           VULN_BAS_SCOR               =      '+ isnull('''' + convert(varchar(50),@VULN_BAS_SCOR) + '''','null') + ',
                           VULN_IMP_SUB_SCOR           =      '+ isnull('''' + convert(varchar(50),@VULN_IMP_SUB_SCOR) + '''','null') + ',
                           VULN_EXPLT_SUB_SCOR         =         '+ isnull('''' + convert(varchar(50),@VULN_EXPLT_SUB_SCOR) + '''','null') + ',
                           VULN_TMPRL_SCOR          =      '+ isnull('''' + convert(varchar(50),@VULN_TMPRL_SCOR) + '''','null') + ',
                           VULN_ENV_SCOR               =      '+ isnull('''' + convert(varchar(50),@VULN_ENV_SCOR) + '''','null') + ',
                         VULN_VCTR_TXT                        =      '+ isnull('''' + convert(varchar(max),@VULN_VCTR_TXT) + '''','null') + ',
                           VULN_TECH_COMMT_TXT         =   '+ isnull('''' + convert(varchar(max),@VULN_TECH_COMMT_TXT) + '''','null') + ',
                           VULN_IMP_COMMT_TXT          =      '+ isnull('''' + convert(varchar(max),@VULN_IMP_COMMT_TXT) + '''','null') + ',
                           RECOM_COMMT_TXT          =      '+ isnull('''' + convert(varchar(max),@RECOM_COMMT_TXT) + '''','null') + ',
                           ROOT_CAUS_COMMT_TXT         =      '+ isnull('''' + convert(varchar(max),@ROOT_CAUS_COMMT_TXT) + '''','null') + ',  
                          UPDT_DT                   =     '+'GETDATE()'+',
                          UPDT_USER_ID                        =     '+convert(varchar(50),@USER_ID)+ ',
                          VULN_OVALL_SCOR           =      '+ isnull('''' + convert(varchar(50),@VULN_OVALL_SCOR) + '''','null') + ',
                           OWASP_TOP_10_KEY                   =      '+ isnull('''' + convert(varchar(50),@OWASP_TOP_10_KEY) + '''','null') + '

                          WHERE  CLNT_VULN_INSTC_KEY  =      '+ CONVERT(VARCHAR,@CLNT_VULN_INSTC_KEY) +''
                          EXECUTE (@Query)
                                           SELECT @@ROWCOUNT AS RETVAL
              END
                
 
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Check_AuthoritativeSourceName]...';


GO

CREATE PROCEDURE [dbo].[Check_AuthoritativeSourceName]
(
	@LKP_ENTY_NM VARCHAR(150)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT COUNT(LKP_ENTY_NM) [COUNT] FROM    MSTR_LKP 
WHERE   LKP_ENTY_TYP_NM= 'Authoritative Source'	
AND     LKP_ENTY_NM  =  @LKP_ENTY_NM 
AND     ACTV_IND = 1  
  


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Check_FileExistbyEngservicecode]...';


GO
CREATE PROCEDURE [dbo].[Check_FileExistbyEngservicecode]
(
	@FL_NM			VARCHAR(150),
	@CLNT_ENGMT_CD	VARCHAR(30),
	@SECUR_SRVC_CD  VARCHAR(10)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON



SELECT  COUNT(FL_NM) [COUNT]
FROM    APPL_FL_UPLOAD_LOG			A
JOIN    MSTR_LKP                    B                    
ON      B.MSTR_LKP_KEY			=   A.FL_STS_KEY
WHERE   A.FL_NM                 =   @FL_NM
AND		A.CLNT_ENGMT_CD         =   @CLNT_ENGMT_CD       
AND     A.SECUR_SRVC_CD         =   @SECUR_SRVC_CD 
AND		B.LKP_ENTY_NM          <>  'Scan Failure'
AND		ROW_STS_KEY             =   1 



END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[Check_FileExistbyReportName]...';


GO
CREATE PROCEDURE [dbo].[Check_FileExistbyReportName]
(
       @FL_NM               VARCHAR(150),
       @RPT_NM_KEY          INTEGER,
       @CLNT_ENGMT_CD       VARCHAR(30)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	COUNT(FL_NM) [COUNT] 
FROM    RPT_FL_UPLOAD_LOG A
JOIN	RPT_NM            B
ON      A.RPT_NM_KEY	= B.RPT_NM_KEY
WHERE   FL_NM			= @FL_NM
AND     B.RPT_NM_KEY	= @RPT_NM_KEY 
AND     A.CLNT_ENGMT_CD = @CLNT_ENGMT_CD
AND		ROW_STS_KEY         = 1

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Check_OrgNameByName]...';


GO
CREATE PROCEDURE [dbo].[Check_OrgNameByName]
(
	@OrgName VARCHAR(150)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON



SELECT COUNT(ORG_NM) [COUNT] FROM    ORG
WHERE   ORG_NM	= @OrgName
AND ROW_STS_KEY <> 3



END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[Check_PERMSN_GRPName]...';


GO
/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: Check_PERMSN_GRPName
	** Desc: This procedure check permission name exist into PERMSN_GRP table
	** Auth: Prasad varma
	** Date: 22/4/2016
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    00/00/1999      xxxxx          

	**************************************/
CREATE PROCEDURE [dbo].[Check_PERMSN_GRPName]
(
	@PERMSN_GRP_NM VARCHAR(100)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT COUNT(PERMSN_GRP_NM) FROM    PERMSN_GRP
WHERE   PERMSN_GRP_NM	= @PERMSN_GRP_NM
AND ROW_STS_KEY <> 3

SELECT @@ROWCOUNT RETVAL

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[Check_ROLEName]...';


GO
/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: Check_ROLEName
	** Desc: This procedure check permission name exist into APPL_ROLE table
	** Auth: Prasad varma
	** Date: 22/4/2016
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    00/00/1999      xxxxx          

	**************************************/
CREATE PROCEDURE [dbo].[Check_ROLEName]
(
	@APPL_ROLE_NM         VARCHAR(100)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT COUNT(APPL_ROLE_NM) FROM    APPL_ROLE
WHERE   APPL_ROLE_NM	= @APPL_ROLE_NM
AND ROW_STS_KEY <> 3



END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[CreateSchema]...';


GO
CREATE PROCEDURE [dbo].[CreateSchema]
(
 @SchemaName VARCHAR(50),
 @ORG_KEY	 INTEGER
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

DECLARE @Query VARCHAR(max)
DECLARE @Query1 VARCHAR(max)
DECLARE @Query2 VARCHAR(max)
DECLARE @Query3 VARCHAR(max)
--declare @DatabaseName	sysname set @DatabaseName	= 'IRMaaSQCRole'
--declare @SchemaName		sysname set @SchemaName		= 'Test'
--declare @UserName		sysname set @UserName		= 'dbo'
--declare @myrole			sysname set @myrole			= 'myrole'
--declare @TableName		sysname set @TableName		= 'Test'

/*
set @Query1='CREATE '+ @myrole  + ' AUTHORIZATION '+ @UserName + ';'
PRINT(@query1)
-- EXEC (@Query1) 
-- EXEC sp_addrolemember @myrole, @UserName;


set @Query2='GRANT ALTER, CONTROL, DELETE, EXECUTE, INSERT, REFERENCES, SELECT, UPDATE, VIEW 
DEFINITION ON SCHEMA::' + @SchemaName + 'TO' + @myrole + ';'
EXEC (@Query2)

GRANT CREATE TABLE, CREATE PROCEDURE, CREATE FUNCTION, CREATE VIEW TO myrole;
*/
set @Query='
IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'+QuoteName(@SchemaName,'''')+')
exec (''CREATE SCHEMA '+QuoteName(@SchemaName)+''')'
EXECUTE(@Query)
-- PRINT @Query
 UPDATE ORG SET ORG_SCHM = @SchemaName WHERE ORG_KEY = @ORG_KEY

 SELECT @@ROWCOUNT RetVal;

 -- PRINT  (@query2)
-- SELECT * FROM   sys.schemas
-- DROP SCHEMA test 
-- DROP TABLE test.test1
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[CreateSchemaETLTables]...';


GO
CREATE PROCEDURE [dbo].[CreateSchemaETLTables]
(
 @SchemaName VARCHAR(50),
 @ORG_KEY	 INTEGER
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

DECLARE @Query1 VARCHAR(max)
DECLARE @Query2 VARCHAR(max)
DECLARE @Query3 VARCHAR(max)
DECLARE @Query4 VARCHAR(max)

SET @Query1= '

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '''+ @SchemaName+'''  AND TABLE_NAME =''CMN_FMT_V1_STG'')
BEGIN
CREATE TABLE '+ @SchemaName+ '.CMN_FMT_V1_STG 
(
	[SRC_VULN_SCAN_ID]       VARCHAR (150)   NULL,
    [SRC_VULN_SCAN_STRT_DT]  DATETIME        NULL,
    [SRC_VULN_SCAN_END_DT]   DATETIME        NULL,
    [SRC_VULN_INSTC_ID]      VARCHAR (150)   NULL,
    [SRC_VULN_ID]            VARCHAR (150)   NULL,
    [VULN_NM]                VARCHAR (255)   NOT NULL,
    [VULN_DESC]              TEXT            NULL,
    [VULN_CREAT_DT]          DATETIME        NOT NULL,
    [VULN_SEV_CD]            VARCHAR (3)     NULL,
    [VULN_SEV_NM]            VARCHAR (150)   NULL,
    [VULN_IMP_CD]            VARCHAR (3)     NULL,
    [VULN_IMP_NM]            VARCHAR (150)   NULL,
    [RISK_PRBL_CD]           VARCHAR (3)     NULL,
    [RISK_PRBL_NM]           VARCHAR (150)   NULL,
    [RMDTN_CST_EFFRT_CD]     VARCHAR (3)     NULL,
    [RMDTN_CST_EFFRT_NM]     VARCHAR (150)   NULL,
    [ROOT_CAUS_ANLYS_CD]     VARCHAR (10)    NULL,
    [OWASP_CD]               VARCHAR (10)    NULL,
    [IPADR]                  VARCHAR (39)    NULL,
    [PORT_NBR]               INT             NULL,
    [HST_NM]                 VARCHAR (150)   NULL,
    [NTWK_NM]                VARCHAR (150)   NULL,
    [PRTCL_NM]               VARCHAR (255)   NULL,
    [NETBIOS_NM]             VARCHAR (150)   NULL,
    [MAC_ADR_NM]             VARCHAR (150)   NULL,
    [APPL_URL]               NVARCHAR (2000) NULL,
    [SFTW_NM]                VARCHAR (150)   NULL,
    [CVE_ID]                 VARCHAR (25)    NULL,
    [SRC_ADVS_TXT]           VARCHAR (1024)  NULL,
    [DOM_NM]                 VARCHAR (150)   NULL,
    [OS_NM]                  VARCHAR (150)   NULL,
    [VULN_BAS_SCOR]          DECIMAL (10, 2) NULL,
    [VULN_EXPLT_SUB_SCOR]    DECIMAL (10, 2) NULL,
    [VULN_IMP_SUB_SCOR]      DECIMAL (10, 2) NULL,
    [VULN_TMPRL_SCOR]        DECIMAL (10, 2) NULL,
    [VULN_ENV_SCOR]          DECIMAL (10, 2) NULL,
    [VULN_VCTR_TXT]          VARCHAR (100)   NULL,
    [RECOM_COMMT_TXT]        TEXT            NULL,
    [VULN_IMP_COMMT_TXT]     TEXT            NULL,
    [ROOT_CAUS_COMMT_TXT]    TEXT            NULL,
    [VULN_TECH_COMMT_TXT]    TEXT            NULL,
    [APPL_FL_UPLOAD_LOG_KEY] INT             NOT NULL,
    [CREAT_DT]               DATETIME        NOT NULL,
    [CREAT_USER_ID]          INT             NOT NULL
	)  
	
END
ELSE
BEGIN
SELECT -1 Retval
END 
'

 
 -- PRINT  (@query1)
 EXECUTE (@Query1)

 SET @Query2= '

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '''+ @SchemaName+'''  AND TABLE_NAME =''CISCO_PEN_TST_STG'')
BEGIN
CREATE TABLE '+ @SchemaName+ '.CISCO_PEN_TST_STG 
(
	[ID]                     VARCHAR (50)    NULL,
    [SEV]                    INT             NULL,
    [SEV_LBL]                VARCHAR (150)   NULL,
    [PRBL]                   INT             NULL,
    [PRBL_LBL]               VARCHAR (150)   NULL,
    [URL]                    VARCHAR (2000)  NULL,
    [DESC]                   TEXT            NULL,
    [CREAT_AT]               DATETIME        NULL,
    [STS]                    VARCHAR (150)   NULL,
    [IP]                     VARCHAR (255)   NULL,
    [IP_AS_INTG]             BIGINT          NULL,
    [PORT]                   INT             NULL,
    [PRTCL]                  VARCHAR (255)   NULL,
    [CVSS_BAS]               DECIMAL (10, 2) NULL,
    [CVSS_TMPRL]             DECIMAL (10, 2) NULL,
    [HST]                    VARCHAR (255)   NULL,
    [OS]                     VARCHAR (255)   NULL,
    [SCOR]                   INT             NULL,
    [SCOR_LBL]               VARCHAR (150)   NULL,
    [RMDTN_EFFRT]            INT             NULL,
    [RMDTN_EFFRT_LBL]        VARCHAR (150)   NULL,
    [PROJ_ID]                VARCHAR (150)   NULL,
    [PROJ_STRT_DT]           DATETIME        NULL,
    [PROJ_END_DT]            DATETIME        NULL,
    [VULN_CLSS]              VARCHAR (255)   NULL,
    [CVE]                    VARCHAR (2000)  NULL,
    [CATGY]                  VARCHAR (255)   NULL,
    [DTL]                    TEXT            NULL,
    [SECUR_IMP]              TEXT            NULL,
    [MITG_FCT]               TEXT            NULL,
    [SOLN]                   TEXT            NULL,
    [REPRD_STEP]             TEXT            NULL,
    [REPRD_NOTE]             TEXT            NULL,
    [CSTM_FLD_1]             VARCHAR (1000)  NULL,
    [CSTM_FLD_2]             VARCHAR (1000)  NULL,
    [CSTM_FLD_3]             VARCHAR (1000)  NULL,
    [CSTM_FLD_4]             VARCHAR (1000)  NULL,
    [CSTM_COL_TYP]           VARCHAR (1000)  NULL,
    [CSTM_COL_LBL]           VARCHAR (1000)  NULL,
    [APPL_FL_UPLOAD_LOG_KEY] INT             NOT NULL,
    [CREAT_DT]               DATETIME        NOT NULL,
    [CREAT_USER_ID]          INT             NOT NULL
	)  
	
END
ELSE
BEGIN
SELECT -1 Retval
END 
'

 
 -- PRINT  (@query2)
 EXECUTE (@Query2)

  SET @Query3= '

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '''+ @SchemaName+'''  AND TABLE_NAME =''CISCO_SECUR_RISK_ASES_STG'')
BEGIN
CREATE TABLE '+ @SchemaName+ '.CISCO_SECUR_RISK_ASES_STG 
(
	 [RISK_NBR]               INT            NULL,
    [RISK_NM]                VARCHAR (255)  NULL,
    [CTL_EFF]                VARCHAR (150)  NULL,
    [RISK_LVL_IMP]           VARCHAR (150)  NULL,
    [RISK_LVL_PRBL]          VARCHAR (150)  NULL,
    [RISK_LVL_OVALL]         VARCHAR (150)  NULL,
    [RISK_DESC]              TEXT           NULL,
    [IMP_COMMT]              TEXT           NULL,
    [CTL_DEFICIENCIES]       TEXT           NULL,
    [RMDTN_RECOM]            TEXT           NULL,
    [MITG_CTL_AREA]          VARCHAR (2000) NULL,
    [RLVN_STRG_TRND]         VARCHAR (2000) NULL,
    [APPL_FL_UPLOAD_LOG_KEY] INT            NOT NULL,
    [CREAT_DT]               DATETIME       NOT NULL,
    [CREAT_USER_ID]          INT            NOT NULL
	)  
	
END
ELSE
BEGIN
SELECT -1 Retval
END 
'

 
 -- PRINT  (@query3)
 EXECUTE (@Query3)
 
SET @Query4= '
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '''+ @SchemaName+'''  AND TABLE_NAME =''TRIPWIRE_IP360_STG'')
BEGIN
CREATE TABLE '+ @SchemaName+ '.TRIPWIRE_IP360_STG(
	[AUD_ID]            INT            NOT NULL,
    [NTWK_ID]           INT            NOT NULL,
    [NTWK_NM]           VARCHAR (256)  NOT NULL,
    [NTWK_GRP_NM]       VARCHAR (128)  NULL,
    [SCANPROFILE_ID]    INT            NOT NULL,
    [STRT_DT]           DATETIME       NULL,
    [END_DT]            DATETIME       NULL,
    [VULN_ID]           INT            NOT NULL,
    [VULN_NM]           VARCHAR (512)  NULL,
    [DESC]              TEXT           NULL,
    [ADVS]              VARCHAR (1024) NULL,
    [RISK]              VARCHAR (32)   NULL,
    [SKL]               VARCHAR (32)   NULL,
    [STRG]              VARCHAR (32)   NULL,
    [PUBL_DT]           DATETIME       NULL,
    [GUID]              INT            NULL,
    [APPL_NM]           VARCHAR (256)  NULL,
    [PORT]              INT            NULL,
    [PRTCL]             VARCHAR (64)   NULL,
    [MAX_CVSS_BAS_SCOR] DECIMAL (3, 1) NULL,
    [VNE_ID]            INT            NOT NULL,
    [IP]                VARCHAR (39)   NULL,
    [HST_NM]            VARCHAR (128)  NULL,
    [NETBIOS_NM]        VARCHAR (128)  NULL,
    [DOM_NM]            VARCHAR (128)  NULL,
    [OS_NM]             VARCHAR (128)  NULL,
    [MAC_ADR]           VARCHAR (32)   NULL,
    [IP_NBR]            BIGINT         NULL,
    [CREAT_DT]          DATETIME       NOT NULL,
    [CREAT_USER_ID]     INT            NOT NULL
) 
SELECT 1 Retval
END
ELSE
BEGIN
SELECT -1 Retval
END 
'
-- PRINT (@Query4)
 EXECUTE (@Query4)
 
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[CreateSchemaTables]...';


GO
CREATE PROCEDURE [dbo].[CreateSchemaTables]
(
 @SchemaName VARCHAR(50),
 @ORG_KEY	 INTEGER
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

DECLARE @Query1 VARCHAR(max)
DECLARE @Query2 VARCHAR(max)

SET @Query1= '
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '''+ @SchemaName+'''  AND TABLE_NAME =''CLNT_VULN_INSTC'')
BEGIN
CREATE TABLE '+ @SchemaName+ '.CLNT_VULN_INSTC 
(
	[CLNT_VULN_INSTC_KEY] [int] IDENTITY(1,1) NOT NULL,
	[ROW_STS_KEY] [int] NOT NULL,
	[ORG_KEY] [int] NOT NULL,
	[CLNT_ENGMT_CD] [varchar](30) NOT NULL,
	[SECUR_SRVC_CD] [varchar](10) NOT NULL,
	[VULN_SRC_KEY] [int] NOT NULL,
	[VULN_INSTC_STS_CD] [varchar](3) NOT NULL,
	[VULN_SEV_CD] [varchar](3) NULL,
	[VULN_IMP_CD] [varchar](3) NULL,
	[RISK_PRBL_CD] [varchar](3) NULL,
	[RMDTN_CST_EFFRT_CD] [varchar](3) NULL,
	[VULN_CATGY_CD] [varchar](10) NULL,
	[OWASP_TOP_10_KEY] [int] NULL,
	[CVE_ID] [varchar](25) NULL,
	[OS_KEY] [int] NULL,
	[SRC_VULN_SCAN_ID] [varchar](150) NULL,
	[SRC_VULN_SCAN_STRT_DT] [datetime] NULL,
	[SRC_VULN_SCAN_END_DT] [datetime] NULL,
	[SRC_VULN_INSTC_ID] [varchar](150) NULL,
	[SRC_VULN_ID] [varchar](150) NULL,
	[VULN_NM] [varchar](255) NOT NULL,
	[VULN_DESC] [text] NULL,
	[VULN_CREAT_DT] [datetime] NOT NULL,
	[IPADR] [varchar](39) NULL,
	[PORT_NBR] [int] NULL,
	[SRC_ADVS_TXT] [varchar](1024) NULL,
	[SRC_VULN_BAS_SCOR] [decimal](10, 2) NULL,
	[VULN_BAS_SCOR] [decimal](10, 2) NULL,
	[VULN_IMP_SUB_SCOR] [decimal](10, 2) NULL,
	[VULN_EXPLT_SUB_SCOR] [decimal](10, 2) NULL,
	[VULN_TMPRL_SCOR] [decimal](10, 2) NULL,
	[VULN_ENV_SCOR] [decimal](10, 2) NULL,
	[VULN_OVALL_SCOR] [decimal](10, 2) NULL,
	[VULN_VCTR_TXT] [varchar](100) NULL,
	[NTWK_NM] [varchar](150) NULL,
	[PRTCL_NM] [varchar](255) NULL,
	[HST_NM] [varchar](150) NULL,
	[DOM_NM] [varchar](150) NULL,
	[SFTW_NM] [varchar](150) NULL,
	[APPL_URL] [nvarchar](2000) NULL,
	[NETBIOS_NM] [varchar](150) NULL,
	[MAC_ADR_NM] [varchar](150) NULL,
	[VULN_TECH_COMMT_TXT] [text] NULL,
	[VULN_IMP_COMMT_TXT] [text] NULL,
	[RECOM_COMMT_TXT] [text] NULL,
	[ROOT_CAUS_COMMT_TXT] [text] NULL,
	[APPL_FL_UPLOAD_LOG_KEY] [int] NULL,
	[CREAT_DT] [datetime] NOT NULL,
	[CREAT_USER_ID] [int] NOT NULL,
	[UPDT_DT] [datetime] NULL,
	[UPDT_USER_ID] [int] NULL,
 CONSTRAINT [PK_CLNT_VULN_INSTC] PRIMARY KEY CLUSTERED 
(
	[CLNT_VULN_INSTC_KEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY] 

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_INSTC]  WITH CHECK ADD FOREIGN KEY([APPL_FL_UPLOAD_LOG_KEY])
REFERENCES [dbo].[APPL_FL_UPLOAD_LOG] ([APPL_FL_UPLOAD_LOG_KEY])

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_INSTC]  WITH CHECK ADD FOREIGN KEY([CVE_ID])
REFERENCES [dbo].[CVE] ([CVE_ID])

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_INSTC]  WITH CHECK ADD FOREIGN KEY([ORG_KEY])
REFERENCES [dbo].[ORG] ([ORG_KEY])

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_INSTC]  WITH CHECK ADD FOREIGN KEY([OS_KEY])
REFERENCES [dbo].[OS] ([OS_KEY])

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_INSTC]  WITH CHECK ADD FOREIGN KEY([RISK_PRBL_CD])
REFERENCES [dbo].[RISK_PRBL] ([RISK_PRBL_CD])

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_INSTC]  WITH CHECK ADD FOREIGN KEY([RMDTN_CST_EFFRT_CD])
REFERENCES [dbo].[RMDTN_CST_EFFRT] ([RMDTN_CST_EFFRT_CD])

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_INSTC]  WITH CHECK ADD FOREIGN KEY([VULN_CATGY_CD])
REFERENCES [dbo].[VULN_CATGY] ([VULN_CATGY_CD])

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_INSTC]  WITH CHECK ADD FOREIGN KEY([ROW_STS_KEY])
REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY])

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_INSTC]  WITH CHECK ADD FOREIGN KEY([VULN_IMP_CD])
REFERENCES [dbo].[VULN_IMP] ([VULN_IMP_CD])

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_INSTC]  WITH CHECK ADD FOREIGN KEY([VULN_INSTC_STS_CD])
REFERENCES [dbo].[VULN_INSTC_STS] ([VULN_INSTC_STS_CD])

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_INSTC]  WITH CHECK ADD FOREIGN KEY([VULN_SEV_CD])
REFERENCES [dbo].[VULN_SEV] ([VULN_SEV_CD])

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_INSTC]  WITH CHECK ADD FOREIGN KEY([VULN_SRC_KEY])
REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY])

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_INSTC]  WITH CHECK ADD FOREIGN KEY([CLNT_ENGMT_CD], [SECUR_SRVC_CD])
REFERENCES [dbo].[CLNT_SECUR_SRVC_ENGMT] ([CLNT_ENGMT_CD], [SECUR_SRVC_CD])  
END
ELSE
BEGIN
SELECT -1 Retval
END 
'

 
--  PRINT  (@query1)
 EXECUTE (@Query1)

SET @Query2= '
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '''+ @SchemaName+'''  AND TABLE_NAME =''CLNT_VULN_SECUR_CTL'')
BEGIN
CREATE TABLE '+ @SchemaName+ '.[CLNT_VULN_SECUR_CTL](
	[CLNT_VULN_INSTC_KEY] [int] NOT NULL,
	[REG_CMPLN_CD] [varchar](20) NOT NULL,
	[REG_CMPLN_VER] [varchar](20) NOT NULL,
	[SECUR_CTL_CD] [varchar](20) NOT NULL,
	[ROW_STS_KEY] [int] NOT NULL,
	[CREAT_DT] [datetime] NULL,
	[CREAT_USER_ID] [int] NULL,
	[UPDT_DT] [datetime] NULL,
	[UPDT_USER_ID] [int] NULL,
 CONSTRAINT [PK_CLNT_VULN_SECUR_CTL] PRIMARY KEY CLUSTERED 
(
	[CLNT_VULN_INSTC_KEY] ASC,
	[REG_CMPLN_CD] ASC,
	[REG_CMPLN_VER] ASC,
	[SECUR_CTL_CD] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_SECUR_CTL]  WITH CHECK ADD FOREIGN KEY([CLNT_VULN_INSTC_KEY])
REFERENCES '+ @SchemaName+ '.[CLNT_VULN_INSTC] ([CLNT_VULN_INSTC_KEY])

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_SECUR_CTL]  WITH CHECK ADD FOREIGN KEY([ROW_STS_KEY])
REFERENCES [dbo].[MSTR_LKP] ([MSTR_LKP_KEY])

ALTER TABLE '+ @SchemaName+ '.[CLNT_VULN_SECUR_CTL]  WITH CHECK ADD FOREIGN KEY([REG_CMPLN_CD], [REG_CMPLN_VER], [SECUR_CTL_CD])
REFERENCES [dbo].[SECUR_CTL] ([REG_CMPLN_CD], [REG_CMPLN_VER], [SECUR_CTL_CD]) 
SELECT 1 Retval
END
ELSE
BEGIN
SELECT -1 Retval
END 
'
EXECUTE (@Query2)

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[CreateSchemaView]...';


GO
CREATE PROCEDURE [dbo].[CreateSchemaView]
(
 @SchemaName VARCHAR(50),
 @ORG_KEY	 INTEGER
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

DECLARE @Query3 VARCHAR(max)
  
  SET @Query3= '
CREATE VIEW '+ @SchemaName+ '.Findings AS
		SELECT  DISTINCT A.CLNT_VULN_INSTC_KEY,A.CLNT_ENGMT_CD,A.VULN_NM,A.VULN_SRC_KEY,B.LKP_ENTY_NM VULN_SRC,A.RMDTN_CST_EFFRT_CD,F.RMDTN_CST_EFFRT_NM,
					A.DOM_NM,A.VULN_SEV_CD,A.IPADR,D.VULN_INSTC_STS_CD,D.VULN_INSTC_STS_NM,O.SECUR_SRVC_NM,A.VULN_OVALL_SCOR,
					A.SRC_VULN_SCAN_ID,CONVERT(VARCHAR,A.SRC_VULN_SCAN_STRT_DT,101)STRT_DT,A.CREAT_DT,G.LST_MOD_DT,G.CWE_ID,
					CONVERT(VARCHAR,A.SRC_VULN_SCAN_END_DT,101)END_DT,A.SFTW_NM,A.HST_NM,A.VULN_VCTR_TXT,
					ISNULL(A.APPL_URL,'''')APPL_URL,E.OS_NM,A.NETBIOS_NM,H.VULN_IMP_CD,-- K.SECUR_CTL_FAM_NM,K.SECUR_OBJ_NM,K.SECUR_CTL_NM,
					A.MAC_ADR_NM,A.PORT_NBR,CONVERT(VARCHAR(MAX),A.VULN_DESC)VULN_DESC,CONVERT(VARCHAR(MAX),A.VULN_TECH_COMMT_TXT)VULN_TECH_COMMT_TXT,
					CONVERT(VARCHAR(MAX),A.VULN_IMP_COMMT_TXT)VULN_IMP_COMMT_TXT,CONVERT(VARCHAR(MAX),A.RECOM_COMMT_TXT)RECOM_COMMT_TXT,
					CONVERT(VARCHAR(MAX),A.ROOT_CAUS_COMMT_TXT)ROOT_CAUS_COMMT_TXT,G.CVE_ID,G.CVE_DESC,A.VULN_BAS_SCOR,A.VULN_TMPRL_SCOR,A.VULN_ENV_SCOR,C.VULN_SEV_NM,H.VULN_IMP_NM,
					A.RISK_PRBL_CD,I.RISK_PRBL_NM,A.VULN_CATGY_CD,L.VULN_CATGY_NM,A.OWASP_TOP_10_KEY,
					M.OWASP_NM,A.SECUR_SRVC_CD,M.OWASP_CD,A.ROW_STS_KEY,A.ORG_KEY,VULN_IMP_SUB_SCOR,VULN_EXPLT_SUB_SCOR,VULN_CREAT_DT,SRC_ADVS_TXT,NTWK_NM,PRTCL_NM,
					SRC_VULN_SCAN_STRT_DT,SRC_VULN_SCAN_END_DT,B.LKP_ENTY_NM [Source Name],A.CREAT_USER_ID,E.OS_KEY,SRC_VULN_BAS_SCOR,G.UPDT_DT,
					HITRUST = ISNULL(STUFF((
          SELECT DISTINCT '','' + D.SECUR_CTL_CD
          FROM   '+ @SchemaName+ '.CLNT_VULN_SECUR_CTL D
		  JOIN	 SECUR_CTL			 E
		  ON	 D.SECUR_CTL_CD	   = E.SECUR_CTL_CD
          WHERE  A.CLNT_VULN_INSTC_KEY = D.CLNT_VULN_INSTC_KEY
		  AND	 D.REG_CMPLN_CD	   = ''HITRUST''
		  AND	 D.ROW_STS_KEY		   = 1
          FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''), 1, 1, ''''),''''),
		  FedRAMP = ISNULL(STUFF((
          SELECT DISTINCT'','' + L.SEC_SECUR_CTL_CD
          FROM   '+ @SchemaName+ '.CLNT_VULN_SECUR_CTL	 E
		  JOIN	 SECUR_CTL_MAP			 L
		  ON	 E.SECUR_CTL_CD		   = L.PRI_SECUR_CTL_CD
		  WHERE  A.CLNT_VULN_INSTC_KEY = E.CLNT_VULN_INSTC_KEY
		  AND	 L.SEC_REG_CMPLN_CD	   = ''FedRAMP''
		  AND	 E.ROW_STS_KEY		   = 1
          FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''), 1, 1, ''''),''''),
		  NIST  = ISNULL(STUFF((
          SELECT DISTINCT'','' + K.SEC_SECUR_CTL_CD
          FROM   '+ @SchemaName+ '.CLNT_VULN_SECUR_CTL	 F
		  JOIN	 SECUR_CTL_MAP			 K
		  ON	 F.SECUR_CTL_CD		   = K.PRI_SECUR_CTL_CD
		  WHERE  A.CLNT_VULN_INSTC_KEY = F.CLNT_VULN_INSTC_KEY
		  AND	 K.SEC_REG_CMPLN_CD	   = ''NIST SP 800-53''
		  AND	 F.ROW_STS_KEY		   = 1
          FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''), 1, 1, ''''),''''),
		  CSACCM  = ISNULL(STUFF((
          SELECT DISTINCT'','' + J.SEC_SECUR_CTL_CD
          FROM   '+ @SchemaName+ '.CLNT_VULN_SECUR_CTL G
		  JOIN	 SECUR_CTL_MAP			 J
		  ON	 G.SECUR_CTL_CD		   = J.PRI_SECUR_CTL_CD
          WHERE  A.CLNT_VULN_INSTC_KEY = G.CLNT_VULN_INSTC_KEY
		  AND	 J.SEC_REG_CMPLN_CD	   = ''CSA CCM''
		  AND	 G.ROW_STS_KEY		   = 1
          FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''), 1, 1, ''''),''''),
		  FISMA  = ISNULL(STUFF((
          SELECT DISTINCT'','' + I.SEC_SECUR_CTL_CD
          FROM   '+ @SchemaName+ '.CLNT_VULN_SECUR_CTL	 H
		  JOIN	 SECUR_CTL_MAP			 I
		  ON	 H.SECUR_CTL_CD		   = I.PRI_SECUR_CTL_CD
          WHERE  A.CLNT_VULN_INSTC_KEY = H.CLNT_VULN_INSTC_KEY
		  AND	 I.SEC_REG_CMPLN_CD	   = ''FISMA''
		  AND	 H.ROW_STS_KEY		   = 1
          FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''), 1, 1, ''''),''''),
		  MARSE  = ISNULL(STUFF((
          SELECT DISTINCT'','' + N.SEC_SECUR_CTL_CD
          FROM   '+ @SchemaName+ '.CLNT_VULN_SECUR_CTL	 M
		  JOIN	 SECUR_CTL_MAP			 N
		  ON	 M.SECUR_CTL_CD		   = N.PRI_SECUR_CTL_CD
          WHERE  A.CLNT_VULN_INSTC_KEY = M.CLNT_VULN_INSTC_KEY
		  AND	 N.SEC_REG_CMPLN_CD	   = ''MARS-E''
		  AND	 M.ROW_STS_KEY		   = 1
          FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''), 1, 1, ''''),''''),
		  SOC2  = ISNULL(STUFF((
          SELECT DISTINCT'','' + P.SEC_SECUR_CTL_CD
          FROM   '+ @SchemaName+ '.CLNT_VULN_SECUR_CTL	 O
		  JOIN	 SECUR_CTL_MAP			 P
		  ON	 O.SECUR_CTL_CD		   = P.PRI_SECUR_CTL_CD
          WHERE  A.CLNT_VULN_INSTC_KEY = O.CLNT_VULN_INSTC_KEY
		  AND	 P.SEC_REG_CMPLN_CD	   = ''SOC 2''
		  AND	 O.ROW_STS_KEY		   = 1
          FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''), 1, 1, ''''),''''),
		  PCIDSS  = ISNULL(STUFF((
          SELECT DISTINCT'','' + R.SEC_SECUR_CTL_CD
          FROM   '+ @SchemaName+ '.CLNT_VULN_SECUR_CTL	 Q
		  JOIN	 SECUR_CTL_MAP			 R
		  ON	 Q.SECUR_CTL_CD		   = R.PRI_SECUR_CTL_CD
          WHERE  A.CLNT_VULN_INSTC_KEY = Q.CLNT_VULN_INSTC_KEY
		  AND	 R.SEC_REG_CMPLN_CD	   = ''PCI DSS''
		  AND	 Q.ROW_STS_KEY		   = 1
          FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''), 1, 1, ''''),''''),
		  HIPAA  = ISNULL(STUFF((
          SELECT DISTINCT'','' + T.SEC_SECUR_CTL_CD
          FROM   '+ @SchemaName+ '.CLNT_VULN_SECUR_CTL	 S
		  JOIN	 SECUR_CTL_MAP			 T
		  ON	 S.SECUR_CTL_CD		   = T.PRI_SECUR_CTL_CD
          WHERE  A.CLNT_VULN_INSTC_KEY = S.CLNT_VULN_INSTC_KEY
		  AND	 T.SEC_REG_CMPLN_CD	   = ''HIPAA''
		  AND	 S.ROW_STS_KEY		   = 1
          FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''), 1, 1, ''''),''''),
		  ISO  = ISNULL(STUFF((
          SELECT DISTINCT'','' + V.SEC_SECUR_CTL_CD
          FROM   '+ @SchemaName+ '.CLNT_VULN_SECUR_CTL	 U
		  JOIN	 SECUR_CTL_MAP			 V
		  ON	 U.SECUR_CTL_CD		   = V.PRI_SECUR_CTL_CD
          WHERE  A.CLNT_VULN_INSTC_KEY = U.CLNT_VULN_INSTC_KEY
		  AND	 V.SEC_REG_CMPLN_CD	   = ''ISO/IEC 27001''
		  AND	 U.ROW_STS_KEY		   = 1
          FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''), 1, 1, ''''),''''),
		  IRS   = ISNULL(STUFF((
          SELECT DISTINCT'','' + X.SEC_SECUR_CTL_CD
          FROM   '+ @SchemaName+ '.CLNT_VULN_SECUR_CTL	 W
		  JOIN	 SECUR_CTL_MAP			 X
		  ON	 W.SECUR_CTL_CD		   = X.PRI_SECUR_CTL_CD
          WHERE  A.CLNT_VULN_INSTC_KEY = W.CLNT_VULN_INSTC_KEY
		  AND	 X.SEC_REG_CMPLN_CD	   = ''IRS Pub 1075 ''
		  AND	 W.ROW_STS_KEY		   = 1
          FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''), 1, 1, ''''),''''),
		  SECUR_OBJ_CD=ISNULL(STUFF((
          SELECT DISTINCT'','' + Z.SECUR_OBJ_CD
          FROM   '+ @SchemaName+ '.CLNT_VULN_SECUR_CTL	Y
		  JOIN	 SECUR_CTL   			 Z
		  ON	 Y.SECUR_CTL_CD		   = Z.SECUR_CTL_CD
          WHERE  Y.CLNT_VULN_INSTC_KEY = A.CLNT_VULN_INSTC_KEY
		  AND	 Y.ROW_STS_KEY		   = 1
          FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''), 1, 1, ''''),'''')
			FROM	'+ @SchemaName+ '.CLNT_VULN_INSTC				A
			JOIN	MSTR_LKP					B
			ON		A.VULN_SRC_KEY			=	B.MSTR_LKP_KEY
			LEFT JOIN	VULN_SEV					C
			ON		C.VULN_SEV_CD			=   A.VULN_SEV_CD
			LEFT JOIN	VULN_INSTC_STS				D
			ON		D.VULN_INSTC_STS_CD		=   A.VULN_INSTC_STS_CD
			LEFT JOIN	RMDTN_CST_EFFRT				F
			ON		A.RMDTN_CST_EFFRT_CD	=	F.RMDTN_CST_EFFRT_CD
			LEFT JOIN	VULN_IMP					H
			ON		A.VULN_IMP_CD			=   H.VULN_IMP_CD
			LEFT JOIN	RISK_PRBL					I
			ON		A.RISK_PRBL_CD			=	I.RISK_PRBL_CD
			LEFT JOIN	CVE							G
			ON		A.CVE_ID				=	G.CVE_ID
			JOIN	SECUR_SRVC					O
			ON		A.SECUR_SRVC_CD			=	O.SECUR_SRVC_CD
			LEFT JOIN	OS							E
			ON		A.OS_KEY		=			E.OS_KEY
			LEFT JOIN	CLNT_VULN_SECUR_CTL			J
			ON		A.CLNT_VULN_INSTC_KEY	=	J.CLNT_VULN_INSTC_KEY
			LEFT JOIN	SECUR_CTL					K
			ON		J.REG_CMPLN_CD			=	K.REG_CMPLN_CD
			AND	    J.REG_CMPLN_VER			=	K.REG_CMPLN_VER
			AND	    J.SECUR_CTL_CD			=	K.SECUR_CTL_CD
			LEFT JOIN   VULN_CATGY						L
			ON		L.VULN_CATGY_CD	=  A.VULN_CATGY_CD
			LEFT JOIN OWASP_TOP_10				M
			ON		A.OWASP_TOP_10_KEY		=   M.OWASP_TOP_10_KEY
			WHERE	A.ROW_STS_KEY			=   1
		--	AND		A.VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
		--	AND		A.VULN_SEV_CD			NOT IN(''I'')
			AND		A.ROW_STS_KEY			=   1'
 -- PRINT (@Query3)
 EXECUTE(@Query3)
 SELECT 1 Retval
 -- PRINT  (@query2)
-- SELECT * FROM   sys.schemas
-- DROP SCHEMA test 
-- DROP TABLE test.test1
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[DEL_CLNTENGMTUSERASGN]...';


GO

CREATE PROCEDURE [dbo].[DEL_CLNTENGMTUSERASGN](
	   
	   @CLNT_ENGMT_CD	VARCHAR(30)
      
       )

       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON


			  DELETE FROM CLNT_ENGMT_USER_ASGN  
			  WHERE  CLNT_ENGMT_CD	=	@CLNT_ENGMT_CD 
			
              SELECT @@ROWCOUNT AS RETVAL

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[DEL_CLNTRELENGMTINDENTIFIER]...';


GO

CREATE PROCEDURE [dbo].[DEL_CLNTRELENGMTINDENTIFIER](
	   @CLNT_ENGMT_CD	VARCHAR(30)
	   
       
       )

       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON

					DELETE  FROM CLNT_REL_ENGMT_ID
					WHERE  CLNT_ENGMT_CD	=	@CLNT_ENGMT_CD 

                    SELECT @@ROWCOUNT AS RETVAL

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[DEL_CLNTSECURSRVCENGMT]...';


GO
CREATE PROCEDURE [dbo].[DEL_CLNTSECURSRVCENGMT](
	   
	   @CLNT_ENGMT_CD	VARCHAR(30),
	   @SECUR_SRVC_CD	VARCHAR(30),
	   @USER_ID			INTEGER,
	   @Flag			VARCHAR(1)
	  
       )

       AS
       BEGIN
	   DECLARE @LiCOUNT INTEGER = 0;
              BEGIN TRY
			  
              SET NOCOUNT ON

			IF  @Flag = 'I'
			BEGIN
					DELETE FROM USER_CLNT_SRVC_ASGN WHERE CLNT_ENGMT_CD = @CLNT_ENGMT_CD AND SECUR_SRVC_CD = @SECUR_SRVC_CD

					DELETE FROM CLNT_SECUR_SRVC_ENGMT WHERE CLNT_ENGMT_CD = @CLNT_ENGMT_CD AND SECUR_SRVC_CD = @SECUR_SRVC_CD 

                    SELECT @@ROWCOUNT AS RETVAL
			END

			IF  @Flag = 'P'
			BEGIN
					DELETE A FROM USER_CLNT_SRVC_ASGN A
					JOIN	USER_PRFL				  B
					ON		A.USER_ID	=	B.USER_ID
					 WHERE A.CLNT_ENGMT_CD = @CLNT_ENGMT_CD 
					 AND SECUR_SRVC_CD = @SECUR_SRVC_CD
					 AND B.USER_TYP_KEY	= 18
					 

			

                    SELECT @@ROWCOUNT AS RETVAL
			END

			IF  @Flag = 'U'
			BEGIN
					 DELETE  FROM USER_CLNT_SRVC_ASGN  
					 WHERE	 CLNT_ENGMT_CD =  @CLNT_ENGMT_CD
					 AND     SECUR_SRVC_CD = @SECUR_SRVC_CD
					 AND	 USER_ID	  =  @USER_ID			 

                    SELECT @@ROWCOUNT AS RETVAL
			END

			
              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[DEL_PartnerAnlistByEngCode]...';


GO

CREATE PROCEDURE [dbo].[DEL_PartnerAnlistByEngCode](
	   
	   @CLNT_ENGMT_CD	VARCHAR(30),
	   @Userlist		VARCHAR(100)

       )

       AS
       BEGIN
	   DECLARE @LiCOUNT INTEGER = 0;
              BEGIN TRY
			  
              SET NOCOUNT ON

					DELETE  A 
					FROM	USER_CLNT_SRVC_ASGN	 A
					JOIN	USER_PRFL			 B
					ON		A.USER_ID		   = B.USER_ID
					WHERE	A.CLNT_ENGMT_CD	   = @CLNT_ENGMT_CD
					AND		A.CREAT_USER_ID NOT IN (SELECT items FROM dbo.FnSplit(@Userlist,','))
					AND		B.USER_TYP_KEY	   = 18
				
					SELECT @@ROWCOUNT AS RETVAL

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END

/****** Object:  StoredProcedure [dbo].[Get_ClntEngmtUserAsgnByID]    Script Date: 5/25/2016 11:03:58 AM ******/
SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[DEL_UploadfilebyID]...';


GO


CREATE PROCEDURE [dbo].[DEL_UploadfilebyID](
	   
	   @APPL_FL_UPLOAD_LOG_KEY	INTEGER
      
       )

       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON


			  DELETE FROM APPL_FL_UPLOAD_LOG  
			  WHERE  APPL_FL_UPLOAD_LOG_KEY	=	@APPL_FL_UPLOAD_LOG_KEY
			
              SELECT @@ROWCOUNT AS RETVAL

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[Get_ClntEngmtByID]...';


GO

CREATE PROCEDURE [dbo].[Get_ClntEngmtByID]
(
      @CLNT_ENGMT_CD	VARCHAR(30)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


SELECT      A.CLNT_ENGMT_CD, A.CLNT_ORG_KEY, A.SECUR_PKG_CD, B.SECUR_PKG_NM, dbo.fnGetParentOrgNameID(A.CLNT_ORG_KEY) ClientName,A.ENGMT_STS_KEY,
			 dbo.fnGetMasterLkpNameByID(A.ROW_STS_KEY) ROW_STS_VAL, A.ROW_STS_KEY, CLNT_ENGMT_CD, A.CLNT_ENGMT_NM,  
            A.AGR_DT, A.ENGMT_STRT_DT, A.ENGMT_EST_END_DT, A.CLNT_ENGMT_DESC, A.ENGMT_COMMT, A.CREAT_DT, A.CREAT_USER_ID, A.UPDT_DT, 
			A.UPDT_USER_ID,dbo.fnGetParentOrgNameID(C.PAR_ORG_KEY) [Parent Client Name],
			dbo.fnGetMasterLkpNameByID(C.ORG_TYP_KEY) OrgType,A.CLNT_PUBL_DT

FROM    	CLNT_ENGMT			 A
JOIN    	SECUR_PKG			 B
ON			A.SECUR_PKG_CD	   = B.SECUR_PKG_CD
JOIN        ORG                  C
ON          A.CLNT_ORG_KEY    =  C.ORG_KEY
WHERE       CLNT_ENGMT_CD     = @CLNT_ENGMT_CD


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[Get_ClntEngmtUserAsgnByID]...';


GO
CREATE PROCEDURE [dbo].[Get_ClntEngmtUserAsgnByID]
(
       @CLNT_ENGMT_CD	VARCHAR(30)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

	SELECT  DISTINCT A.CLNT_ENGMT_USER_ASGN_KEY, A.ROW_STS_KEY, A.CLNT_ENGMT_CD, A.USER_ID,B.EMAIL_ID,
			A.CREAT_DT, A.CREAT_USER_ID,A.SECUR_SRVC_LIST_CD,B.USER_TYP_KEY,
			dbo.fnGetMasterLkpNameByID(B.USER_TYP_KEY) [User Type],
			[dbo].[fnGetUserNameByID](A.USER_ID) [User Name],B.ORG_KEY, ORG_NM 


	FROM    CLNT_ENGMT_USER_ASGN    A
	JOIN	USER_PRFL				B
	ON		A.USER_ID		  =		B.USER_ID
	JOIN	USER_APPL_ROLE			E
	ON		B.USER_ID		  =     E.USER_ID
	JOIN    APPL_ROLE				C
	ON		C.APPL_ROLE_KEY	  =     E.APPL_ROLE_KEY
	JOIN	ORG						D
	ON      B.ORG_KEY		  =     D.ORG_KEY
	WHERE   CLNT_ENGMT_CD    =		@CLNT_ENGMT_CD


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[Get_ClntRelEngmtIndenByID]...';


GO
CREATE PROCEDURE [dbo].[Get_ClntRelEngmtIndenByID]
(
      @CLNT_ENGMT_CD	VARCHAR(30)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON



	SELECT      CLNT_REL_ENGMT_ID_KEY, CLNT_ENGMT_CD,SRC_KEY,[dbo].[fnGetMasterLkpNameByID](SRC_KEY) ServiceName, 
				SRC_REL_ENGMT_ID, CREAT_DT, CREAT_USER_ID, 
				UPDT_DT, UPDT_USER_ID,ROW_STS_KEY

	FROM		CLNT_REL_ENGMT_ID
	WHERE		CLNT_ENGMT_CD                    =  @CLNT_ENGMT_CD


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Get_ClntSecurSrvcEngmtByID]...';


GO

CREATE PROCEDURE [dbo].[Get_ClntSecurSrvcEngmtByID]
(
      @CLNT_ENGMT_CD	VARCHAR(30)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

       SELECT		 A.CLNT_ENGMT_CD, A.SECUR_SRVC_CD, SRVC_ENGMT_STS_KEY, B.SECUR_SRVC_NM, A.ROW_STS_KEY, 
                     SRVC_EST_STRT_DT, SRVC_EST_END_DT, A.CREAT_DT, A.CREAT_USER_ID, A.UPDT_DT, A.UPDT_USER_ID,
                     COUNT(C.APPL_FL_UPLOAD_LOG_KEY) FileCount


       FROM          CLNT_SECUR_SRVC_ENGMT      A
       JOIN          SECUR_SRVC                 B
       ON            A.SECUR_SRVC_CD         =  B.SECUR_SRVC_CD
       LEFT JOIN     APPL_FL_UPLOAD_LOG         C
       ON            A.SECUR_SRVC_CD         =  C.SECUR_SRVC_CD
       AND           C.CLNT_ENGMT_CD         =  @CLNT_ENGMT_CD
       WHERE         A.CLNT_ENGMT_CD         =  @CLNT_ENGMT_CD
       GROUP BY      A.CLNT_ENGMT_CD, A.SECUR_SRVC_CD, SRVC_ENGMT_STS_KEY, B.SECUR_SRVC_NM, A.ROW_STS_KEY, 
                     SRVC_EST_STRT_DT, SRVC_EST_END_DT, A.CREAT_DT, A.CREAT_USER_ID, A.UPDT_DT, A.UPDT_USER_ID



END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[Get_EngageServiceByServiceID]...';


GO
CREATE PROCEDURE [dbo].[Get_EngageServiceByServiceID]
(
	@CLNT_ENGMT_CD	VARCHAR(30),
	@SECUR_SRVC_CD	VARCHAR(10),
	@USER_ID		INTEGER
	
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


SELECT A.CLNT_ENGMT_CD,A.CLNT_ENGMT_NM,A.CLNT_ORG_KEY,B.ORG_NM,C.SECUR_PKG_CD,C.SECUR_PKG_NM,E.SECUR_SRVC_CD,E.SECUR_SRVC_NM,
	   D.SRVC_EST_STRT_DT,D.SRVC_EST_END_DT,A.AGR_DT,D.FL_LCK_IND
FROM   dbo.CLNT_ENGMT		A
JOIN   dbo.ORG				B
ON	   A.CLNT_ORG_KEY	 =  B.ORG_KEY
JOIN   dbo.SECUR_PKG		C
ON	   A.SECUR_PKG_CD	 =  C.SECUR_PKG_CD
JOIN   dbo.CLNT_SECUR_SRVC_ENGMT D
ON	   A.CLNT_ENGMT_CD	 =  D.CLNT_ENGMT_CD
JOIN   dbo.SECUR_SRVC		E
ON	   D.SECUR_SRVC_CD	 =  E.SECUR_SRVC_CD
WHERE  A.CLNT_ENGMT_CD	 =  @CLNT_ENGMT_CD
AND	   E.SECUR_SRVC_CD	 =  @SECUR_SRVC_CD


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[Get_OrgDetailsByID]...';


GO
CREATE PROCEDURE [dbo].[Get_OrgDetailsByID]  
(  
 @OrgID INTEGER  
)  
AS  
BEGIN  
 DECLARE @LiCOUNT INTEGER = 0;
BEGIN TRY  
SET NOCOUNT ON  
 
SELECT @LiCOUNT= COUNT(USER_ID)  FROM USER_PRFL WHERE ORG_KEY = @OrgID GROUP BY ORG_KEY

SELECT  A.ORG_KEY,A.ROW_STS_KEY,[dbo].[fnGetMasterLkpNameByID](A.ROW_STS_KEY) OrgStatus,  
		ISNULL(A.PAR_ORG_KEY,0) PAR_ORG_KEY,A.ORG_TYP_KEY,[dbo].[fnGetMasterLkpNameByID](A.ORG_TYP_KEY) [Org Type Name],B.LKP_ENTY_NM,A.ORG_INDUS_KEY,[dbo].[fnGetMasterLkpNameByID](A.ORG_INDUS_KEY) OrgIndustry,A.ORG_NM,A.STR_ADR_1,A.STR_ADR_2,A.CTY_NM,A.ST_NM,CNTRY_NM,  
		A.PST_CD,A.ORG_DESC,A.STS_COMMT_TXT ,ISNULL([dbo].[fnGetParentOrgNameID](A.PAR_ORG_KEY),'') PAR_ORG_NM,@LiCOUNT UserCount ,A.CREAT_ORG_SCHM_IND,A.ORG_SCHM
FROM    ORG      A  
JOIN	MSTR_LKP    B  
ON		A.ORG_TYP_KEY = B.MSTR_LKP_KEY  
WHERE   A.ORG_KEY   = CASE WHEN @OrgID = 0 THEN A.ORG_KEY ELSE @OrgID END 
AND		A.ORG_KEY <>1 
ORDER BY CASE WHEN ISNULL(A.UPDT_DT,'')='' THEN A.CREAT_DT ELSE A.UPDT_DT END DESC  
  
  
END TRY  
  
BEGIN CATCH  
  
    DECLARE @ErrorNumber INT = ERROR_NUMBER();  
    DECLARE @ErrorLine INT = ERROR_LINE();  
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
    DECLARE @ErrorState INT = ERROR_STATE();  
  
    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
  END CATCH  
-- COMMIT TRANSACTION  
END
GO
PRINT N'Creating [dbo].[Get_OrgRelDetailsByID]...';


GO
--DROP PROCEDURE Get_OrgRelDetailsByID  
CREATE PROCEDURE [dbo].[Get_OrgRelDetailsByID]  
(  
 @OrgID INTEGER  
)  
AS  
BEGIN  

BEGIN TRY  
SET NOCOUNT ON  



  
SELECT  A.ORG_KEY,A.ROW_STS_KEY,CASE WHEN A.ROW_STS_KEY=1 THEN 'Active' WHEN A.ROW_STS_KEY=2 THEN 'Inactive' END OrgStatus,  
  A.PAR_ORG_KEY,A.ORG_TYP_KEY,A.ORG_INDUS_KEY,A.ORG_NM,A.STR_ADR_1,A.STR_ADR_2,A.CTY_NM,A.ST_NM,CNTRY_NM,  
  A.PST_CD,A.ORG_DESC,C.ORG_REL_ID_KEY,C.SRC_KEY,B.LKP_ENTY_NM SourceName,C.SRC_CLNT_ID
FROM    ORG      A  
JOIN ORG_REL_ID    C  
ON  A.ORG_KEY  = C.ORG_KEY  
JOIN MSTR_LKP    B  
ON  C.SRC_KEY    = B.MSTR_LKP_KEY  
WHERE   A.ORG_KEY  = @OrgID  

  
  
END TRY  
  
BEGIN CATCH  
  
    DECLARE @ErrorNumber INT = ERROR_NUMBER();  
    DECLARE @ErrorLine INT = ERROR_LINE();  
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
    DECLARE @ErrorState INT = ERROR_STATE();  
  
    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
  END CATCH  
-- COMMIT TRANSACTION  
END
GO
PRINT N'Creating [dbo].[Get_ScanFailedFiles]...';


GO
CREATE PROCEDURE [dbo].[Get_ScanFailedFiles]
(
         @PvcFlag          VARCHAR(1),
         @PiHours       INTEGER,
              @Flag               VARCHAR(1)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


IF @Flag = 'D'
BEGIN
SELECT      A.ORG_KEY,ORG_NM,CLNT_ENGMT_CD,A.SECUR_SRVC_CD,
                     A.UPLOAD_USER_ID,[dbo].[fnGetUserNameByID](A.UPLOAD_USER_ID) UploadedUser,
                     [dbo].[fnGetUserEmailByID](A.UPLOAD_USER_ID) UploadedUserEmail,
                     FL_NM,FL_FLDR_PTH,FL_COMMT,FL_UPLOAD_DT,A.APPL_FL_UPLOAD_LOG_KEY,A.FL_STS_KEY,
                     A.FL_SZ

FROM    APPL_FL_UPLOAD_LOG        A
JOIN   ORG                                      B
ON      A.ORG_KEY            =     B.ORG_KEY
JOIN   MSTR_LKP                          C
ON            C.MSTR_LKP_KEY    =        A.ROW_STS_KEY
JOIN   MSTR_LKP                          D
ON            D.MSTR_LKP_KEY         =           A.FL_STS_KEY
--JOIN MSTR_LKP                          E
--ON          E.MSTR_LKP_KEY         =           A.DOC_TYP_KEY
WHERE   C.LKP_ENTY_NM        =           'Active'
AND           D.LKP_ENTY_NM   =           'Scan in Progress'
--AND         E.LKP_ENTY_NM   =           'Data' 
AND           CASE WHEN @PvcFlag = 'M' THEN DATEDIFF(MINUTE, FL_UPLOAD_DT, GETDATE())
                     WHEN @PvcFlag = 'H' THEN DATEDIFF(HOUR, FL_UPLOAD_DT, GETDATE()) END >= @PiHours 
ORDER BY A.FL_UPLOAD_DT DESC
END

IF @Flag = 'R'
BEGIN
SELECT      A.ORG_KEY,ORG_NM,CLNT_ENGMT_CD,
                     A.CREAT_USER_ID,[dbo].[fnGetUserNameByID](A.CREAT_USER_ID) UploadedUser,
                     [dbo].[fnGetUserEmailByID](A.CREAT_USER_ID) UploadedUserEmail,
                     FL_NM,FL_FLDR_PTH,A.CREAT_DT,A.RPT_FL_UPLOAD_LOG_KEY,A.RPT_STS_KEY,
                                  A.FL_SZ,A.RPT_PUBL_DT

FROM    RPT_FL_UPLOAD_LOG        A
JOIN   ORG                                      B
ON      A.ORG_KEY            =     B.ORG_KEY
JOIN   MSTR_LKP                          C
ON            C.MSTR_LKP_KEY    =        A.ROW_STS_KEY
JOIN   MSTR_LKP                          D
ON            D.MSTR_LKP_KEY         =           A.RPT_STS_KEY
--JOIN MSTR_LKP                          E
--ON          E.MSTR_LKP_KEY         =           A.DOC_TYP_KEY
WHERE   C.LKP_ENTY_NM        =           'Active'
AND           D.LKP_ENTY_NM   =           'Scan in Progress'
--AND         E.LKP_ENTY_NM   =           'Data' 
AND           CASE WHEN @PvcFlag = 'M' THEN DATEDIFF(MINUTE, A.CREAT_DT, GETDATE())
                     WHEN @PvcFlag = 'H' THEN DATEDIFF(HOUR, A.CREAT_DT, GETDATE()) END >= @PiHours 
ORDER BY A.CREAT_DT DESC
END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[Get_UploadedFileCountByStatus]...';


GO
CREATE PROCEDURE  [dbo].[Get_UploadedFileCountByStatus]
(
      @CLNT_ENGMT_CD	VARCHAR(30),
      @SECUR_SRVC_CD	VARCHAR(10),
      @UPLOAD_USER_ID   INTEGER,
      @Status           INTEGER,
     @Flag              VARCHAR(2)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

IF @Flag = 'EL'
BEGIN
SELECT      A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,COUNT(A.APPL_FL_UPLOAD_LOG_KEY) DocCount
FROM		APPL_FL_UPLOAD_LOG        A
JOIN		MSTR_LKP                  C
ON          C.MSTR_LKP_KEY    =       A.ROW_STS_KEY
WHERE		CLNT_ENGMT_CD     =       @CLNT_ENGMT_CD
AND         A.SECUR_SRVC_CD   =       @SECUR_SRVC_CD
AND         C.LKP_ENTY_NM     =       'Active'
AND         A.FL_STS_KEY      =        @Status
GROUP BY	A.FL_STS_KEY,A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD 

END

IF @Flag = 'EA'
BEGIN

SELECT      A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,COUNT(A.APPL_FL_UPLOAD_LOG_KEY) DocCount
FROM		APPL_FL_UPLOAD_LOG        A
JOIN   ORG                                      B
ON      A.ORG_KEY            =     B.ORG_KEY
JOIN   MSTR_LKP                          C
ON            C.MSTR_LKP_KEY    =        A.ROW_STS_KEY
WHERE   CLNT_ENGMT_CD     =       @CLNT_ENGMT_CD
AND           A.SECUR_SRVC_CD        =           @SECUR_SRVC_CD
AND           C.LKP_ENTY_NM   =           'Active'
AND           A.FL_STS_KEY    =           @Status

GROUP BY A.FL_STS_KEY,A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD 


END

IF @Flag = 'PL'
BEGIN
SELECT     A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,COUNT(A.APPL_FL_UPLOAD_LOG_KEY) DocCount

FROM    APPL_FL_UPLOAD_LOG        A

JOIN   MSTR_LKP                          C
ON            C.MSTR_LKP_KEY    =        A.ROW_STS_KEY
JOIN   CLNT_ENGMT_USER_ASGN D
ON            A.CLNT_ENGMT_CD        =     D.CLNT_ENGMT_CD
JOIN   USER_PRFL                         F
ON            a.UPLOAD_USER_ID           =            F.USER_ID
CROSS APPLY dbo.FnSplit(D.SECUR_SRVC_LIST_CD,',') AS K
JOIN   USER_CLNT_SRVC_ASGN        E
ON            A.SECUR_SRVC_CD                   =      K.items
WHERE   A.CLNT_ENGMT_CD     =     @CLNT_ENGMT_CD
AND           A.SECUR_SRVC_CD        =           @SECUR_SRVC_CD
AND           F.USER_TYP_KEY             =      18
AND           A.SECUR_SRVC_CD        =     K.items      
AND           C.LKP_ENTY_NM   =           'Active'
AND           A.FL_STS_KEY    =           @Status
GROUP BY A.FL_STS_KEY,A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD 
END

IF @Flag = 'PU'
BEGIN

SELECT    A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,COUNT(A.APPL_FL_UPLOAD_LOG_KEY) DocCount

FROM    APPL_FL_UPLOAD_LOG        A

JOIN   MSTR_LKP                          C
ON            C.MSTR_LKP_KEY    =        A.ROW_STS_KEY
JOIN   CLNT_ENGMT_USER_ASGN D
ON            A.CLNT_ENGMT_CD        =     D.CLNT_ENGMT_CD
JOIN   USER_PRFL                         F
ON            a.UPLOAD_USER_ID           =            F.USER_ID
CROSS APPLY dbo.FnSplit(D.SECUR_SRVC_LIST_CD,',') AS K
JOIN   USER_CLNT_SRVC_ASGN        E
ON            A.SECUR_SRVC_CD                   =      K.items
WHERE   A.CLNT_ENGMT_CD     =     @CLNT_ENGMT_CD
AND           A.SECUR_SRVC_CD        =           @SECUR_SRVC_CD
AND           F.USER_TYP_KEY             =      18
AND           A.SECUR_SRVC_CD        =     K.items      
AND           C.LKP_ENTY_NM   =           'Active'
AND           A.FL_STS_KEY    =           @Status
GROUP BY A.FL_STS_KEY,A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD 

END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Get_UploadedFiles]...';


GO

CREATE PROCEDURE [dbo].[Get_UploadedFiles]
(
      @CLNT_ENGMT_CD VARCHAR(30),
      @SECUR_SRVC_CD VARCHAR(10),
      @UPLOAD_USER_ID      INTEGER,
      @Flag                           VARCHAR(2)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

IF @Flag = 'EL'
BEGIN
SELECT      A.ORG_KEY,ORG_NM,CLNT_ENGMT_CD,A.SECUR_SRVC_CD,
                     A.SRC_KEY,[dbo].[fnGetMasterLkpNameByID](A.SRC_KEY)SourceName,
                     A.DOC_TYP_KEY,[dbo].[fnGetMasterLkpNameByID](A.DOC_TYP_KEY) DocumentType,
                     A.UPLOAD_USER_ID,[dbo].[fnGetUserNameByID](A.UPLOAD_USER_ID) UploadedUser,
                     FL_NM,FL_FLDR_PTH,FL_COMMT,FL_UPLOAD_DT,A.APPL_FL_UPLOAD_LOG_KEY,A.FL_STS_KEY,
                     A.ETL_PROC_END_DT,A.FL_SZ

FROM		  APPL_FL_UPLOAD_LOG        A
JOIN		  ORG                                      B
ON			  A.ORG_KEY            =     B.ORG_KEY
JOIN		  MSTR_LKP                          C
ON            C.MSTR_LKP_KEY    =        A.ROW_STS_KEY
JOIN		  MSTR_LKP                          D
ON            D.MSTR_LKP_KEY         =           A.FL_STS_KEY
WHERE		  CLNT_ENGMT_CD     =       @CLNT_ENGMT_CD
AND           A.SECUR_SRVC_CD        =           @SECUR_SRVC_CD
--AND         A.UPLOAD_USER_ID  =        @UPLOAD_USER_ID
AND           C.LKP_ENTY_NM   =           'Active'
AND           D.LKP_ENTY_NM   <>   'ETL Failure' 
AND           D.LKP_ENTY_NM   <>   'Scan Failure'
ORDER BY A.FL_UPLOAD_DT DESC
END

IF @Flag = 'EA'
BEGIN

SELECT        A.ORG_KEY,ORG_NM,CLNT_ENGMT_CD,SECUR_SRVC_CD,
              A.SRC_KEY,[dbo].[fnGetMasterLkpNameByID](A.SRC_KEY)SourceName,
              A.DOC_TYP_KEY,[dbo].[fnGetMasterLkpNameByID](A.DOC_TYP_KEY) DocumentType,
              A.UPLOAD_USER_ID,[dbo].[fnGetUserNameByID](A.UPLOAD_USER_ID) UploadedUser,
              FL_NM,FL_FLDR_PTH,FL_COMMT,FL_UPLOAD_DT,A.APPL_FL_UPLOAD_LOG_KEY,
              A.FL_STS_KEY,A.ETL_PROC_END_DT,A.FL_SZ

FROM		  APPL_FL_UPLOAD_LOG        A
JOIN		  ORG                                      B
ON			  A.ORG_KEY            =     B.ORG_KEY
JOIN		  MSTR_LKP                          C
ON            C.MSTR_LKP_KEY    =        A.ROW_STS_KEY
JOIN		  MSTR_LKP                          D
ON            D.MSTR_LKP_KEY         =           A.FL_STS_KEY
WHERE		  CLNT_ENGMT_CD     =       @CLNT_ENGMT_CD
AND           A.SECUR_SRVC_CD        =           @SECUR_SRVC_CD
--AND         A.UPLOAD_USER_ID  =        @UPLOAD_USER_ID
AND           C.LKP_ENTY_NM   =           'Active'
AND           D.LKP_ENTY_NM   <>   'ETL Failure'
AND           D.LKP_ENTY_NM   <>   'Scan Failure'
ORDER BY A.FL_UPLOAD_DT DESC


END

IF @Flag = 'PL'
BEGIN
SELECT		  DISTINCT A.ORG_KEY,ORG_NM,A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,
              A.SRC_KEY,[dbo].[fnGetMasterLkpNameByID](A.SRC_KEY)SourceName,
              A.DOC_TYP_KEY,[dbo].[fnGetMasterLkpNameByID](A.DOC_TYP_KEY) DocumentType,
              A.UPLOAD_USER_ID,[dbo].[fnGetUserNameByID](A.UPLOAD_USER_ID) UploadedUser,
              FL_NM,FL_FLDR_PTH,FL_COMMT,FL_UPLOAD_DT,A.APPL_FL_UPLOAD_LOG_KEY,A.FL_STS_KEY,
              A.ETL_PROC_END_DT,A.FL_SZ

FROM		  APPL_FL_UPLOAD_LOG        A
JOIN		  ORG                                      B
ON			  A.ORG_KEY            =     B.ORG_KEY
JOIN		  MSTR_LKP                          C
ON            C.MSTR_LKP_KEY    =        A.ROW_STS_KEY
JOIN		  CLNT_ENGMT_USER_ASGN D
ON            A.CLNT_ENGMT_CD        =     D.CLNT_ENGMT_CD
JOIN		  USER_PRFL                         F
ON            a.UPLOAD_USER_ID           =            F.USER_ID
CROSS APPLY	  dbo.FnSplit(D.SECUR_SRVC_LIST_CD,',') AS K
JOIN		  USER_CLNT_SRVC_ASGN        E
ON            A.SECUR_SRVC_CD                   =      K.items
JOIN		  MSTR_LKP                          G
ON            G.MSTR_LKP_KEY         =           A.FL_STS_KEY
WHERE		  A.CLNT_ENGMT_CD     =     @CLNT_ENGMT_CD
AND           A.SECUR_SRVC_CD        =           @SECUR_SRVC_CD
AND           F.USER_TYP_KEY             =      18
AND           A.SECUR_SRVC_CD        =     K.items      
AND           C.LKP_ENTY_NM   =           'Active'
AND           G.LKP_ENTY_NM   <>   'ETL Failure'
AND           G.LKP_ENTY_NM   <>   'Scan Failure'
ORDER BY	  A.FL_UPLOAD_DT DESC
END

IF @Flag = 'PU'
BEGIN

SELECT       DISTINCT A.ORG_KEY,ORG_NM,A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,
             A.SRC_KEY,[dbo].[fnGetMasterLkpNameByID](A.SRC_KEY)SourceName,
             A.DOC_TYP_KEY,[dbo].[fnGetMasterLkpNameByID](A.DOC_TYP_KEY) DocumentType,
             A.UPLOAD_USER_ID,[dbo].[fnGetUserNameByID](A.UPLOAD_USER_ID) UploadedUser,
             FL_NM,FL_FLDR_PTH,FL_COMMT,FL_UPLOAD_DT,A.APPL_FL_UPLOAD_LOG_KEY,A.FL_STS_KEY,
             A.ETL_PROC_END_DT,A.FL_SZ

FROM		  APPL_FL_UPLOAD_LOG        A
JOIN		  ORG                                      B
ON			  A.ORG_KEY            =     B.ORG_KEY
JOIN		  MSTR_LKP                          C
ON            C.MSTR_LKP_KEY    =        A.ROW_STS_KEY
JOIN		  CLNT_ENGMT_USER_ASGN D
ON            A.CLNT_ENGMT_CD        =     D.CLNT_ENGMT_CD
JOIN		  USER_PRFL                         F
ON            a.UPLOAD_USER_ID           =            F.USER_ID
CROSS APPLY	  dbo.FnSplit(D.SECUR_SRVC_LIST_CD,',') AS K
JOIN		  USER_CLNT_SRVC_ASGN        E
ON            A.SECUR_SRVC_CD                   =      K.items
JOIN		  MSTR_LKP                          G
ON            G.MSTR_LKP_KEY         =           A.FL_STS_KEY
WHERE		  A.CLNT_ENGMT_CD     =     @CLNT_ENGMT_CD
AND           A.SECUR_SRVC_CD        =           @SECUR_SRVC_CD
AND           F.USER_TYP_KEY             =      18
AND           A.SECUR_SRVC_CD        =     K.items      
AND           C.LKP_ENTY_NM   =           'Active'
AND           G.LKP_ENTY_NM   <>   'ETL Failure'
AND           G.LKP_ENTY_NM   <>   'Scan Failure'
ORDER BY	  A.FL_UPLOAD_DT DESC

END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[Get_UploadedFileSize]...';


GO



CREATE PROCEDURE [dbo].[Get_UploadedFileSize]
(
      @FL_NM					VARCHAR(150),
	  @APPL_FL_UPLOAD_LOG_KEY	INTEGER
     
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


SELECT  A.FL_SZ,A.FL_STS_KEY,A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,A.FL_FLDR_PTH,B.ORG_NM
FROM    APPL_FL_UPLOAD_LOG				A
JOIN	ORG								B
ON		A.ORG_KEY				=		B.ORG_KEY
WHERE 	APPL_FL_UPLOAD_LOG_KEY	=		@APPL_FL_UPLOAD_LOG_KEY




END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[GetAnalystDeatilsByEngandSerID]...';


GO
/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: GetAnalystDeatilsByEngandSerID
	** Desc: This procedure is Engagement Analyst details.
	** Auth: Prasad varma
	** Date: 19/05/2016 
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    25/05/2016      xxxxx          
	*******************************/
CREATE PROCEDURE [dbo].[GetAnalystDeatilsByEngandSerID]
@CLNT_ENGMT_CD	VARCHAR(30),
@SECUR_SRVC_CD	VARCHAR(10)

AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	DISTINCT B.USER_ID AnalystID,(B.FST_NM + ' ' + B.LST_NM) [Analyst Name],
		B.EMAIL_ID [Analyst email]
		
FROM	USER_CLNT_SRVC_ASGN			A
JOIN	USER_PRFL					B
ON		B.USER_ID		=	    A.USER_ID	
WHERE	A.CLNT_ENGMT_CD	=	@CLNT_ENGMT_CD
AND		A.SECUR_SRVC_CD	=   @SECUR_SRVC_CD
AND		B.USER_TYP_KEY	= 16


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[GetAppRoleDetailsByID]...';


GO
CREATE PROCEDURE [dbo].[GetAppRoleDetailsByID]  
(  
       @APPLROLEKEY  INTEGER
)  
AS  
BEGIN  
BEGIN TRY  
SET NOCOUNT ON  


SELECT APPL_ROLE_KEY, ROW_STS_KEY, APPL_ROLE_NM, APPL_ROLE_DESC,STS_COMMT_TXT
FROM   APPL_ROLE
WHERE  APPL_ROLE_KEY = @APPLROLEKEY

 
END TRY  
  
BEGIN CATCH  
  
  
    DECLARE @ErrorNumber INT = ERROR_NUMBER();  
    DECLARE @ErrorLine INT = ERROR_LINE();  
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
    DECLARE @ErrorState INT = ERROR_STATE();  
  
    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
  END CATCH  
-- COMMIT TRANSACTION  
END
GO
PRINT N'Creating [dbo].[GetEmailIDbyUserID]...';


GO

CREATE PROCEDURE [dbo].[GetEmailIDbyUserID]
(
       @USER_ID      INTEGER               
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT EMAIL_ID,FST_NM [First Name],MIDL_NM [Middle Name],LST_NM [Last Name] 
FROM   USER_PRFL
WHERE   USER_ID = @USER_ID




END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[GetEmailNotificationByType]...';


GO
/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: GetEmailNotificationByType
	** Desc: This procedure is USED TO FETCH EMAIL NOTIFICATION DETAils by  notification type.
	** Auth: Prasad varma
	** Date: 13/4/2016
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    00/00/1999      xxxxx          
	*******************************/
CREATE PROCEDURE [dbo].[GetEmailNotificationByType](
@NTF_TYP_NM  varchar(255)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	A.NTF_MSG_KEY,A.MSG_SBJ_TXT,A.MSG_CNTN_TXT
FROM	NTF_MSG		  A
WHERE	A.NTF_TYP_NM = @NTF_TYP_NM AND A.ROW_STS_KEY	= 1

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[GetEngagementCount]...';


GO
CREATE PROCEDURE [dbo].[GetEngagementCount]  
(  
 @CLNT_ORG_KEY           INTEGER,  
 @SECUR_PKG_CD           VARCHAR(10), 
 @AGR_DT                 DATETIME 
)  
AS  
BEGIN  
BEGIN TRY  
SET NOCOUNT ON  


SELECT COUNT(1) [COUNT] FROM   CLNT_ENGMT
WHERE   SECUR_PKG_CD = @SECUR_PKG_CD
AND     REPLACE(CONVERT(VARCHAR(10),AGR_DT,112),'-','') = @AGR_DT 


END TRY  
  
BEGIN CATCH  
  
  
    DECLARE @ErrorNumber INT = ERROR_NUMBER();  
    DECLARE @ErrorLine INT = ERROR_LINE();  
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
    DECLARE @ErrorState INT = ERROR_STATE();  
  
    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
  END CATCH  
-- COMMIT TRANSACTION  
END

-- Upload procedure
GO
PRINT N'Creating [dbo].[GetEngagementduedatehaspassed]...';


GO
CREATE PROCEDURE [dbo].[GetEngagementduedatehaspassed]
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT DISTINCT A.CLNT_ENGMT_CD,D.USER_TYP_KEY,(D.FST_NM + ' ' + D.LST_NM) [Engagement Lead],D.EMAIL_ID [Engagement Lead email],
              D.USER_ID [Engagement userid],[dbo].[fnGetMasterLkpNameByID] (D.USER_TYP_KEY) [User Type]

FROM   CLNT_ENGMT                               A
JOIN   CLNT_ENGMT_USER_ASGN       B
ON            B.CLNT_ENGMT_CD                          =      A.CLNT_ENGMT_CD      
JOIN   USER_PRFL                                D
ON            D.USER_ID                                =   B.USER_ID
WHERE  DATEDIFF(DAY,CONVERT(VARCHAR(10),A.ENGMT_EST_END_DT,101),CONVERT(VARCHAR(10),GETDATE(),101)) = 1


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[GetEngagementduedateisapproachingEmail]...';


GO
/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: GetEngserveicePastDuedateEmailDeails
	** Desc: This procedure is USED TO FEATCH ENGAGEMENT ASSIGN SERVICE PASTDATE USERS LIST.
	** Auth: Prasad varma
	** Date: 19/05/2016 
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    19/05/2016      xxxxx          
	*******************************/ 

CREATE PROCEDURE [dbo].[GetEngagementduedateisapproachingEmail]
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	DISTINCT B.CLNT_ENGMT_CD,B.CLNT_ENGMT_NM,B.ENGMT_EST_END_DT,(C.FST_NM+' '+C.LST_NM) [Engagement Lead],C.EMAIL_ID[Engagement Lead Email],
		(D.FST_NM+' '+D.LST_NM) [Analyst],D.EMAIL_ID[AnalystEmail],[dbo].[fnGetMasterLkpNameByID] (C.USER_TYP_KEY) [User Type]
FROM	CLNT_ENGMT_USER_ASGN		A
JOIN	CLNT_ENGMT					B
ON		B.CLNT_ENGMT_CD = A.CLNT_ENGMT_CD
JOIN	CLNT_ENGMT_USER_ASGN		E
ON		A.CLNT_ENGMT_CD		=	E.CLNT_ENGMT_CD	
JOIN	USER_PRFL					C
ON		C.USER_ID		= A.USER_ID
JOIN	USER_PRFL					D
ON		D.USER_ID		= A.USER_ID

WHERE  DATEDIFF(DAY,CONVERT(VARCHAR(10),GETDATE(),101),CONVERT(VARCHAR(10),B.ENGMT_EST_END_DT,101)) = 15


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[GetEngagementServiceduedatehaspassedEmials]...';


GO
CREATE PROCEDURE [dbo].[GetEngagementServiceduedatehaspassedEmials]
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT DISTINCT A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,C.SECUR_SRVC_NM,B.USER_TYP_KEY [Analyst UserType] ,
              (b.FST_NM + ' ' + b.LST_NM) [Analyst],A.SRVC_EST_STRT_DT,A.SRVC_EST_END_DT,B.EMAIL_ID [Analyst Email],
              F.USER_TYP_KEY [Lead UserType],(F.FST_NM + ' ' + F.LST_NM) [Lead Name],G.ORG_NM
              

FROM   CLNT_SECUR_SRVC_ENGMT   A
JOIN   SECUR_SRVC                        C
ON            A.SECUR_SRVC_CD      = C.SECUR_SRVC_CD    
JOIN   dbo.CLNT_ENGMT_USER_ASGN   E
ON            A.CLNT_ENGMT_CD = E.CLNT_ENGMT_CD 
JOIN   USER_PRFL                         F
ON            E.USER_ID            =          F.USER_ID
JOIN   USER_CLNT_SRVC_ASGN        D
ON            A.SECUR_SRVC_CD      =             D.SECUR_SRVC_CD
AND           A.CLNT_ENGMT_CD            =   D.CLNT_ENGMT_CD
JOIN   USER_PRFL                         B
ON            D.USER_ID            =          B.USER_ID
JOIN   ORG                                                    G
ON            F.ORG_KEY                                =   G.ORG_KEY
WHERE  DATEDIFF(DAY,CONVERT(VARCHAR(10),A.SRVC_EST_END_DT,101),CONVERT(VARCHAR(10),GETDATE(),101)) = 1
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[GetEngDuedateapprochingEmailDeails]...';


GO
/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: GetEngserveicePastDuedateEmailDeails
	** Desc: This procedure is USED TO FEATCH ENGAGEMENT ASSIGN SERVICE PASTDATE USERS LIST.
	** Auth: Prasad varma
	** Date: 19/05/2016 
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    19/05/2016      xxxxx          
	*******************************/
CREATE PROCEDURE [dbo].[GetEngDuedateapprochingEmailDeails]
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	B.CLNT_ENGMT_CD,B.CLNT_ENGMT_NM,B.ENGMT_EST_END_DT,C.USER_ID,(C.FST_NM+' '+C.LST_NM) UserName,C.EMAIL_ID
FROM	CLNT_ENGMT_USER_ASGN		A
JOIN	CLNT_ENGMT					B
ON		B.CLNT_ENGMT_CD = A.CLNT_ENGMT_CD
JOIN	USER_PRFL					C
ON		C.USER_ID		= A.USER_ID
WHERE   CONVERT(VARCHAR(10),B.ENGMT_EST_END_DT,101) < DATEADD(DAY, -15,CONVERT(VARCHAR(10),GETDATE(),101))

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[GetEngmtUploadWorkList]...';


GO
CREATE PROCEDURE [dbo].[GetEngmtUploadWorkList]
(
       @PiUserID                  INTEGER,
       @OrgName                   VARCHAR(150),
       @CLNT_ENGMT_CD             VARCHAR(30),  
       @CLNT_ENGMT_NM             VARCHAR(150),
       @SECUR_SRVC_NM             VARCHAR(150),
       @STRT_DT                   VARCHAR(10),
       @END_DT                    VARCHAR(10),
       @PiUserType                INTEGER,
       @PvcFlag                   VARCHAR(1),
       @UpdatedDate				  VARCHAR(10)
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON

IF @PvcFlag = 'A' -- Analyst
BEGIN
       SELECT [Client NAME],CLNT_ORG_KEY, CLNT_ENGMT_CD,CLNT_ENGMT_NM,SECUR_SRVC_NM,SECUR_SRVC_CD,
                     FL_LCK_IND,[Start Date],[End Date],USER_ID,UpdatedDate,
                     FileCount,CREAT_DT
                     FROM(
SELECT      H.ORG_NM [Client NAME],B.CLNT_ORG_KEY, A.CLNT_ENGMT_CD,B.CLNT_ENGMT_NM,D.SECUR_SRVC_NM,D.SECUR_SRVC_CD,
                     A.FL_LCK_IND,G.USER_STRT_DT [Start Date],G.USER_END_DT [End Date],G.USER_ID,
                     MAX(J.FL_UPLOAD_DT) UpdatedDate,
                     CASE WHEN ISNULL(J.CLNT_ENGMT_CD,'')='' THEN 0 ELSE 1 END FileCount,B.CREAT_DT
       FROM   CLNT_SECUR_SRVC_ENGMT             A
       JOIN   CLNT_ENGMT                               B
       ON            A.CLNT_ENGMT_CD                   =      B.CLNT_ENGMT_CD
       AND           B.ROW_STS_KEY              =   1
       JOIN   SECUR_SRVC                               D
       ON            D.SECUR_SRVC_CD                   =      A.SECUR_SRVC_CD
       JOIN   USER_CLNT_SRVC_ASGN               G
       ON            B.CLNT_ENGMT_CD                   =      G.CLNT_ENGMT_CD
       AND           D.SECUR_SRVC_CD                   =   G.SECUR_SRVC_CD
       JOIN   ORG                                             H
       ON            H.ORG_KEY                         =      B.CLNT_ORG_KEY 
       AND           H.ROW_STS_KEY              =   1
       LEFT JOIN APPL_FL_UPLOAD_LOG             J
       ON            B.CLNT_ENGMT_CD                   =      J.CLNT_ENGMT_CD
       AND           D.SECUR_SRVC_CD                   =      J.SECUR_SRVC_CD  
       WHERE  G.USER_ID                         =   @PiUserID 
       AND           ISNULL(H.ORG_NM,'') LIKE CASE WHEN @OrgName = '' THEN  ISNULL(H.ORG_NM,'') ELSE '%' + @OrgName + '%' END
       AND           ISNULL(A.CLNT_ENGMT_CD,'') LIKE CASE WHEN @CLNT_ENGMT_CD = '' THEN   A.CLNT_ENGMT_CD ELSE '%' + @CLNT_ENGMT_CD +'%' END 
       AND           ISNULL(B.CLNT_ENGMT_NM,'') LIKE CASE WHEN @CLNT_ENGMT_NM = '' THEN   B.CLNT_ENGMT_NM ELSE '%' + @CLNT_ENGMT_NM + '%'   END    
       AND           ISNULL(D.SECUR_SRVC_NM,'') LIKE CASE WHEN @SECUR_SRVC_NM = '' THEN   D.SECUR_SRVC_NM ELSE '%' + @SECUR_SRVC_NM + '%' END
       AND           CONVERT(VARCHAR(20),G.USER_STRT_DT,101)  = CASE WHEN @STRT_DT  = '' THEN CONVERT(VARCHAR(20),G.USER_STRT_DT,101)  ELSE @STRT_DT END
       AND           CONVERT(VARCHAR(20),G.USER_END_DT,101)   = CASE WHEN @END_DT  = '' THEN CONVERT(VARCHAR(20),G.USER_END_DT,101)  ELSE @END_DT END
       GROUP BY H.ORG_NM,B.CLNT_ORG_KEY, A.CLNT_ENGMT_CD,B.CLNT_ENGMT_NM,D.SECUR_SRVC_NM,D.SECUR_SRVC_CD,
                     A.FL_LCK_IND,G.USER_STRT_DT,G.USER_END_DT,G.USER_ID,B.CREAT_DT,J.CLNT_ENGMT_CD)B
       WHERE   ISNULL(CONVERT(VARCHAR(20),UpdatedDate,101),'')    = CASE WHEN @UpdatedDate  = '' THEN ISNULL(CONVERT(VARCHAR(20),UpdatedDate,101),'')  ELSE @UpdatedDate END
       ORDER BY CASE WHEN ISNULL(UpdatedDate,'') ='' THEN CREAT_DT ELSE UpdatedDate END DESC
                           
END

IF @PvcFlag = 'E' -- Engmt Lead
BEGIN
       SELECT [Client NAME],CLNT_ORG_KEY, CLNT_ENGMT_CD,CLNT_ENGMT_NM,SECUR_SRVC_NM,SECUR_SRVC_CD,
                     FL_LCK_IND,[Start Date],[End Date],USER_ID,UpdatedDate,
                     FileCount,CREAT_DT
                     FROM
       (SELECT H.ORG_NM [Client NAME],B.CLNT_ORG_KEY, A.CLNT_ENGMT_CD,B.CLNT_ENGMT_NM,D.SECUR_SRVC_NM,D.SECUR_SRVC_CD,
                     A.FL_LCK_IND,A.SRVC_EST_STRT_DT [Start Date],A.SRVC_EST_END_DT [End Date],G.USER_ID,
                     MAX(J.FL_UPLOAD_DT) UpdatedDate,CASE WHEN ISNULL(J.CLNT_ENGMT_CD,'')='' THEN 0 ELSE 1 END FileCount,
                     B.CREAT_DT
       FROM   CLNT_SECUR_SRVC_ENGMT             A
       JOIN   CLNT_ENGMT                               B
       ON            A.CLNT_ENGMT_CD                   =      B.CLNT_ENGMT_CD
       AND           B.ROW_STS_KEY              =   1
       JOIN   SECUR_SRVC                               D
       ON            D.SECUR_SRVC_CD                   =      A.SECUR_SRVC_CD
       JOIN   CLNT_ENGMT_USER_ASGN       G
       ON            B.CLNT_ENGMT_CD                   =      G.CLNT_ENGMT_CD
       JOIN   ORG                                             H
       ON            H.ORG_KEY                         =      B.CLNT_ORG_KEY
       AND           H.ROW_STS_KEY              =   1
       LEFT JOIN APPL_FL_UPLOAD_LOG             J
       ON            B.CLNT_ENGMT_CD                   =      J.CLNT_ENGMT_CD
       AND           D.SECUR_SRVC_CD                   =      J.SECUR_SRVC_CD  
       WHERE  G.USER_ID                         =             CASE WHEN @PiUserID =0              THEN G.USER_ID ELSE @PiUserID END
       AND           ISNULL(H.ORG_NM,'')           LIKE CASE WHEN @OrgName = ''            THEN       ISNULL(H.ORG_NM,'') ELSE '%' + @OrgName +'%' END
       AND           ISNULL(A.CLNT_ENGMT_CD,'') LIKE CASE WHEN @CLNT_ENGMT_CD = '' THEN   A.CLNT_ENGMT_CD ELSE '%' + @CLNT_ENGMT_CD +'%' END 
       AND           ISNULL(B.CLNT_ENGMT_NM,'') LIKE CASE WHEN @CLNT_ENGMT_NM = '' THEN   B.CLNT_ENGMT_NM ELSE '%' + @CLNT_ENGMT_NM + '%' END      
       AND           ISNULL(D.SECUR_SRVC_NM,'') LIKE CASE WHEN @SECUR_SRVC_NM = '' THEN   D.SECUR_SRVC_NM ELSE '%' + @SECUR_SRVC_NM + '%' END
       AND           CONVERT(VARCHAR(20),A.SRVC_EST_STRT_DT,101)     = CASE WHEN @STRT_DT  = '' THEN CONVERT(VARCHAR(20),A.SRVC_EST_STRT_DT,101)  ELSE @STRT_DT END
       AND           CONVERT(VARCHAR(20),A.SRVC_EST_END_DT,101)      = CASE WHEN @END_DT  = ''  THEN CONVERT(VARCHAR(20),A.SRVC_EST_END_DT,101)  ELSE @END_DT END
       GROUP BY H.ORG_NM,B.CLNT_ORG_KEY, A.CLNT_ENGMT_CD,B.CLNT_ENGMT_NM,D.SECUR_SRVC_NM,D.SECUR_SRVC_CD,
                     A.FL_LCK_IND,A.SRVC_EST_STRT_DT,A.SRVC_EST_END_DT,G.USER_ID,B.CREAT_DT,J.CLNT_ENGMT_CD)B
       WHERE   ISNULL(CONVERT(VARCHAR(20),UpdatedDate,101),'')    = CASE WHEN @UpdatedDate  = '' THEN ISNULL(CONVERT(VARCHAR(20),UpdatedDate,101),'')  ELSE @UpdatedDate END
       ORDER BY CASE WHEN ISNULL(UpdatedDate,'') ='' THEN CREAT_DT ELSE UpdatedDate END DESC
                           
END

IF @PvcFlag = 'P' -- Partner Lead
BEGIN

       SELECT [Client NAME],CLNT_ORG_KEY, CLNT_ENGMT_CD,CLNT_ENGMT_NM,SECUR_SRVC_NM,SECUR_SRVC_CD,
                     FL_LCK_IND,[Start Date],[End Date],USER_ID,UpdatedDate,
                     FileCount,CREAT_DT
                     FROM
       (SELECT H.ORG_NM [Client NAME],B.CLNT_ORG_KEY, A.CLNT_ENGMT_CD,B.CLNT_ENGMT_NM,D.SECUR_SRVC_NM,D.SECUR_SRVC_CD,
                     A.FL_LCK_IND,A.SRVC_EST_STRT_DT [Start Date],A.SRVC_EST_END_DT [End Date],G.USER_ID,
                     MAX(J.FL_UPLOAD_DT) UpdatedDate,CASE WHEN ISNULL(J.CLNT_ENGMT_CD,'')='' THEN 0 ELSE 1 END FileCount,
                     B.CREAT_DT
       FROM   CLNT_SECUR_SRVC_ENGMT             A
       JOIN   CLNT_ENGMT                               B
       ON            A.CLNT_ENGMT_CD                   =      B.CLNT_ENGMT_CD
       AND           B.ROW_STS_KEY              =   1
       JOIN   SECUR_SRVC                               D
       ON            D.SECUR_SRVC_CD                   =      A.SECUR_SRVC_CD
       JOIN   CLNT_ENGMT_USER_ASGN       G
       ON            B.CLNT_ENGMT_CD                   =      G.CLNT_ENGMT_CD
       JOIN   ORG                                             H
       ON            H.ORG_KEY                         =      B.CLNT_ORG_KEY
       AND           H.ROW_STS_KEY              =   1
       CROSS APPLY dbo.FnSplit(G.SECUR_SRVC_LIST_CD,',') AS K
       LEFT JOIN APPL_FL_UPLOAD_LOG             J
       ON            B.CLNT_ENGMT_CD                   =      J.CLNT_ENGMT_CD
       AND           D.SECUR_SRVC_CD                   =      J.SECUR_SRVC_CD  
       WHERE  G.USER_ID                         =      @PiUserID
       AND           D.SECUR_SRVC_CD                   =   K.items
       AND           ISNULL(H.ORG_NM,'')           LIKE CASE WHEN @OrgName = ''            THEN       ISNULL(H.ORG_NM,'') ELSE '%' + @OrgName +'%' END
       AND           ISNULL(A.CLNT_ENGMT_CD,'') LIKE CASE WHEN @CLNT_ENGMT_CD = '' THEN   A.CLNT_ENGMT_CD ELSE '%' + @CLNT_ENGMT_CD +'%' END 
       AND           ISNULL(B.CLNT_ENGMT_NM,'') LIKE CASE WHEN @CLNT_ENGMT_NM = '' THEN   B.CLNT_ENGMT_NM ELSE '%' + @CLNT_ENGMT_NM + '%' END      
       AND           ISNULL(D.SECUR_SRVC_NM,'') LIKE CASE WHEN @SECUR_SRVC_NM = '' THEN   D.SECUR_SRVC_NM ELSE '%' + @SECUR_SRVC_NM + '%' END
       AND           CONVERT(VARCHAR(20),A.SRVC_EST_STRT_DT,101)     = CASE WHEN @STRT_DT  = '' THEN CONVERT(VARCHAR(20),A.SRVC_EST_STRT_DT,101)  ELSE @STRT_DT END
       AND           CONVERT(VARCHAR(20),A.SRVC_EST_END_DT,101)      = CASE WHEN @END_DT  = ''  THEN CONVERT(VARCHAR(20),A.SRVC_EST_END_DT,101)  ELSE @END_DT END
       GROUP BY H.ORG_NM,B.CLNT_ORG_KEY, A.CLNT_ENGMT_CD,B.CLNT_ENGMT_NM,D.SECUR_SRVC_NM,D.SECUR_SRVC_CD,
                     A.FL_LCK_IND,A.SRVC_EST_STRT_DT,A.SRVC_EST_END_DT,G.USER_ID,B.CREAT_DT,J.CLNT_ENGMT_CD)B
       WHERE   ISNULL(CONVERT(VARCHAR(20),UpdatedDate,101),'')    = CASE WHEN @UpdatedDate  = '' THEN ISNULL(CONVERT(VARCHAR(20),UpdatedDate,101),'')  ELSE @UpdatedDate END
       ORDER BY CASE WHEN ISNULL(UpdatedDate,'') ='' THEN CREAT_DT ELSE UpdatedDate END DESC
                           
END


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[GetEngserveicePastDuedateEmailDeails]...';


GO
/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: GetEngserveicePastDuedateEmailDeails
	** Desc: This procedure is USED TO FEATCH ENGAGEMENT ASSIGN SERVICE PASTDATE USERS LIST.
	** Auth: Prasad varma
	** Date: 19/05/2016 
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    19/05/2016      xxxxx          
	*******************************/
CREATE PROCEDURE [dbo].[GetEngserveicePastDuedateEmailDeails]
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	A.USER_CLNT_SRVC_ASGN_KEY,A.USER_ID,(B.FST_NM+' '+B.LST_NM) UserName,B.EMAIL_ID,C.SECUR_SRVC_NM,A.SECUR_SRVC_CD,
		A.CLNT_ENGMT_CD
FROM	USER_CLNT_SRVC_ASGN		A
JOIN	USER_PRFL				B
ON		A.USER_ID		=	B.USER_ID
JOIN	SECUR_SRVC				C
ON		A.SECUR_SRVC_CD	= C.SECUR_SRVC_CD	 
WHERE	CONVERT(VARCHAR(10),A.USER_END_DT,101) < CONVERT(VARCHAR(10),GETDATE(),101)
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[GetEntityIDByName]...';


GO

CREATE PROCEDURE [dbo].[GetEntityIDByName]
(
	@EntityType		VARCHAR(30),
	@EntityName     VARCHAR(30)


		
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	MSTR_LKP_KEY	
FROM	MSTR_LKP
WHERE	LKP_ENTY_TYP_NM = @EntityType
AND		LKP_ENTY_NM		= @EntityName	



END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[GetLeadDeatilsByEngandSerID]...';


GO
/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: GetLeadDeatilsByEngandSerID
	** Desc: This procedure is Engagement Lead details.
	** Auth: Prasad varma
	** Date: 19/05/2016 
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    25/05/2016      xxxxx          
	*******************************/
CREATE PROCEDURE [dbo].[GetLeadDeatilsByEngandSerID]
@CLNT_ENGMT_CD	VARCHAR(30)

AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	C.USER_ID [Engagment LeadID],(C.FST_NM + ' ' + C.LST_NM) [Engagement Lead Name],dbo.fnGetMasterLkpNameByID(C.USER_TYP_KEY) UserType,C.EMAIL_ID [Engagement Lead email]
		
FROM	CLNT_ENGMT_USER_ASGN		A
JOIN	USER_PRFL					C
ON		C.USER_ID		=	    A.USER_ID	
WHERE	A.CLNT_ENGMT_CD	=	@CLNT_ENGMT_CD


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[GetLockallservicemail]...';


GO
/******************************
       ** File: IRMaaSAdmin.SQL   
       ** Name: GetLockallservicemail
       ** Desc: This procedure is The file for all services of engagement Uplodaed and services locked.
       ** Auth: Prasad varma
       ** Date: 27/05/2016 
       **************************
       ** Change History
       **************************
       ** PR   Date          Author                  Description     
       ** --   --------        -------                ------------------------------------
       ** 1    xx/xx/xxxx      xxxxx          
       *******************************/
CREATE PROCEDURE [dbo].[GetLockallservicemail]
@CLNT_ENGMT_CD       VARCHAR(30)

AS
BEGIN
BEGIN TRY 
SET NOCOUNT ON

DECLARE @SRVCOUNT INTEGER = 0
DECLARE @LOCKCOUNT INTEGER = 0


SELECT @SRVCOUNT =COUNT(CLNT_ENGMT_CD) FROM [dbo].[CLNT_SECUR_SRVC_ENGMT] WHERE CLNT_ENGMT_CD=@CLNT_ENGMT_CD

SELECT @LOCKCOUNT =COUNT(FL_LCK_IND) FROM CLNT_SECUR_SRVC_ENGMT WHERE CLNT_ENGMT_CD=@CLNT_ENGMT_CD AND FL_LCK_IND=1

IF @SRVCOUNT = @LOCKCOUNT
BEGIN

SELECT 1 AS RETVAL

--SELECT C.USER_ID [Engagment LeadID],(C.FST_NM + ' ' + C.LST_NM) [Engagement Lead Name],dbo.fnGetMasterLkpNameByID(C.USER_TYP_KEY),C.EMAIL_ID [[Engagement Lead email]
              
--FROM   CLNT_SECUR_SRVC_ENGMT      A
--JOIN   CLNT_ENGMT_USER_ASGN       B
--ON            A.CLNT_ENGMT_CD      =                    B.CLNT_ENGMT_CD
--JOIN   USER_PRFL                   C
--ON            C.USER_ID            =                    B.USER_ID    
--WHERE  A.CLNT_ENGMT_CD      =                    @CLNT_ENGMT_CD

END

IF @SRVCOUNT <> @LOCKCOUNT
BEGIN

SELECT 0 AS RETVAL



END
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[GetOrgSchmaLogByID]...';


GO
CREATE PROCEDURE [dbo].[GetOrgSchmaLogByID]
(
	@ORG_KEY	INTEGER

)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT		TOP 1 ORG_KEY,CREAT_DT,CLNT_SCHM_LOG_KEY,ERR_DESC,SCHM_STS_DESC
FROM		CLNT_SCHM_LOG
WHERE		ORG_KEY = @ORG_KEY
ORDER BY	CLNT_SCHM_LOG_KEY DESC

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[GetSchmaByEngmtCD]...';


GO
CREATE PROCEDURE [dbo].[GetSchmaByEngmtCD]
(
       @CLNT_ENGMT_CD            VARCHAR(20)
       
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON


              SELECT        A.CLNT_ENGMT_CD,D.ORG_KEY,D.ORG_SCHM
              FROM			CLNT_ENGMT              A
			  JOIN			ORG						D
			  ON			A.CLNT_ORG_KEY		 =	D.ORG_KEY
              WHERE			A.CLNT_ENGMT_CD		 =  @CLNT_ENGMT_CD
              AND           A.ROW_STS_KEY		 =  1
			  AND			D.ROW_STS_KEY		 =  1
             

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[GetUserDetailsByID]...';


GO
CREATE PROCEDURE [dbo].[GetUserDetailsByID]  
(  
       @UserID  INTEGER 
)  
AS  
BEGIN  
BEGIN TRY  
SET NOCOUNT ON  

  
SELECT A.[USER_ID] ID,USER_TYP_KEY,dbo.fnGetMasterLkpNameByID(USER_TYP_KEY) [User Type],B.ORG_NM [Organization Name],
	   A.ORG_KEY,FST_NM [First Name],MIDL_NM [Middle Name],LST_NM [Last Name],JOB_TITL_NM [Job Title],EMAIL_ID [EMAIL ID],
	   TEL_NBR [Phone Number],dbo.fnGetMasterLkpNameByID(A.ROW_STS_KEY)[Status], A.STS_COMMT_TXT,A.ROW_STS_KEY	
	     
FROM   USER_PRFL			 A
JOIN   ORG					 B
ON	   A.ORG_KEY		   = B.ORG_KEY
WHERE  A.[USER_ID]         = @UserID 
ORDER BY CASE WHEN ISNULL(A.UPDT_DT,'')='' THEN A.CREAT_DT ELSE A.UPDT_DT END DESC  
END TRY  
  
BEGIN CATCH  
  
  
    DECLARE @ErrorNumber INT = ERROR_NUMBER();  
    DECLARE @ErrorLine INT = ERROR_LINE();  
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
    DECLARE @ErrorState INT = ERROR_STATE();  
  
    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
  END CATCH  
-- COMMIT TRANSACTION  
END
GO
PRINT N'Creating [dbo].[GetUserDetailsByName]...';


GO
CREATE PROCEDURE [dbo].[GetUserDetailsByName]
(
       @UserID  VARCHAR(150)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT A.USER_ID,A.ORG_KEY,A.USER_TYP_KEY,[dbo].[fnGetMasterLkpNameByID](A.USER_TYP_KEY) USER_TYPE,
	   A.ROW_STS_KEY,A.FST_NM,A.LST_NM,A.MIDL_NM,A.JOB_TITL_NM,A.EMAIL_ID,A.TEL_NBR,A.LCK_IND,
	   A.LOGIN_ATMPT_CNT,A.LST_LOGIN_DT,A.PSWD_RSET_DT,A.CREAT_DT,A.USER_VERF_IND,MAC_ADR_NM,
	   B.ROW_STS_KEY ORG_STS_KEY,B.ORG_NM,B.ORG_SCHM 
FROM   USER_PRFL	  A
JOIN    ORG           B
ON      A.ORG_KEY   = B.ORG_KEY 
WHERE  A.EMAIL_ID   = @UserID
END TRY

BEGIN CATCH


    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[GetUserPermissionsByName]...';


GO
CREATE PROCEDURE [dbo].[GetUserPermissionsByName]
(
       @UserKey  INTEGER
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

      SELECT A.PERMSN_KEY,A.PERMSN_NM,A.PERMSN_DESC,A.DSPL_TXT,C.CHLD_XST_IND,A.SEQ_ORDR,
             D.PERMSN_KEY ModuleID,D.PERMSN_NM ModuleName,C.PERMSN_KEY MenuID,C.PERMSN_NM MenuName,
             B.PERMSN_KEY SubmenuID,B.PERMSN_NM SubmenuName
      FROM   PERMSN                 A
      JOIN   PERMSN_GRP_ASSOC       E
      ON     A.PERMSN_KEY         = E.PERMSN_KEY
      JOIN   PERMSN                 B
      ON     E.SUB_MNU_ID         = B.PERMSN_KEY
      AND     B.PERMSN_TYP_KEY     = 6
      JOIN   PERMSN                 C
      ON     E.MNU_ID             = C.PERMSN_KEY
      AND    C.PERMSN_TYP_KEY     = 5
      JOIN   PERMSN                 D
      ON     E.MDUL_ID            = D.PERMSN_KEY
      AND    D.PERMSN_TYP_KEY     = 4
      JOIN   APPL_ROLE_PERMSN_GRP   F
      ON     E.PERMSN_GRP_KEY     = F.PERMSN_GRP_KEY
      AND     F.ROW_STS_KEY               = 1
      JOIN   USER_APPL_ROLE         G
      ON     F.APPL_ROLE_KEY      = G.APPL_ROLE_KEY
      AND     G.ROW_STS_KEY               = 1
         JOIN   APPL_ROLE                       H
      ON     H.APPL_ROLE_KEY      = G.APPL_ROLE_KEY
      AND     G.ROW_STS_KEY               = 1
         AND  H.ROW_STS_KEY               = 1
         JOIN PERMSN_GRP                       I
         ON   E.PERMSN_GRP_KEY      = I.PERMSN_GRP_KEY
         AND  I.ROW_STS_KEY               = 1
      WHERE  A.ROW_STS_KEY        = 1
         AND  E.ROW_STS_KEY               = 1
      AND    G.USER_ID            = @UserKey
      ORDER BY  C.PERMSN_KEY,B.PERMSN_KEY,A.SEQ_ORDR

END TRY

BEGIN CATCH
    IF @@TRANCOUNT > 0
    ROLLBACK TRANSACTION;

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[GetUserRolenamesByID]...';


GO
CREATE PROCEDURE [dbo].[GetUserRolenamesByID]  
(  
       @UserID  INTEGER
)  
AS  
BEGIN  
BEGIN TRY  
SET NOCOUNT ON  


SELECT D.APPL_ROLE_KEY,D.[APPL_ROLE_NM]
FROM   USER_APPL_ROLE	     C
JOIN   [APPL_ROLE]			 D
ON	   C.APPL_ROLE_KEY     = D.APPL_ROLE_KEY
WHERE  C.[USER_ID]	       = @UserID
  
  
END TRY  
  
BEGIN CATCH  
  
  
    DECLARE @ErrorNumber INT = ERROR_NUMBER();  
    DECLARE @ErrorLine INT = ERROR_LINE();  
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
    DECLARE @ErrorState INT = ERROR_STATE();  
  
    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
  END CATCH  
-- COMMIT TRANSACTION  
END
GO
PRINT N'Creating [dbo].[GetUserSecurityDetailsByName]...';


GO
--DROP PROCEDURE GetUserSecurityDetailsByName
CREATE PROCEDURE [dbo].[GetUserSecurityDetailsByName]
(
       @UserID  INTEGER
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT USER_SECUR_DTL_KEY,[dbo].[fnGetMasterLkpNameByID](SECUR_QUES_KEY) SECUR_QUES,
	   SECUR_QUES_KEY,ANS_TXT,SEQ_ORDR_NBR
FROM   USER_SECUR_DTL
WHERE  USER_ID                           = @UserID

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[GetUserSessLogByID]...';


GO
/******************************
       ** File: IRMaaSAdmin.SQL   
       ** Name: GetUserSessLogByID
       ** Desc: This procedure fetch data from USER_SESS_LOG table
       ** Auth: Prasad varma
       ** Date: 22/4/2016
       **************************
       ** Change History
       **************************
       ** PR   Date          Author                  Description     
       ** --   --------        -------                ------------------------------------
       ** 1    00/00/1999      xxxxx          
       *******************************/


CREATE PROCEDURE [dbo].[GetUserSessLogByID]  
(  
       @EMAIL_ID  VARCHAR(150) 
)  
AS  
BEGIN  
BEGIN TRY  
SET NOCOUNT ON  

  
	SELECT USER_SESS_INFO_KEY,USER_ID,EMAIL_ID,SESS_ID,LST_ACT_DT          
	FROM   dbo.USER_SESS_LOG
	WHERE  EMAIL_ID = @EMAIL_ID  


END TRY  
  
BEGIN CATCH  
  
  
    DECLARE @ErrorNumber INT = ERROR_NUMBER();  
    DECLARE @ErrorLine INT = ERROR_LINE();  
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
    DECLARE @ErrorState INT = ERROR_STATE();  
  
    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
  END CATCH  
-- COMMIT TRANSACTION  
END
GO
PRINT N'Creating [dbo].[INS_APPL_FL_UPLOAD_LOG]...';


GO

  
 CREATE PROCEDURE [dbo].[INS_APPL_FL_UPLOAD_LOG](      
 @ROW_STS_KEY            INTEGER,  
 @ORG_KEY				 INTEGER,
 @CLNT_ENGMT_CD          VARCHAR(30),  
 @SECUR_SRVC_CD          VARCHAR(10),
 @SRC_KEY				 INTEGER,  
 @DOC_TYP_KEY            INTEGER,
 @UPLOAD_USER_ID         INTEGER,
 @FL_NM					 VARCHAR(150),
 @FL_FLDR_PTH			 VARCHAR(500),  
 @FL_COMMT				 VARCHAR(1000),
 @FL_STS_KEY			 INTEGER,
 @FL_SZ					 VARCHAR(100)
 
   
 )  
 AS  
 BEGIN  
  BEGIN TRY  
  
  SET NOCOUNT ON  
  
      
   INSERT APPL_FL_UPLOAD_LOG(ROW_STS_KEY,ORG_KEY,CLNT_ENGMT_CD,SECUR_SRVC_CD,
   SRC_KEY,DOC_TYP_KEY,UPLOAD_USER_ID,FL_NM,FL_FLDR_PTH,FL_COMMT,FL_UPLOAD_DT,FL_STS_KEY,CREAT_USER_ID,CREAT_DT,FL_SZ) VALUES  
   (@ROW_STS_KEY,@ORG_KEY,@CLNT_ENGMT_CD,@SECUR_SRVC_CD,
   @SRC_KEY,@DOC_TYP_KEY,@UPLOAD_USER_ID,@FL_NM,@FL_FLDR_PTH,@FL_COMMT,GETDATE(),@FL_STS_KEY,@UPLOAD_USER_ID,GETDATE(),@FL_SZ)  
  
    SELECT SCOPE_IDENTITY() AS RETVAL
  
  END TRY  
  
  BEGIN CATCH  
  
  
   DECLARE @ErrorNumber INT = ERROR_NUMBER();  
   DECLARE @ErrorLine INT = ERROR_LINE();  
   DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
   DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
   DECLARE @ErrorState INT = ERROR_STATE();  
  
   PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
   PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
   RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
    END CATCH  
    
 END
GO
PRINT N'Creating [dbo].[INS_APPL_ROLE]...';


GO
/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: INS_APPL_ROLE
	** Desc: This procedure insert data into APPL_ROLE table
	** Auth: Prasad varma
	** Date: 13/4/2016
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    00/00/1999      xxxxx          
	*******************************/

	CREATE PROCEDURE [dbo].[INS_APPL_ROLE](
	@ROW_STS_KEY          INTEGER,
	@APPL_ROLE_NM         VARCHAR(100),
	@APPL_ROLE_DESC       VARCHAR(1000),
	@CREAT_USER_ID        INTEGER,
	@STS_COMMT_TXT		   TEXT  


	)
	AS
	BEGIN
		BEGIN TRY

		SET NOCOUNT ON

			INSERT APPL_ROLE(ROW_STS_KEY,APPL_ROLE_NM, APPL_ROLE_DESC, CREAT_DT,CREAT_USER_ID, UPDT_DT, UPDT_USER_ID,STS_COMMT_TXT ) VALUES
			(@ROW_STS_KEY,@APPL_ROLE_NM,@APPL_ROLE_DESC,GETDATE() ,@CREAT_USER_ID,GETDATE() ,@CREAT_USER_ID,@STS_COMMT_TXT)

			SELECT SCOPE_IDENTITY() AS RETVAL

		END TRY

		BEGIN CATCH
			

			DECLARE @ErrorNumber INT = ERROR_NUMBER();
			DECLARE @ErrorLine INT = ERROR_LINE();
			DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
			DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
			DECLARE @ErrorState INT = ERROR_STATE();

			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

			RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
		  END CATCH
		
	END;
GO
PRINT N'Creating [dbo].[INS_APPL_ROLE_PERMSN_GRP]...';


GO
CREATE PROCEDURE [dbo].[INS_APPL_ROLE_PERMSN_GRP](
	
	@APPL_ROLE_KEY				INTEGER,
	@PERMSN_GRP_KEY				INTEGER,
	@ROW_STS_KEY				INTEGER,
	@CREAT_USER_ID				INTEGER,
	@FLAG						CHAR(1)
	

	)
	AS
	BEGIN
	BEGIN TRY
	SET NOCOUNT ON
		    
		    IF @FLAG = 'I'
            BEGIN

			INSERT APPL_ROLE_PERMSN_GRP(APPL_ROLE_KEY,PERMSN_GRP_KEY,ROW_STS_KEY,CREAT_USER_ID,CREAT_DT) VALUES
			(@APPL_ROLE_KEY,@PERMSN_GRP_KEY,@ROW_STS_KEY,@CREAT_USER_ID,GETDATE())
			
			SELECT SCOPE_IDENTITY() AS RETVAL
			
			END
            
            IF @FLAG = 'D'
            
            BEGIN 
			
			DELETE FROM APPL_ROLE_PERMSN_GRP WHERE APPL_ROLE_KEY = @APPL_ROLE_KEY
			
			SELECT @@ROWCOUNT RETVAL
                  
            END

		END TRY

		BEGIN CATCH
			

			DECLARE @ErrorNumber INT = ERROR_NUMBER();
			DECLARE @ErrorLine INT = ERROR_LINE();
			DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
			DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
			DECLARE @ErrorState INT = ERROR_STATE();

			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

			RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);

		  END CATCH
		
	END
GO
PRINT N'Creating [dbo].[INS_CLNT_ENGMT]...';


GO
/******************************  
 ** File: IRMaaSAdmin.SQL     
 ** Name: INS_CLNT_ENGMT  
 ** Desc: This procedure insert data into CLNT_ENGMT table  
 ** Auth: Prasad varma  
 ** Date: 27/4/2016  
 **************************  
 ** Change History  
 **************************  
 -- ALTER SECUR_PKG_KEY integer name and data type changed
   as SECUR_PKG_CD varchar(10)

** PR   Date         Author                  Description   
 ** --   --------        -------                ------------------------------------  
 ** 1    00/00/1999      xxxxx            
 *******************************/  
  
 CREATE PROCEDURE [dbo].[INS_CLNT_ENGMT](      
 @CLNT_ORG_KEY           INTEGER,  
 @SECUR_PKG_CD           VARCHAR(10),  
 @ENGMT_STS_KEY          INTEGER,  
 @ROW_STS_KEY            INTEGER,  
 @CLNT_ENGMT_CD          VARCHAR(30),  
 @CLNT_ENGMT_NM          VARCHAR(150),  
 @AGR_DT                 DATETIME,  
 @ENGMT_STRT_DT          DATETIME,     
 @ENGMT_EST_END_DT       DATETIME,    
 @CLNT_ENGMT_DESC        VARCHAR(1000), 
 @ENGMT_COMMT             TEXT,
 @CREAT_USER_ID          INTEGER
   
 )  
 AS  
 BEGIN  
  BEGIN TRY  
  
  SET NOCOUNT ON  
  
    
  
   INSERT CLNT_ENGMT(CLNT_ORG_KEY,SECUR_PKG_CD,ENGMT_STS_KEY,ROW_STS_KEY,CLNT_ENGMT_CD,CLNT_ENGMT_NM,AGR_DT,
   ENGMT_STRT_DT,ENGMT_EST_END_DT,CLNT_ENGMT_DESC,ENGMT_COMMT,CREAT_DT,CREAT_USER_ID) VALUES  
   (@CLNT_ORG_KEY,@SECUR_PKG_CD,@ENGMT_STS_KEY,@ROW_STS_KEY,@CLNT_ENGMT_CD,@CLNT_ENGMT_NM,@AGR_DT,
   @ENGMT_STRT_DT,@ENGMT_EST_END_DT,@CLNT_ENGMT_DESC,@ENGMT_COMMT,GETDATE(),@CREAT_USER_ID)  
  
    SELECT @@ROWCOUNT AS RETVAL 
  
  END TRY  
  
  BEGIN CATCH  
  
  
   DECLARE @ErrorNumber INT = ERROR_NUMBER();  
   DECLARE @ErrorLine INT = ERROR_LINE();  
   DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
   DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
   DECLARE @ErrorState INT = ERROR_STATE();  
  
   PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
   PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
   RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
    END CATCH  
    
 END
GO
PRINT N'Creating [dbo].[INS_CLNT_ENGMT_USER_ASGN]...';


GO

/******************************
       ** File: IRMaaSAdmin.SQL   
       ** Name: INS_CLNT_ENGMT_USER_ASGN
       ** Desc: This procedure insert data into CLNT_ENGMT_USER_ASGN table
       ** Auth: Prasad varma
       ** Date: 20/4/2016
       **************************
       ** Change History
       **************************
       ** PR   Date          Author                  Description     
       ** --   --------        -------                ------------------------------------
       ** 1    00/00/1999      xxxxx          

       **************************************/

       CREATE PROCEDURE [dbo].[INS_CLNT_ENGMT_USER_ASGN](
       @ROW_STS_KEY           INTEGER,
       @CLNT_ENGMT_CD         VARCHAR(30),
       @USER_ID               INTEGER,
	   @SRV_LST_CD			  VARCHAR(150), 
       @CREAT_USER_ID         INTEGER
       
       )

       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON

                  INSERT CLNT_ENGMT_USER_ASGN(ROW_STS_KEY,CLNT_ENGMT_CD ,USER_ID,SECUR_SRVC_LIST_CD,CREAT_DT,CREAT_USER_ID) VALUES
                     (@ROW_STS_KEY,@CLNT_ENGMT_CD,@USER_ID,@SRV_LST_CD,GETDATE(),@CREAT_USER_ID)

                      SELECT @@ROWCOUNT AS RETVAL 

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[INS_CLNT_REL_ENGMT_INDENTIFIER]...';


GO
/******************************  
 ** File: IRMaaSAdmin.SQL     
 ** Name: INS_CLNT_REL_ENGMT_INDENTIFIER  
 ** Desc: This procedure insert data into CLNT_REL_ENGMT_INDENTIFIER table  \ source system insert
 ** Auth: Prasad varma  
 ** Date: 27/4/2016  
 **************************  
 ** Change History  
 **************************  
 ** PR   Date         Author                  Description   
 ** --   --------        -------                ------------------------------------  
 ** 1    00/00/1999      xxxxx            
 *******************************/  
  
 CREATE PROCEDURE [dbo].[INS_CLNT_REL_ENGMT_INDENTIFIER](  
 @CLNT_ENGMT_CD         VARCHAR(30),  
 @SRC_KEY                INTEGER,  
 @SRC_REL_ENGMT_ID       VARCHAR(150),  
 @CREAT_USER_ID          INTEGER
   
 )  
 AS  
 BEGIN  
  BEGIN TRY  
  
  SET NOCOUNT ON  
  
    
  
   INSERT CLNT_REL_ENGMT_ID(CLNT_ENGMT_CD,ROW_STS_KEY,SRC_KEY,SRC_REL_ENGMT_ID,CREAT_DT, CREAT_USER_ID) VALUES  
   (@CLNT_ENGMT_CD,1,@SRC_KEY,@SRC_REL_ENGMT_ID,GETDATE(),@CREAT_USER_ID)  
  
    SELECT @@ROWCOUNT AS RETVAL  
  
  END TRY  
  
  BEGIN CATCH  
  
  
   DECLARE @ErrorNumber INT = ERROR_NUMBER();  
   DECLARE @ErrorLine INT = ERROR_LINE();  
   DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
   DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
   DECLARE @ErrorState INT = ERROR_STATE();  
  
   PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
   PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
   RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
    END CATCH  
    
 END
GO
PRINT N'Creating [dbo].[INS_CLNT_SECUR_SRVC_ENGMT]...';


GO

       /******************************  
 ** File: IRMaaSAdmin.SQL     
 ** Name: INS_CLNT_SECUR_SRVC_ENGMT  
 ** Desc: This procedure insert data into CLNT_SECUR_SRVC_ENGMT table  
 ** Auth: Prasad varma  
 ** Date: 27/4/2016  
 **************************  
 ** Change History  
 **************************  
 ** PR   Date         Author                  Description   
 ** --   --------        -------                ------------------------------------  
 ** 1    00/00/1999      xxxxx            
 *******************************/  
  
 CREATE PROCEDURE [dbo].[INS_CLNT_SECUR_SRVC_ENGMT](  
 @CLNT_ENGMT_CD         VARCHAR(30),  
 @SECUR_SRVC_CD         VARCHAR(10), 
 @SRVC_ENGMT_STS_KEY    INTEGER,  
 @ROW_STS_KEY           INTEGER,   
 @SRVC_EST_STRT_DT      DATETIME,
 @SRVC_EST_END_DT       DATETIME,
 @FL_LCK_IND			INTEGER,
 @CREAT_USER_ID         INTEGER
   
 )  
 AS  
 BEGIN  
  BEGIN TRY  
  
  SET NOCOUNT ON  
  
    
  
   INSERT CLNT_SECUR_SRVC_ENGMT(CLNT_ENGMT_CD,SECUR_SRVC_CD,SRVC_ENGMT_STS_KEY,ROW_STS_KEY,
    SRVC_EST_STRT_DT,SRVC_EST_END_DT,CREAT_DT,FL_LCK_IND,CREAT_USER_ID) VALUES  
   (@CLNT_ENGMT_CD,@SECUR_SRVC_CD,@SRVC_ENGMT_STS_KEY,@ROW_STS_KEY,
    @SRVC_EST_STRT_DT,@SRVC_EST_END_DT,GETDATE(),@FL_LCK_IND,@CREAT_USER_ID ) 
  
    SELECT @@ROWCOUNT AS RETVAL  
  
  END TRY  
  
  BEGIN CATCH  
  
  
   DECLARE @ErrorNumber INT = ERROR_NUMBER();  
   DECLARE @ErrorLine INT = ERROR_LINE();  
   DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
   DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
   DECLARE @ErrorState INT = ERROR_STATE();  
  
   PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
   PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
   RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
    END CATCH  
    
 END
GO
PRINT N'Creating [dbo].[INS_EngagementAssignUsers]...';


GO

  
/******************************  
 ** File: IRMaaSAdmin.SQL     
 ** Name: INS_EngagementAssignUsers  
 ** Desc: This procedure insert data into CLNT_ENGMT_USER_ASGN table  
 ** Auth: Prasad varma  
 ** Date: 27/4/2016  
 **************************  
 ** Change History  
 **************************  
 ** PR   Date         Author                  Description   
 ** --   --------        -------                ------------------------------------  
 ** 1    00/00/1999      xxxxx            
 *******************************/  
  
 CREATE PROCEDURE [dbo].[INS_EngagementAssignUsers](  
 @CLNT_ENGMT_CD          VARCHAR(30),  
 @USER_ID                INTEGER,  
 @APPL_ROLE_KEY          INTEGER,  
 @CREAT_USER_ID          INTEGER
   
 )  
 AS  
 BEGIN  
  BEGIN TRY  
  
  SET NOCOUNT ON  
  
    
  
   INSERT CLNT_ENGMT_USER_ASGN(CLNT_ENGMT_CD,USER_ID,CREAT_DT,CREAT_USER_ID) VALUES  
   (@CLNT_ENGMT_CD,@USER_ID,GETDATE(),@CREAT_USER_ID)  
  
    SELECT @@ROWCOUNT AS RETVAL 
  
  END TRY  
  
  BEGIN CATCH  
  
  
   DECLARE @ErrorNumber INT = ERROR_NUMBER();  
   DECLARE @ErrorLine INT = ERROR_LINE();  
   DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
   DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
   DECLARE @ErrorState INT = ERROR_STATE();  
  
   PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
   PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
   RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
    END CATCH  
    
 END
GO
PRINT N'Creating [dbo].[INS_ETL_AUD_LOG]...';


GO

/******************************
	** Desc: 
	** Auth: GM
	** Date: 06/07/2014
	**************************
	** Change History
	**************************
	**  Date	        Author                  Description	
	**  --------        GM                ------------------------------------
	**************************************/

/*
EXEC [dbo].[INS_ETL_AUD_LOG]    
 @JOB_NM         = 'Load_CISCO_PEN_TST_STG'
 ,@JOB_STRT_DT         = NULL
 ,@JOB_END_DT         = NULL
 ,@JOB_STS       = 'IN PROGRESS'
 ,@SRC_FL_NM       = 'optum_example_csv_output.csv'
 ,@SRC_FL_FLDR_PTH  = '\\10.3.0.122\IRMaaS_nfs_Data\Max Care Clinics\MAX-HC-20160616\NV\optum_example_csv_output.csv'
 ,@TGT_TBL_NM       = 'CISCO_PEN_TST_STG'
 ,@SRC_ROW_CNT     =  0
 ,@TGT_INSRT_ROW_CNT = 0
 ,@TGT_UPDT_ROW_CNT = 0 
 ,@TGT_REJ_ROW_CNT  = 0

*/
	
CREATE PROCEDURE [dbo].[INS_ETL_AUD_LOG]
(
	@JOB_NM         VARCHAR(150)
	,@JOB_STRT_DT         DATETIME
	,@JOB_END_DT         DATETIME
	,@JOB_STS       VARCHAR(100)
	,@SRC_FL_NM       VARCHAR(150)
	,@SRC_FL_FLDR_PTH       VARCHAR(500)
	,@TGT_TBL_NM       VARCHAR(50)
	,@SRC_ROW_CNT     INT
	,@TGT_INSRT_ROW_CNT     INT
	,@TGT_UPDT_ROW_CNT    INT
	,@TGT_REJ_ROW_CNT    INT
	,@RETVAL INT OUTPUT
)
AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRY

		IF (ISNULL(@JOB_STRT_DT,'') = '') SELECT @JOB_STRT_DT = GETDATE();

		INSERT INTO [dbo].[ETL_AUD_LOG]
			   ([JOB_NM]
			   ,[JOB_STRT_DT]
			   ,[JOB_END_DT]
			   ,[JOB_STS]
			   ,[SRC_FL_NM]
			   ,[SRC_FL_FLDR_PTH]
			   ,[TGT_TBL_NM]
			   ,[SRC_ROW_CNT]
			   ,[TGT_INSRT_ROW_CNT]
			   ,[TGT_UPDT_ROW_CNT]
			   ,[TGT_REJ_ROW_CNT])
		 VALUES
			   (
			   @JOB_NM
			   ,@JOB_STRT_DT
			   ,@JOB_END_DT
			   ,@JOB_STS
			   ,@SRC_FL_NM
			   ,@SRC_FL_FLDR_PTH
			   ,@TGT_TBL_NM
			   ,@SRC_ROW_CNT
			   ,@TGT_INSRT_ROW_CNT
			   ,@TGT_UPDT_ROW_CNT
			   ,@TGT_REJ_ROW_CNT)

		 SELECT @RETVAL = SCOPE_IDENTITY()
		 RETURN;

	END TRY

	BEGIN CATCH
			
		DECLARE @ErrorNumber INT = ERROR_NUMBER();
		DECLARE @ErrorLine INT = ERROR_LINE();
		DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();

		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH

END
GO
PRINT N'Creating [dbo].[INS_ETL_ERR_LOG]...';


GO

/******************************
	** Desc: 
	** Auth: GM
	** Date: 06/07/2014
	**************************
	** Change History
	**************************
	**  Date	        Author                  Description	
	**  --------        GM                ------------------------------------
	**************************************/

/*

 EXEC [dbo].[INS_ETL_ERR_LOG]    
	@ETL_AUD_LOG_KEY         = 1367
	,@ERR_LOG_DT = NULL
	,@ERR_CD         =  '100'
	,@ERR_MSG_TXT         = 'TEST ERR MSG TXT'
	,@ERR_REC_TXT       = 'TEST ERR REC TXT'


*/
	
CREATE PROCEDURE [dbo].[INS_ETL_ERR_LOG]
(
	@ETL_AUD_LOG_KEY         INT
	,@ERR_LOG_DT         DATETIME
	,@ERR_CD       VARCHAR(150)
	,@ERR_MSG_TXT       VARCHAR(1000)
	,@ERR_REC_TXT       VARCHAR(2000)
)
AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRY

		IF (ISNULL(@ERR_LOG_DT,'') = '') SELECT @ERR_LOG_DT = GETDATE();

		INSERT INTO [dbo].[ETL_ERR_LOG]
           ([ETL_AUD_LOG_KEY]
           ,[ERR_LOG_DT]
           ,[ERR_CD]
           ,[ERR_MSG_TXT]
           ,[ERR_REC_TXT])
		 VALUES
			(
			@ETL_AUD_LOG_KEY
			,@ERR_LOG_DT
			,@ERR_CD
			,@ERR_MSG_TXT
			,@ERR_REC_TXT
			)

		 SELECT SCOPE_IDENTITY() AS RETVAL

	END TRY

	BEGIN CATCH
			
		DECLARE @ErrorNumber INT = ERROR_NUMBER();
		DECLARE @ErrorLine INT = ERROR_LINE();
		DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();

		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH

END
GO
PRINT N'Creating [dbo].[INS_MSTR_LKP]...';


GO
/******************************
       ** File: IRMaaSAdmin.SQL   
       ** Name: INS_MSTR_LKP
       ** Desc: This procedure insert data into MSTR_LKP table
       ** Auth: Prasad varma
       ** Date: 19/4/2016
       **************************
       ** Change History
       **************************
       ** PR   Date          Author                  Description     
       ** --   --------        -------                ------------------------------------
       ** 1    00/00/1999      xxxxx          
       *******************************/

CREATE PROCEDURE [dbo].[INS_MSTR_LKP]
(
       @LKP_ENTY_TYP_NM     VARCHAR(500),
       @LKP_ENTY_NM         VARCHAR(500),
       @LKP_ENTY_DESC             VARCHAR(100),
       @CREAT_USER_ID             INTEGER


       )
       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON

              

                     INSERT MSTR_LKP(LKP_ENTY_TYP_NM,LKP_ENTY_NM,LKP_ENTY_DESC,CREAT_DT,CREAT_USER_ID) VALUES
                     (@LKP_ENTY_TYP_NM,@LKP_ENTY_NM,@LKP_ENTY_DESC,GETDATE(),@CREAT_USER_ID)

                     SELECT SCOPE_IDENTITY() AS RETVAL

              END TRY

              BEGIN CATCH


                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END;
GO
PRINT N'Creating [dbo].[INS_ORG]...';


GO

  
/******************************  
 ** File: IRMaaSAdmin.SQL     
 ** Name: INS_ORG  
 ** Desc: This procedure insert data into ORG table  
 ** Auth: Prasad varma  
 ** Date: 13/4/2016  
 **************************  
 ** Change History  
 **************************  
 ** PR   Date         Author                  Description   
 ** --   --------        -------                ------------------------------------  
 ** 1    00/00/1999      xxxxx            
 *******************************/  
  
 CREATE PROCEDURE [dbo].[INS_ORG](  
 @PAR_ORG_KEY          INTEGER,  
 @ORG_TYP_KEY          INTEGER,  
 @ORG_INDUS_KEY        INTEGER,  
 @ROW_STS_KEY          INTEGER,  
 @ORG_NM               VARCHAR(150),  
 @STR_ADR_1            VARCHAR(255),  
 @STR_ADR_2            VARCHAR(255),  
 @CTY_NM               VARCHAR(255),  
 @ST_NM                VARCHAR(255),  
 @CNTRY_NM             VARCHAR(255),  
 @PST_CD               VARCHAR(20),  
 @ORG_DESC_TXT         VARCHAR(1000),  
 @CREAT_USER_ID        INTEGER ,
 @STS_COMMT_TXT		   TEXT       
  
  
 )  
 AS  
 BEGIN  
  BEGIN TRY  
  
  SET NOCOUNT ON  
  
    
  
   INSERT ORG(PAR_ORG_KEY, ORG_TYP_KEY, ORG_INDUS_KEY, ROW_STS_KEY, ORG_NM , STR_ADR_1, STR_ADR_2,CTY_NM ,ST_NM, CNTRY_NM ,  
   PST_CD,ORG_DESC, CREAT_DT,CREAT_USER_ID,STS_COMMT_TXT) VALUES  
   (CASE WHEN @PAR_ORG_KEY=0 THEN NULL ELSE @PAR_ORG_KEY END, @ORG_TYP_KEY,@ORG_INDUS_KEY,@ROW_STS_KEY,@ORG_NM,@STR_ADR_1,@STR_ADR_2,@CTY_NM,@ST_NM,@CNTRY_NM,@PST_CD,@ORG_DESC_TXT,  
   GETDATE(),@CREAT_USER_ID,@STS_COMMT_TXT)  
  
   SELECT SCOPE_IDENTITY() AS RETVAL  
  
  END TRY  
  
  BEGIN CATCH  
  
  
   DECLARE @ErrorNumber INT = ERROR_NUMBER();  
   DECLARE @ErrorLine INT = ERROR_LINE();  
   DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
   DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
   DECLARE @ErrorState INT = ERROR_STATE();  
  
   PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
   PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
   RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
    END CATCH  
    
 END
GO
PRINT N'Creating [dbo].[INS_ORG_RELID]...';


GO
/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: INS_ORG_RELID
	** Desc: This procedure insert data into ORG_REL_ID table
	** Auth: Prasad varma
	** Date: 13/4/2016
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    00/00/1999      xxxxx          

	**************************************/

	CREATE PROCEDURE [dbo].[INS_ORG_RELID](
	@FLAG			  CHAR(1),
	@ORG_KEY          INTEGER,
	@SRC_KEY          INTEGER,
	@SRC_CLNT_ID      VARCHAR(150),
	@CREAT_USER_ID    INTEGER  

	)
	AS
	BEGIN
		BEGIN TRY

		SET NOCOUNT ON

			IF @FLAG = 'I'
		BEGIN
			INSERT ORG_REL_ID(ORG_KEY,SRC_KEY,SRC_CLNT_ID,CREAT_DT,CREAT_USER_ID,ROW_STS_KEY ) VALUES
			(@ORG_KEY,@SRC_KEY,@SRC_CLNT_ID,GETDATE(),@CREAT_USER_ID,1)

			SELECT SCOPE_IDENTITY() AS RETVAL
		END
		
		IF @FLAG = 'D'
		BEGIN 
		 
			DELETE FROM ORG_REL_ID WHERE ORG_KEY = @ORG_KEY

			SELECT @@ROWCOUNT AS RETVAL
			
		END
				

		END TRY

		BEGIN CATCH
			
			DECLARE @ErrorNumber INT = ERROR_NUMBER();
			DECLARE @ErrorLine INT = ERROR_LINE();
			DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
			DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
			DECLARE @ErrorState INT = ERROR_STATE();

			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

			RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
		  END CATCH
		
	END;
GO
PRINT N'Creating [dbo].[INS_PERMSN]...';


GO
/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: INS_PERMSN
	** Desc: This procedure insert data into PERMSN table
	** Auth: Prasad varma
	** Date: 13/4/2016
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    00/00/1999      xxxxx          

	**************************************/

	CREATE PROCEDURE [dbo].[INS_PERMSN](
	@PAR_PERMSN_KEY          INTEGER,
	@PERMSN_TYP_KEY          INTEGER,
	@ROW_STS_KEY             INTEGER,
	@PERMSN_NM               VARCHAR(100),
	@PERMSN_DESC             VARCHAR(1000),
	@DSPL_TXT                VARCHAR(100),
	@CHLD_XST_IND            INTEGER,
	@SEQ_ORDR                INTEGER,
	@CREAT_USER_ID           INTEGER  

	)
	AS
	BEGIN
	    BEGIN TRY

		SET NOCOUNT ON

		
			INSERT PERMSN(PAR_PERMSN_KEY,PERMSN_TYP_KEY,ROW_STS_KEY,PERMSN_NM,PERMSN_DESC,DSPL_TXT,CHLD_XST_IND,
			SEQ_ORDR,CREAT_DT,CREAT_USER_ID) VALUES
			(@PAR_PERMSN_KEY,@PERMSN_TYP_KEY,@ROW_STS_KEY,@PERMSN_NM,@PERMSN_DESC,@DSPL_TXT,@CHLD_XST_IND,
			@SEQ_ORDR,GETDATE(),@CREAT_USER_ID)

			SELECT SCOPE_IDENTITY() AS RETVAL

		END TRY

		BEGIN CATCH
			
			DECLARE @ErrorNumber INT = ERROR_NUMBER();
			DECLARE @ErrorLine INT = ERROR_LINE();
			DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
			DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
			DECLARE @ErrorState INT = ERROR_STATE();

			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

			RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
	   END CATCH
	   
	END;
GO
PRINT N'Creating [dbo].[INS_PERMSN_GRP]...';


GO
/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: INS_PERMSN_GRP
	** Desc: This procedure insert data into PERMSN_GRP table
	** Auth: Prasad varma
	** Date: 13/4/2016
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    00/00/1999      xxxxx          

	**************************************/

	CREATE PROCEDURE [dbo].[INS_PERMSN_GRP](
	@ROW_STS_KEY          INTEGER,
	@PERMSN_GRP_NM        VARCHAR(100),
	@PERMSN_GRP_DESC      VARCHAR(1000),
	@CREAT_USER_ID        INTEGER,
	@STS_COMMT_TXT		  TEXT 

	)
	AS
	BEGIN
		BEGIN TRY

		SET NOCOUNT ON

		
			INSERT PERMSN_GRP(ROW_STS_KEY,PERMSN_GRP_NM,PERMSN_GRP_DESC,CREAT_DT,CREAT_USER_ID,STS_COMMT_TXT) VALUES
			(@ROW_STS_KEY,@PERMSN_GRP_NM,@PERMSN_GRP_DESC,GETDATE(),@CREAT_USER_ID,@STS_COMMT_TXT)

			SELECT SCOPE_IDENTITY() AS RETVAL

		END TRY

		BEGIN CATCH
			
			DECLARE @ErrorNumber INT = ERROR_NUMBER();
			DECLARE @ErrorLine INT = ERROR_LINE();
			DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
			DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
			DECLARE @ErrorState INT = ERROR_STATE();

			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

			RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
		  END CATCH
		
	END;
GO
PRINT N'Creating [dbo].[INS_PERMSN_GRP_ASSOC]...';


GO
CREATE PROCEDURE [dbo].[INS_PERMSN_GRP_ASSOC](
	
	@PERMSN_GRP_KEY       INTEGER,
	@ROW_STS_KEY          INTEGER,
	@PERMSN_KEY           INTEGER,
	@MDUL_ID              INTEGER,
	@MNU_ID               INTEGER,
	@SUB_MNU_ID           INTEGER,
	@CREAT_USER_ID        INTEGER,  
	@FLAG				  CHAR(1)
	)
	AS
	BEGIN
		BEGIN TRY

		SET NOCOUNT ON

			 IF @FLAG = 'I'
            BEGIN

		
			INSERT PERMSN_GRP_ASSOC(PERMSN_GRP_KEY,ROW_STS_KEY,PERMSN_KEY,MDUL_ID,MNU_ID,SUB_MNU_ID,CREAT_DT,CREAT_USER_ID) VALUES
			(@PERMSN_GRP_KEY,@ROW_STS_KEY,@PERMSN_KEY,@MDUL_ID,@MNU_ID,@SUB_MNU_ID,GETDATE(),@CREAT_USER_ID)

			SELECT SCOPE_IDENTITY() AS RETVAL
			END
			
			
			IF @FLAG = 'D'
            
            BEGIN 
			
			DELETE FROM PERMSN_GRP_ASSOC WHERE PERMSN_GRP_KEY = @PERMSN_GRP_KEY
            SELECT @@ROWCOUNT AS RETVAL     
            END
			
		END TRY

		BEGIN CATCH
			
			DECLARE @ErrorNumber INT = ERROR_NUMBER();
			DECLARE @ErrorLine INT = ERROR_LINE();
			DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
			DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
			DECLARE @ErrorState INT = ERROR_STATE();

			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

			RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
		  END CATCH
		
	END;
GO
PRINT N'Creating [dbo].[INS_USER_APPL_ROLE]...';


GO
/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: INS_USER_APPL_ROLE
	** Desc: This procedure insert data into USER_APPL_ROLE table
	** Auth: Prasad varma
	** Date: 13/4/2016
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    00/00/1999      xxxxx          

	**************************************/

	CREATE PROCEDURE [dbo].[INS_USER_APPL_ROLE](
	@FLAG				  CHAR(1),
	@ROW_STS_KEY          INTEGER,
	@APPL_ROLE_KEY        INTEGER,
	@USER_ID              INTEGER,
	@CREAT_USER_ID        INTEGER  

	)
	AS
	BEGIN
		BEGIN TRY

		SET NOCOUNT ON

		IF @FLAG = 'I'
		BEGIN
			INSERT USER_APPL_ROLE(ROW_STS_KEY,APPL_ROLE_KEY,USER_ID,CREAT_DT,CREAT_USER_ID) VALUES
			(@ROW_STS_KEY,@APPL_ROLE_KEY,@USER_ID,GETDATE(),@CREAT_USER_ID)

			SELECT SCOPE_IDENTITY() AS RETVAL
		END
		
		IF @FLAG = 'D'
		BEGIN 
		 
			DELETE FROM USER_APPL_ROLE WHERE USER_ID = @USER_ID

			SELECT @@ROWCOUNT AS RETVAL
			
		END

		END TRY

		BEGIN CATCH
			
			DECLARE @ErrorNumber INT = ERROR_NUMBER();
			DECLARE @ErrorLine INT = ERROR_LINE();
			DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
			DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
			DECLARE @ErrorState INT = ERROR_STATE();

			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

			RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
		  END CATCH
		
	END
GO
PRINT N'Creating [dbo].[INS_USER_CLNT_SRVC_ASGN]...';


GO

/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: INS_CLNT_SECUR_SRVC_ENGMTR
	** Desc: This procedure insert data into CLNT_SECUR_SRVC_ENGMTR table
	** Auth: Prasad varma
	** Date: 20/4/2016
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    00/00/1999      xxxxx          

	**************************************/
	

	CREATE PROCEDURE [dbo].[INS_USER_CLNT_SRVC_ASGN](
	@ROW_STS_KEY				 INTEGER,
	@USER_ID					 INTEGER,
	@USER_STRT_DT				 DATETIME,
	@USER_END_DT				 DATETIME,
	@CREAT_USER_ID				 INTEGER,
	@SECUR_SRVC_CD				 VARCHAR(10),
	@CLNT_ENGMT_CD				 VARCHAR(30)
	
	)

	AS
	BEGIN
		BEGIN TRY

		SET NOCOUNT ON

		    INSERT USER_CLNT_SRVC_ASGN(ROW_STS_KEY	,USER_ID,USER_STRT_DT,USER_END_DT,CREAT_DT,CREAT_USER_ID,SECUR_SRVC_CD,CLNT_ENGMT_CD) VALUES
			(@ROW_STS_KEY,@USER_ID,@USER_STRT_DT,@USER_END_DT,GETDATE(),@CREAT_USER_ID,@SECUR_SRVC_CD,@CLNT_ENGMT_CD)

			 SELECT @@ROWCOUNT AS RETVAL 

		END TRY

		BEGIN CATCH
			
			DECLARE @ErrorNumber INT = ERROR_NUMBER();
			DECLARE @ErrorLine INT = ERROR_LINE();
			DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
			DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
			DECLARE @ErrorState INT = ERROR_STATE();

			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

			RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
		  END CATCH
		
	END;
GO
PRINT N'Creating [dbo].[INS_USER_EMAIL_LOG]...';


GO
CREATE PROCEDURE [dbo].[INS_USER_EMAIL_LOG]
(
	@NTF_MSG_KEY		INTEGER,
	@USER_ID			INTEGER,
	@FROM_EMAIL_ID		VARCHAR(150),
	@TO_EMAIL_ID		TEXT,
	@CC_EMAIL_ID		TEXT,
	@BCC_EMAIL_ID		TEXT,
	@EMAIL_SND_DT		DATETIME,
	@EMAIL_MSG_SBJ_TXT	VARCHAR(255),
	@EMAIL_MSG_CNTN_TXT	TEXT,
	@SND_SUC_IND		INTEGER,
	@RESND_CNT			INTEGER,
	@ERR_DESC			VARCHAR(5000)
	
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

INSERT USER_EMAIL_LOG(NTF_MSG_KEY ,USER_ID,FROM_EMAIL_ID,TO_EMAIL_ID,CC_EMAIL_ID,BCC_EMAIL_ID,EMAIL_SND_DT,EMAIL_MSG_SBJ_TXT,EMAIL_MSG_CNTN_TXT,SND_SUC_IND,RESND_CNT,ERR_DESC) VALUES
(@NTF_MSG_KEY,@USER_ID,@FROM_EMAIL_ID,@TO_EMAIL_ID,@CC_EMAIL_ID,@BCC_EMAIL_ID,@EMAIL_SND_DT,@EMAIL_MSG_SBJ_TXT,@EMAIL_MSG_CNTN_TXT,@SND_SUC_IND,@RESND_CNT,@ERR_DESC)


SELECT SCOPE_IDENTITY() AS RETVAL

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[INS_USER_EVNT_LOG]...';


GO
/******************************
       ** File: IRMaaSAdmin.SQL   
       ** Name: INS_USER_EVNT_LOG
       ** Desc: This procedure INSERT  into USER_EVNT_LOG table
       ** Auth: Prasad varma
       ** Date: 22/4/2016
       **************************
       ** Change History
       **************************
       ** PR   Date          Author                  Description     
       ** --   --------        -------                ------------------------------------
       ** 1    00/00/1999      xxxxx          
       *******************************/
CREATE PROCEDURE [dbo].[INS_USER_EVNT_LOG]
(
	@USER_ID	        INTEGER,
	@ACT_NM  	        VARCHAR(100),
	@MDUL_NM	        VARCHAR(100),
	@EVNT_DT            DATETIME,
	@EVNT_DESC			VARCHAR(1000),
	@CLNT_ENGMT_CD		VARCHAR(30),
	@CLNT_SRVC_ENGMT_CD VARCHAR(150),
	@IPADR			    VARCHAR(20),
	@SFTW_INFO_TXT      VARCHAR(150),
	@FILL_TXT           TEXT
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

INSERT USER_EVNT_LOG(USER_ID,ACT_NM ,MDUL_NM,EVNT_DT ,EVNT_DESC,CLNT_ENGMT_CD,CLNT_SRVC_ENGMT_CD,IPADR,SFTW_INFO_TXT,FILL_TXT) VALUES
(@USER_ID,@ACT_NM ,@MDUL_NM,@EVNT_DT ,@EVNT_DESC,@CLNT_ENGMT_CD,@CLNT_SRVC_ENGMT_CD,@IPADR,@SFTW_INFO_TXT,@FILL_TXT)



SELECT SCOPE_IDENTITY() AS RETVAL

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[INS_USER_PRFL]...';


GO
/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: INS_USER_PRFL
	** Desc: This procedure insert data into USER_PRFL table
	** Auth: Prasad varma
	** Date: 13/4/2016
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    00/00/1999      xxxxx          

	**************************************/

	CREATE PROCEDURE [dbo].[INS_USER_PRFL](
	@ORG_KEY            INTEGER,
	@USER_TYP_KEY       INTEGER,
	@ROW_STS_KEY        INTEGER, 
	@FST_NM             VARCHAR(150), 
	@LST_NM             VARCHAR(150), 
	@MIDL_NM            VARCHAR(150), 
	@JOB_TITL_NM        VARCHAR(150), 
	@EMAIL              VARCHAR(150), 
	@TEL_NBR            VARCHAR(20),
	@USER_VERF_IND		INTEGER, -- DEFAULT 0
	@LCK_IND            INTEGER, -- DEFAULT 0
	@LOGIN_ATMPT_CNT    INTEGER,
	@CREAT_USER_ID      INTEGER,
	@MAC_ADR_NM			VARCHAR(50),
	@STS_COMMT_TXT		TEXT 
	)

	AS
	BEGIN
		BEGIN TRY

		SET NOCOUNT ON

		    INSERT USER_PRFL(ORG_KEY,USER_TYP_KEY,ROW_STS_KEY,FST_NM,LST_NM,MIDL_NM,JOB_TITL_NM,EMAIL_ID,TEL_NBR,USER_VERF_IND,LCK_IND,LOGIN_ATMPT_CNT,
			CREAT_DT,CREAT_USER_ID,MAC_ADR_NM,STS_COMMT_TXT) VALUES
			(@ORG_KEY,@USER_TYP_KEY,@ROW_STS_KEY,@FST_NM,@LST_NM,@MIDL_NM,@JOB_TITL_NM,@EMAIL,@TEL_NBR,@USER_VERF_IND,@LCK_IND,@LOGIN_ATMPT_CNT,
			GETDATE(),@CREAT_USER_ID,@MAC_ADR_NM,@STS_COMMT_TXT)

			SELECT SCOPE_IDENTITY() AS RETVAL

		END TRY

		BEGIN CATCH
			
			DECLARE @ErrorNumber INT = ERROR_NUMBER();
			DECLARE @ErrorLine INT = ERROR_LINE();
			DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
			DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
			DECLARE @ErrorState INT = ERROR_STATE();

			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

			RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
		  END CATCH
		
	END;
GO
PRINT N'Creating [dbo].[INS_USER_SECUR_DTL]...';


GO
/******************************
	** File: IRMaaSAdmin.SQL   
	** Name: INS_USER_SECUR_DTL
	** Desc: This procedure insert data into USER_SECUR_DTL table
	** Auth: Prasad varma
	** Date: 13/4/2016
	**************************
	** Change History
	**************************
	** PR   Date	        Author                  Description	
	** --   --------        -------                ------------------------------------
	** 1    00/00/1999      xxxxx          

	**************************************/

	CREATE PROCEDURE [dbo].[INS_USER_SECUR_DTL](
	@ROW_STS_KEY        INTEGER,
	@USER_ID			INTEGER,
	@SECUR_QUES_KEY     INTEGER,
	@ANS_TXT            VARCHAR(1000),
	@SEQ_ORDR_NBR       INTEGER,
	@CREAT_USER_ID      INTEGER
	)

	AS
	BEGIN
		BEGIN TRY

		SET NOCOUNT ON

			INSERT USER_SECUR_DTL(ROW_STS_KEY,USER_ID,SECUR_QUES_KEY,ANS_TXT,SEQ_ORDR_NBR,CREAT_DT,CREAT_USER_ID) VALUES
			(@ROW_STS_KEY,@USER_ID,@SECUR_QUES_KEY,@ANS_TXT,@SEQ_ORDR_NBR,GETDATE(),@CREAT_USER_ID)

			SELECT SCOPE_IDENTITY() AS RETVAL

		END TRY

		BEGIN CATCH
			IF @@TRANCOUNT > 0
			
			DECLARE @ErrorNumber INT = ERROR_NUMBER();
			DECLARE @ErrorLine INT = ERROR_LINE();
			DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
			DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
			DECLARE @ErrorState INT = ERROR_STATE();

			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

			RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
		  END CATCH
		
	END;
GO
PRINT N'Creating [dbo].[INS_USER_SESS_LOG]...';


GO
CREATE PROCEDURE [dbo].[INS_USER_SESS_LOG]
(
       @USER_ID      INTEGER,
       @EMAIL_ID     VARCHAR(150),
       @SESS_ID      VARCHAR(500),
       @LST_ACT_DT DATETIME
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

INSERT USER_SESS_LOG(USER_ID,EMAIL_ID,SESS_ID,LST_ACT_DT) VALUES
(@USER_ID,@EMAIL_ID,@SESS_ID,@LST_ACT_DT)


SELECT SCOPE_IDENTITY() AS RETVAL
UPDATE  USER_PRFL
SET           LOGIN_ATMPT_CNT = 0
WHERE   USER_ID                   = @USER_ID
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[INSCLNT_SCHM_LOG]...';


GO
CREATE PROCEDURE [dbo].[INSCLNT_SCHM_LOG]
(
	@PvcFlag			VARCHAR(1),
	@ORG_KEY			INTEGER,
	@SCHM_STS_DESC		VARCHAR(40),
	@ERR_DESC			TEXT

)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON


       IF @PvcFlag = 'I'
       BEGIN
              INSERT CLNT_SCHM_LOG(ORG_KEY,CREAT_DT,SCHM_STS_DESC,ERR_DESC) 
               VALUES (@ORG_KEY,GETDATE(),@SCHM_STS_DESC,@ERR_DESC)

              SELECT SCOPE_IDENTITY() AS RETVAL
       END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[LIST_AppRole]...';


GO
CREATE PROCEDURE [dbo].[LIST_AppRole]
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	A.APPL_ROLE_KEY,A.ROW_STS_KEY,dbo.fnGetMasterLkpNameByID(A.ROW_STS_KEY) ROWSTATUS,A.APPL_ROLE_NM,A.APPL_ROLE_DESC,A.CREAT_DT,A.CREAT_USER_ID, 
		A.UPDT_DT,A.UPDT_USER_ID,(B.FST_NM+ ' ' +B.LST_NM) USERNAME,A.STS_COMMT_TXT
FROM	APPL_ROLE		  A
JOIN	USER_PRFL		  B
ON		A.CREAT_USER_ID	= B.USER_ID
WHERE	A.ROW_STS_KEY  <> 3
ORDER BY CASE WHEN ISNULL(A.UPDT_DT,'')='' THEN A.CREAT_DT ELSE A.UPDT_DT END DESC  

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[LIST_AppRoleByRoleID]...';


GO
/******************************
       ** File: IRMaaSAdmin.SQL   
       ** Name: LIST_AppRoleByRoleID
       ** Desc: This procedure GET data into APPL_ROLE table
       ** Auth: Prasad varma
       ** Date: 22/4/2016
       **************************
       ** Change History
       **************************
       ** PR   Date          Author                  Description     
       ** --   --------        -------                ------------------------------------
       ** 1    00/00/1999      xxxxx          
       *******************************/
CREATE PROCEDURE [dbo].[LIST_AppRoleByRoleID]
(
@APPL_ROLE_KEY  INTEGER
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

	SELECT	ROW_STS_KEY,APPL_ROLE_NM,APPL_ROLE_DESC,STS_COMMT_TXT 	
	FROM	APPL_ROLE		
	WHERE	APPL_ROLE_KEY = @APPL_ROLE_KEY 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[LIST_Country]...';


GO
--DROP PROCEDURE LIST_Country
CREATE PROCEDURE [dbo].[LIST_Country]
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT 	CNTRY_CD,CNTRY_NM
FROM   [CNTRY_CD]

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[LIST_EngagementdatauploadbyUserid]...';


GO

CREATE PROCEDURE [dbo].[LIST_EngagementdatauploadbyUserid]
(
       @UserID       INTEGER       
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON


       SELECT dbo.fnGetParentOrgNameID(B.CLNT_ORG_KEY) [Client NAME],B.CLNT_ORG_KEY, A.CLNT_ENGMT_CD,B.CLNT_ENGMT_NM,D.SECUR_SRVC_NM,D.SECUR_SRVC_CD,
       A.FL_LCK_IND,G.USER_STRT_DT,G.USER_END_DT,G.USER_ID
       FROM   CLNT_SECUR_SRVC_ENGMT   A
       JOIN   CLNT_ENGMT                        B
       ON            A.CLNT_ENGMT_CD                   =      B.CLNT_ENGMT_CD
       JOIN   SECUR_SRVC                        D
       ON            D.SECUR_SRVC_CD                   =      A.SECUR_SRVC_CD
       JOIN   USER_CLNT_SRVC_ASGN        G
       ON            B.CLNT_ENGMT_CD                   =      G.CLNT_ENGMT_CD
       WHERE  G.USER_ID                         =   @UserID  


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[LIST_ManageEngagements]...';


GO
/******************************  
 ** File: IRMaaSAdmin.SQL     
 ** Name: LIST_ManageEngagements  
 ** Desc: This procedure get data from CLNT_ENGMT,ORG tables
** Auth: Prasad varma  
 ** Date: 3/5/2016  
 **************************  
 ** Change History  
 **************************  


** PR   Date         Author                  Description   
 ** --   --------        -------                ------------------------------------  
 ** 1    00/00/1999      xxxxx            
 *******************************/  

CREATE PROCEDURE [dbo].[LIST_ManageEngagements]
(
	  @UserID	 INTEGER,
	  @Flag		 VARCHAR(1)
)

      AS
      BEGIN
            BEGIN TRY

            SET NOCOUNT ON

			IF	@Flag = 'C'
			BEGIN
                  SELECT            A.CLNT_ENGMT_CD,A.CLNT_ENGMT_CD [Engagement Code],B.PAR_ORG_KEY,
									dbo.fnGetParentOrgNameID(B.PAR_ORG_KEY) [Parent Client Name],B.ORG_NM [Client Name],
                                    A.AGR_DT [Agreement Date],A.ENGMT_STRT_DT [Estimated Start Date],
                                    A.ENGMT_EST_END_DT [Estimated End Date],A.ENGMT_COMMT [Status],'' [Action],
									A.CREAT_DT,A.UPDT_DT
                  FROM              CLNT_ENGMT					  A
                  JOIN              ORG                           B
                  ON                A.CLNT_ORG_KEY    =   B.ORG_KEY
                  WHERE            	A.ROW_STS_KEY <> 3
				  AND				B.ROW_STS_KEY  = 1
                  ORDER BY    CASE WHEN ISNULL(A.UPDT_DT,'') = '' THEN A.CREAT_DT ELSE A.UPDT_DT END DESC
			END

			IF	@Flag = 'L'
			BEGIN
                  SELECT            A.CLNT_ENGMT_CD,A.CLNT_ENGMT_CD [Engagement Code],B.PAR_ORG_KEY,
									dbo.fnGetParentOrgNameID(B.PAR_ORG_KEY) [Parent Client Name],B.ORG_NM [Client Name],
                                    A.AGR_DT [Agreement Date],A.ENGMT_STRT_DT [Estimated Start Date],
                                    A.ENGMT_EST_END_DT [Estimated End Date],A.ENGMT_COMMT [Status],'' [Action],
									A.CREAT_DT,A.UPDT_DT
                  FROM              CLNT_ENGMT					  A
                  JOIN              ORG                           B
                  ON                A.CLNT_ORG_KEY    =   B.ORG_KEY
				  JOIN				CLNT_ENGMT_USER_ASGN		  C
				  ON				A.CLNT_ENGMT_CD	 =	  C.CLNT_ENGMT_CD
                  WHERE				 C.USER_ID         =   @UserID
				  AND				B.ROW_STS_KEY  = 1
				  AND				A.ROW_STS_KEY <> 3
                  ORDER BY    CASE WHEN ISNULL(A.UPDT_DT,'') = '' THEN A.CREAT_DT ELSE A.UPDT_DT END DESC
			END

            END TRY

            BEGIN CATCH
                  

                  DECLARE @ErrorNumber INT = ERROR_NUMBER();
                  DECLARE @ErrorLine INT = ERROR_LINE();
                  DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                  DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                  DECLARE @ErrorState INT = ERROR_STATE();

                  PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                  PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                  RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
              END CATCH
            
      END
GO
PRINT N'Creating [dbo].[LIST_MasterLookupByEntityType]...';


GO

--DROP PROCEDURE ListMasterlookByEntityType
CREATE PROCEDURE [dbo].[LIST_MasterLookupByEntityType]
(

@EntityType VARCHAR(200)

)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT MSTR_LKP_KEY,LKP_ENTY_TYP_NM , LKP_ENTY_NM , LKP_ENTY_DESC 
FROM   MSTR_LKP
WHERE  LKP_ENTY_TYP_NM =   @EntityType
ORDER BY LKP_ENTY_NM ASC

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[LIST_OrglistByUserType]...';


GO
CREATE PROCEDURE [dbo].[LIST_OrglistByUserType]
(
      @UserType INT
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON
DECLARE @PiOrgType INTEGER = 0
       SELECT @PiOrgType = CASE WHEN @UserType = 16 THEN 8
                                                WHEN @UserType = 17 THEN 9
                                                WHEN @UserType = 18 THEN 10 END 
                                                 
      SELECT  ORG_KEY,ORG_NM
      FROM    ORG
      WHERE   ORG_TYP_KEY   = @PiOrgType
         AND     ROW_STS_KEY    = 1
         AND    CREAT_ORG_SCHM_IND = CASE WHEN @PiOrgType = 9 THEN  'Y' ELSE CREAT_ORG_SCHM_IND  END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[List_PasswordResetUsers]...';


GO
CREATE PROCEDURE [dbo].[List_PasswordResetUsers]
(
   @Days         INTEGER
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
					 SELECT USER_ID, USER_TYP_KEY, FST_NM + '' + LST_NM UserName ,EMAIL_ID
                     FROM	USER_PRFL     
                     WHERE  DATEDIFF(DAY,PSWD_RSET_DT,GETDATE()) >  @Days    
                     AND    ROW_STS_KEY = 1
                     
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[LIST_PermissionGroups]...';


GO
--DROP PROCEDURE LISTPERMSNGRP
CREATE PROCEDURE [dbo].[LIST_PermissionGroups]
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	A.PERMSN_GRP_KEY,A.ROW_STS_KEY,dbo.fnGetMasterLkpNameByID(A.ROW_STS_KEY) ROWSTATUS, A.PERMSN_GRP_NM,A.PERMSN_GRP_DESC,CONVERT(VARCHAR(10),A.UPDT_DT,101)UpdateDate,
		A.UPDT_USER_ID,dbo.fnGetUserNameByID(A.UPDT_USER_ID) USERNAME,CONVERT(VARCHAR(10),B.CREAT_DT,101)alterdDate,B.CREAT_USER_ID,A.STS_COMMT_TXT
FROM	PERMSN_GRP		  A
JOIN	USER_PRFL		  B
ON		A.CREAT_USER_ID = B.USER_ID
WHERE	A.ROW_STS_KEY	<> 3
ORDER BY CASE WHEN ISNULL(A.UPDT_DT,'')='' THEN A.CREAT_DT ELSE A.UPDT_DT END DESC 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[LIST_PermissionGroupsByPermGropID]...';


GO
/******************************
       ** File: IRMaaSAdmin.SQL   
       ** Name: LIST_PermissionGroupsByPermGropID
       ** Desc: This procedure Fetch data into PERMSN_GRP table
       ** Auth: Prasad varma
       ** Date: 22/4/2016
       **************************
       ** Change History
       **************************
       ** PR   Date          Author                  Description     
       ** --   --------        -------                ------------------------------------
       ** 1    02/05/2016      xxxxx          
       *******************************/
CREATE PROCEDURE [dbo].[LIST_PermissionGroupsByPermGropID]
(
@PERMSN_GRP_KEY		INTEGER
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	PERMSN_GRP_KEY,ROW_STS_KEY,PERMSN_GRP_NM,PERMSN_GRP_DESC,STS_COMMT_TXT,dbo.fnGetMasterLkpNameByID(ROW_STS_KEY) ROWSTATUS	
FROM	PERMSN_GRP		
WHERE   PERMSN_GRP_KEY = @PERMSN_GRP_KEY  


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[LIST_PermissionGroupsByRole]...';


GO
CREATE PROCEDURE [dbo].[LIST_PermissionGroupsByRole]
(
	@RoleID VARCHAR(500)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	DISTINCT A.PERMSN_GRP_KEY,A.ROW_STS_KEY,A.PERMSN_GRP_NM,A.PERMSN_GRP_DESC,B.APPL_ROLE_KEY,D.APPL_ROLE_NM
FROM	PERMSN_GRP				A 
JOIN	APPL_ROLE_PERMSN_GRP	B
ON		A.PERMSN_GRP_KEY	  = B.PERMSN_GRP_KEY
JOIN	FnSplit(@RoleID,',')	C
ON		B.APPL_ROLE_KEY		  = C.Items
JOIN	APPL_ROLE				D
ON		B.APPL_ROLE_KEY		  = D.APPL_ROLE_KEY
WHERE	B.ROW_STS_KEY		  <> 3
AND		A.ROW_STS_KEY		  <> 3

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[LIST_PermissionGroupsByUserID]...';


GO
--DROP PROCEDURE LIST_PermissionGroupsByUserID
CREATE PROCEDURE [dbo].[LIST_PermissionGroupsByUserID]
(
	@USERID INTEGER
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	DISTINCT A.PERMSN_GRP_KEY,A.ROW_STS_KEY,A.PERMSN_GRP_NM,A.PERMSN_GRP_DESC 
FROM	PERMSN_GRP				A 
JOIN	APPL_ROLE_PERMSN_GRP	B
ON		A.PERMSN_GRP_KEY	  = B.PERMSN_GRP_KEY
JOIN	USER_APPL_ROLE			C
ON		B.APPL_ROLE_KEY		  = C.APPL_ROLE_KEY
WHERE	B.ROW_STS_KEY		  = 1
AND		A.ROW_STS_KEY		  = 1
AND		A.ROW_STS_KEY		  = 1
AND		C.USER_ID			  = @USERID

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[LIST_Permissions]...';


GO
--DROP PROCEDURE LISTPERMSN
CREATE PROCEDURE [dbo].[LIST_Permissions]
(
       @GroupID INTEGER
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

IF @GroupID = 0 
BEGIN

SELECT          A.PERMSN_KEY,A.PERMSN_NM,A.PERMSN_DESC,A.DSPL_TXT,D.PERMSN_KEY ModuleID,D.PERMSN_NM ModuleName,
              C.PERMSN_KEY MenuID,C.PERMSN_NM MenuName,B.PERMSN_KEY SubmenuID,B.PERMSN_NM SubmenuName,
              A.CHLD_XST_IND,A.SEQ_ORDR,A.UPDT_DT 
FROM            PERMSN                 A
JOIN            PERMSN                 B
ON            A.PAR_PERMSN_KEY     = B.PERMSN_KEY
AND           B.PERMSN_TYP_KEY     = 6
JOIN            PERMSN                 C
ON            B.PAR_PERMSN_KEY     = C.PERMSN_KEY
AND           C.PERMSN_TYP_KEY     = 5
JOIN            PERMSN                 D
ON            C.PAR_PERMSN_KEY     = D.PERMSN_KEY
AND           D.PERMSN_TYP_KEY     = 4
WHERE           A.ROW_STS_KEY        = 1
ORDER BY   A.PAR_PERMSN_KEY ASC   


END 

IF @GroupID > 0 
BEGIN

SELECT          A.PERMSN_KEY,A.PERMSN_NM,A.PERMSN_DESC,A.DSPL_TXT,D.PERMSN_KEY ModuleID,D.PERMSN_NM ModuleName,
              C.PERMSN_KEY MenuID,C.PERMSN_NM MenuName,B.PERMSN_KEY SubmenuID,B.PERMSN_NM SubmenuName,
              A.CHLD_XST_IND,A.SEQ_ORDR,A.UPDT_DT
FROM            PERMSN                 A
JOIN            PERMSN                 B
ON            A.PAR_PERMSN_KEY     = B.PERMSN_KEY
AND           B.PERMSN_TYP_KEY     = 6
JOIN            PERMSN                 C
ON            B.PAR_PERMSN_KEY     = C.PERMSN_KEY
AND           C.PERMSN_TYP_KEY     = 5
JOIN            PERMSN                 D
ON            C.PAR_PERMSN_KEY     = D.PERMSN_KEY
AND           D.PERMSN_TYP_KEY     = 4
JOIN            PERMSN_GRP_ASSOC         E
ON                     A.PERMSN_KEY                = E.PERMSN_KEY
WHERE           A.ROW_STS_KEY        = 1
AND                    E.PERMSN_GRP_KEY      = @GroupID
ORDER BY   A.PAR_PERMSN_KEY ASC 

END 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[LIST_Roles]...';


GO
CREATE PROCEDURE [dbo].[LIST_Roles]
(
	@USER_TYP_KEY	INTEGER
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT      DISTINCT A.APPL_ROLE_KEY,A.APPL_ROLE_NM,A.APPL_ROLE_DESC
FROM		APPL_ROLE                       A
JOIN		APPL_ROLE_PERMSN_GRP			B
ON          A.APPL_ROLE_KEY               = B.APPL_ROLE_KEY
WHERE		A.ROW_STS_KEY                 = 1
AND         B.ROW_STS_KEY                 = 1
AND			A.USER_TYP_KEY				  = @USER_TYP_KEY
ORDER BY	A.APPL_ROLE_NM
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[LIST_SecurPkg]...';


GO

CREATE PROCEDURE [dbo].[LIST_SecurPkg]

AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	SECUR_PKG_CD,SECUR_PKG_NM,SECUR_PKG_DESC,CREAT_DT,CREAT_USER_ID,UPDT_DT,
		UPDT_USER_ID,ROW_STS_KEY
FROM	SECUR_PKG
WHERE	ROW_STS_KEY = 1
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[LIST_SecurServices]...';


GO
CREATE PROCEDURE [dbo].[LIST_SecurServices]
(
	@SECUR_SRVC_CD  VARCHAR(10)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	SECUR_SRVC_CD,SECUR_SRVC_NM,SECUR_SRVC_DESC,CREAT_DT,CREAT_USER_ID,
		UPDT_DT,UPDT_USER_ID,ROW_STS_KEY
FROM	[SECUR_SRVC]
WHERE   SECUR_SRVC_CD  =  @SECUR_SRVC_CD

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[LIST_SecurSrvcOfr]...';


GO

CREATE PROCEDURE [dbo].[LIST_SecurSrvcOfr]
(
	@SECUR_PKG_CD  VARCHAR(10)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT	SECUR_PKG_CD,SECUR_SRVC_CD,CREAT_DT,CREAT_USER_ID,UPDT_DT,UPDT_USER_ID,ROW_STS_KEY
FROM	SECUR_PKG_OFR
WHERE   SECUR_PKG_CD  =  @SECUR_PKG_CD

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[LIST_ServicesByPkgkey]...';


GO
CREATE PROCEDURE [dbo].[LIST_ServicesByPkgkey]
(
	@SECUR_PKG_CD  VARCHAR(10)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

SELECT		DISTINCT B.SECUR_SRVC_CD,C.SECUR_SRVC_NM,C.SECUR_SRVC_DESC,A.SECUR_PKG_NM,A.SECUR_PKG_DESC--,D.SRVC_EST_STRT_DT,D.SRVC_EST_END_DT
FROM		SECUR_PKG					A
JOIN		SECUR_PKG_OFR				B
ON			A.SECUR_PKG_CD			=   B.SECUR_PKG_CD
AND			B.ROW_STS_KEY			=   1
JOIN		SECUR_SRVC					C
ON			B.SECUR_SRVC_CD			=   C.SECUR_SRVC_CD
AND			C.ROW_STS_KEY			=	1
--LEFT JOIN   CLNT_SECUR_SRVC_ENGMT   D
--ON			C.SECUR_SRVC_KEY		=  D.SECUR_SRVC_KEY
WHERE		A.SECUR_PKG_CD			=  @SECUR_PKG_CD


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[LIST_StateByCountry]...';


GO
--DROP PROCEDURE LIST_StateByCountry
CREATE PROCEDURE [dbo].[LIST_StateByCountry]
(
	@CountryName VARCHAR(150)
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


SELECT A.ST_CD,A.CNTRY_CD,A.ST_NM
FROM   ST_CD A
JOIN   CNTRY_CD B
ON     A.CNTRY_CD = B.CNTRY_CD
WHERE  B.CNTRY_NM  = @CountryName

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[List_UserByOrgIDandUserType]...';


GO
CREATE PROCEDURE [dbo].[List_UserByOrgIDandUserType]
(
      @OrgID			INT,
	  @USER_TYP_KEY     VARCHAR(20),
	  @FLAG		        VARCHAR(1)

)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

	IF @FLAG = 'L'
	BEGIN

      SELECT  DISTINCT A.USER_ID,(FST_NM+' '+LST_NM) [User Name] 
      FROM    USER_PRFL           A
      JOIN    ORG                 B
      ON      A.ORG_KEY			=  B.ORG_KEY
	  JOIN    USER_APPL_ROLE	  C
	  ON      A.USER_ID			=  C.USER_ID
	  JOIN	  APPL_ROLE           D
	  ON      C.APPL_ROLE_KEY   =  D.APPL_ROLE_KEY
	  JOIN	  APPL_ROLE_PERMSN_GRP E
	  ON      C.APPL_ROLE_KEY    =  E.APPL_ROLE_KEY
	  JOIN	  PERMSN_GRP_ASSOC		F
	  ON	  E.PERMSN_GRP_KEY	=  F.PERMSN_GRP_KEY
	  JOIN	  PERMSN					G
	  ON	  F.PERMSN_KEY		= G.PERMSN_KEY
      WHERE   A.ORG_KEY			=  CASE WHEN @OrgID = 0 THEN A.ORG_KEY ELSE @OrgID END
	  AND     A.USER_TYP_KEY	=  CASE WHEN @USER_TYP_KEY = 'Internal' THEN 16 WHEN @USER_TYP_KEY = 'Client' THEN 17 WHEN @USER_TYP_KEY = 'Partner' THEN 18 END
	  AND     A.ROW_STS_KEY		=  1
	  AND     B.ROW_STS_KEY		=  1
	  AND     A.LCK_IND			=  0
	  AND	 G.PERMSN_NM	= 'Add User to Service'
	  -- Add Document upload

      ORDER BY A.USER_ID DESC 
	  END


	  IF @FLAG = 'A'
	BEGIN

      SELECT  DISTINCT A.USER_ID,(FST_NM+' '+LST_NM) [User Name] 
      FROM    USER_PRFL           A
      JOIN    ORG                 B
      ON      A.ORG_KEY			=  B.ORG_KEY
	  JOIN    USER_APPL_ROLE	  C
	  ON      A.USER_ID			=  C.USER_ID
	  JOIN	  APPL_ROLE           D
	  ON      C.APPL_ROLE_KEY   =  D.APPL_ROLE_KEY
	  JOIN	  APPL_ROLE_PERMSN_GRP E
	  ON      C.APPL_ROLE_KEY    =  E.APPL_ROLE_KEY
	  JOIN	  PERMSN_GRP_ASSOC		F
	  ON	  E.PERMSN_GRP_KEY	=  F.PERMSN_GRP_KEY
	  JOIN	  PERMSN					G
	  ON	  F.PERMSN_KEY		= G.PERMSN_KEY
      WHERE   A.ORG_KEY			=  CASE WHEN @OrgID = 0 THEN A.ORG_KEY ELSE @OrgID END
	  AND     A.USER_TYP_KEY	=  CASE WHEN @USER_TYP_KEY = 'Internal' THEN 16 WHEN @USER_TYP_KEY = 'Client' THEN 17 WHEN @USER_TYP_KEY = 'Partner' THEN 18 END
	  AND     A.ROW_STS_KEY		=  1
	  AND     A.LCK_IND			=  0
	  AND     B.ROW_STS_KEY		=  1
	  AND	 G.PERMSN_NM		= 'Add Document upload'
	  

      ORDER BY A.USER_ID DESC 
	  END
IF @FLAG = 'C'
	BEGIN

      SELECT  DISTINCT A.USER_ID,(FST_NM+' '+LST_NM) [User Name] 
      FROM    USER_PRFL           A
      JOIN    ORG                 B
      ON      A.ORG_KEY			=  B.ORG_KEY
	  WHERE   A.ORG_KEY			=  CASE WHEN @OrgID = 0 THEN A.ORG_KEY ELSE @OrgID END
	  AND     A.USER_TYP_KEY	=  CASE WHEN @USER_TYP_KEY = 'Client' THEN 17  END
	  AND     A.ROW_STS_KEY		=  1
	  AND     B.ROW_STS_KEY		=  1
	  AND     A.LCK_IND			=  0

      ORDER BY A.USER_ID DESC 
	  END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[LIST_UserClntSrvcAssn]...';


GO

CREATE PROCEDURE [dbo].[LIST_UserClntSrvcAssn]
(
	@USERTYPEID 	INTEGER,
	@CLNT_ENGMT_CD  VARCHAR(30),
	@USER_ID		INTEGER,
	@USER_TYP_KEY	INTEGER,
	@USERNAME		VARCHAR(300),
	@USER_STRT_DT	VARCHAR(10),
	@USER_END_DT	VARCHAR(10)


		
)
AS
BEGIN

DECLARE @LISERVICE VARCHAR(100) = ''
BEGIN TRY
SET NOCOUNT ON   

IF @USERTYPEID = 16
BEGIN
SELECT		C.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,A.SECUR_SRVC_NM,B.SRVC_EST_STRT_DT ,B.SRVC_EST_END_DT,
			[dbo].[fnGetMasterLkpNameByID](Z.USER_TYP_KEY) UserType,Z.ORG_TYP_KEY,Z.ORG_NM,Z.ORG_KEY,
			ISNULL(Z.USER_CLNT_SRVC_ASGN_KEY,0)USER_CLNT_SRVC_ASGN_KEY,ISNULL(Z.FST_NM,'') USERNAME,
			ISNULL(Z.USER_ID,0) USER_ID,ISNULL(Z.ROW_STS_KEY,0) ROW_STS_KEY,
			Z.USER_STRT_DT,Z.USER_END_DT,Z.USER_TYP_KEY
FROM		SECUR_SRVC				  A
JOIN		CLNT_SECUR_SRVC_ENGMT	  B
ON			A.SECUR_SRVC_CD			= B.SECUR_SRVC_CD
JOIN		CLNT_ENGMT				  C
ON			B.CLNT_ENGMT_CD			= C.CLNT_ENGMT_CD
JOIN		CLNT_ENGMT_USER_ASGN	  F
ON			C.CLNT_ENGMT_CD			= F.CLNT_ENGMT_CD
LEFT JOIN	
(
SELECT      E.CLNT_ENGMT_CD,E.SECUR_SRVC_CD,G.USER_TYP_KEY,E.USER_STRT_DT,E.USER_END_DT,E.USER_CLNT_SRVC_ASGN_KEY,
			ISNULL(G.FST_NM+' '+G.LST_NM,'') FST_NM,D.ORG_NM,D.ORG_KEY,D.ORG_TYP_KEY,G.USER_ID,E.ROW_STS_KEY
FROM		USER_CLNT_SRVC_ASGN		  E
JOIN		USER_PRFL				  G
ON			E.USER_ID				= G.USER_ID
JOIN		ORG						  D
ON			G.ORG_KEY				= D.ORG_KEY
AND			CONVERT(VARCHAR(20),E.USER_STRT_DT,101)  = CASE WHEN @USER_STRT_DT = '' THEN CONVERT(VARCHAR(20),E.USER_STRT_DT,101) ELSE @USER_STRT_DT END
AND			CONVERT(VARCHAR(20),E.USER_END_DT,101)	 = CASE WHEN @USER_END_DT  = '' THEN CONVERT(VARCHAR(20),E.USER_END_DT,101)  ELSE @USER_END_DT END
AND         G.USER_TYP_KEY			= CASE WHEN @USER_TYP_KEY = 0 THEN G.USER_TYP_KEY ELSE @USER_TYP_KEY END
AND			ISNULL(G.FST_NM+' '+G.LST_NM,'')  LIKE CASE WHEN ISNULL(@USERNAME,'') = '' THEN ISNULL(G.FST_NM+' '+G.LST_NM,'') ELSE '%' + @USERNAME + '%' END)Z
ON			C.CLNT_ENGMT_CD = Z.CLNT_ENGMT_CD
AND			A.SECUR_SRVC_CD	= Z.SECUR_SRVC_CD
WHERE		C.CLNT_ENGMT_CD			= @CLNT_ENGMT_CD
AND			F.USER_ID				= @USER_ID

END

IF @USERTYPEID = 18
BEGIN

SELECT		@LISERVICE = SECUR_SRVC_LIST_CD 
FROM		dbo.CLNT_ENGMT_USER_ASGN  A
JOIN		dbo.USER_PRFL			  B 
ON			A.USER_ID				= B.USER_ID
WHERE		CLNT_ENGMT_CD			= @CLNT_ENGMT_CD 
AND			B.USER_TYP_KEY			= 18
AND			A.USER_ID				= @USER_ID

SELECT		C.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,A.SECUR_SRVC_NM,B.SRVC_EST_STRT_DT ,B.SRVC_EST_END_DT,
			[dbo].[fnGetMasterLkpNameByID](Z.USER_TYP_KEY) UserType,Z.ORG_TYP_KEY,Z.ORG_NM,Z.ORG_KEY,
			ISNULL(Z.USER_CLNT_SRVC_ASGN_KEY,0)USER_CLNT_SRVC_ASGN_KEY,ISNULL(Z.FST_NM,'') USERNAME,
			ISNULL(Z.USER_ID,0) USER_ID,ISNULL(Z.ROW_STS_KEY,0) ROW_STS_KEY,
			Z.USER_STRT_DT,Z.USER_END_DT,Z.USER_TYP_KEY
FROM		SECUR_SRVC				  A
JOIN		CLNT_SECUR_SRVC_ENGMT	  B
ON			A.SECUR_SRVC_CD			= B.SECUR_SRVC_CD
JOIN		CLNT_ENGMT				  C
ON			B.CLNT_ENGMT_CD			= C.CLNT_ENGMT_CD
JOIN		CLNT_ENGMT_USER_ASGN	  F
ON			C.CLNT_ENGMT_CD			= F.CLNT_ENGMT_CD
JOIN	    dbo.FnSplit(@LISERVICE,',')		  H
ON		    A.SECUR_SRVC_CD			= H.items
LEFT JOIN	
(
SELECT      E.CLNT_ENGMT_CD,E.SECUR_SRVC_CD,G.USER_TYP_KEY,E.USER_STRT_DT,E.USER_END_DT,E.USER_CLNT_SRVC_ASGN_KEY,
			ISNULL(G.FST_NM+' '+G.LST_NM,'') FST_NM,D.ORG_NM,D.ORG_KEY,D.ORG_TYP_KEY,G.USER_ID,E.ROW_STS_KEY
FROM		USER_CLNT_SRVC_ASGN		  E
JOIN		USER_PRFL				  G
ON			E.USER_ID				= G.USER_ID
AND			G.USER_TYP_KEY			= 18
JOIN		ORG						  D
ON			G.ORG_KEY				= D.ORG_KEY
AND			CONVERT(VARCHAR(20),E.USER_STRT_DT,101)  = CASE WHEN @USER_STRT_DT = '' THEN CONVERT(VARCHAR(20),E.USER_STRT_DT,101) ELSE @USER_STRT_DT END
AND			CONVERT(VARCHAR(20),E.USER_END_DT,101)	 = CASE WHEN @USER_END_DT  = '' THEN CONVERT(VARCHAR(20),E.USER_END_DT,101)  ELSE @USER_END_DT END
AND         G.USER_TYP_KEY			= CASE WHEN @USER_TYP_KEY = 0 THEN G.USER_TYP_KEY ELSE @USER_TYP_KEY END
AND			ISNULL(G.FST_NM+' '+G.LST_NM,'')  LIKE CASE WHEN ISNULL(@USERNAME,'') = '' THEN ISNULL(G.FST_NM+' '+G.LST_NM,'') ELSE '%' + @USERNAME + '%' END)Z
ON			C.CLNT_ENGMT_CD = Z.CLNT_ENGMT_CD
AND			A.SECUR_SRVC_CD	= Z.SECUR_SRVC_CD
WHERE		C.CLNT_ENGMT_CD			= @CLNT_ENGMT_CD
AND			F.USER_ID				= @USER_ID


END


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END




/****** Object:  StoredProcedure [dbo].[LIST_UserClntSrvcAssn]    Script Date: 5/18/2016 1:21:23 PM ******/
SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[LIST_UserClntSrvcAssnTest]...';


GO
CREATE PROCEDURE [dbo].[LIST_UserClntSrvcAssnTest]
(
	@USERTYPEID 	INTEGER,
	@CLNT_ENGMT_CD  VARCHAR(30),
	@USER_ID		INTEGER,
	@USER_TYP_KEY	INTEGER,
	@USERNAME		VARCHAR(300),
	@USER_STRT_DT	VARCHAR(10),
	@USER_END_DT	VARCHAR(10)


		
)
AS
BEGIN

DECLARE @LISERVICE VARCHAR(100) = ''
BEGIN TRY
SET NOCOUNT ON

IF @USERTYPEID = 16
BEGIN
SELECT		C.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,A.SECUR_SRVC_NM,B.SRVC_EST_STRT_DT ,B.SRVC_EST_END_DT,
			[dbo].[fnGetMasterLkpNameByID](G.USER_TYP_KEY) UserType,D.ORG_TYP_KEY,D.ORG_NM,D.ORG_KEY,
			ISNULL(E.USER_CLNT_SRVC_ASGN_KEY,0)USER_CLNT_SRVC_ASGN_KEY,ISNULL(G.FST_NM+' '+G.LST_NM,'') USERNAME,
			ISNULL(E.USER_ID,0) USER_ID,ISNULL(E.ROW_STS_KEY,0) ROW_STS_KEY,
			E.USER_STRT_DT,E.USER_END_DT,G.USER_TYP_KEY
FROM		SECUR_SRVC				  A
JOIN		CLNT_SECUR_SRVC_ENGMT	  B
ON			A.SECUR_SRVC_CD			= B.SECUR_SRVC_CD
JOIN		CLNT_ENGMT				  C
ON			B.CLNT_ENGMT_CD			= C.CLNT_ENGMT_CD
JOIN		CLNT_ENGMT_USER_ASGN	  F
ON			C.CLNT_ENGMT_CD			= F.CLNT_ENGMT_CD
JOIN		USER_CLNT_SRVC_ASGN		  E
ON			C.CLNT_ENGMT_CD			= E.CLNT_ENGMT_CD
AND			B.SECUR_SRVC_CD			= E.SECUR_SRVC_CD
AND			CONVERT(VARCHAR(20),E.USER_STRT_DT,101)  = CASE WHEN @USER_STRT_DT = '' THEN CONVERT(VARCHAR(20),E.USER_STRT_DT,101) ELSE @USER_STRT_DT END
AND			CONVERT(VARCHAR(20),E.USER_END_DT,101)	 = CASE WHEN @USER_END_DT  = '' THEN CONVERT(VARCHAR(20),E.USER_END_DT,101)  ELSE @USER_END_DT END
LEFT JOIN		USER_PRFL				  G
ON			E.USER_ID				= G.USER_ID
AND			ISNULL(G.FST_NM+' '+G.LST_NM,'')  LIKE CASE WHEN ISNULL(@USERNAME,'') = '' THEN ISNULL(G.FST_NM+' '+G.LST_NM,'') ELSE '%@USERNAME%' END
JOIN		ORG						  D
ON			G.ORG_KEY				= D.ORG_KEY

AND         G.USER_TYP_KEY			= CASE WHEN @USER_TYP_KEY = 0 THEN G.USER_TYP_KEY ELSE @USER_TYP_KEY END

WHERE		C.CLNT_ENGMT_CD			= @CLNT_ENGMT_CD
AND			F.USER_ID				= @USER_ID

END


IF @USERTYPEID = 18
BEGIN

SELECT @LISERVICE = SECUR_SRVC_LIST_CD FROM dbo.CLNT_ENGMT_USER_ASGN A
JOIN dbo.USER_PRFL B ON A.USER_ID = B.USER_ID
WHERE CLNT_ENGMT_CD = @CLNT_ENGMT_CD AND B.USER_TYP_KEY= 18

SELECT		C.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,A.SECUR_SRVC_NM,B.SRVC_EST_STRT_DT ,B.SRVC_EST_END_DT,
			[dbo].[fnGetMasterLkpNameByID](G.USER_TYP_KEY) UserType,D.ORG_TYP_KEY,D.ORG_NM,D.ORG_KEY,
			ISNULL(E.USER_CLNT_SRVC_ASGN_KEY,0)USER_CLNT_SRVC_ASGN_KEY,ISNULL(G.FST_NM+' '+G.LST_NM,'') USERNAME,
			ISNULL(E.USER_ID,0) USER_ID,ISNULL(E.ROW_STS_KEY,0) ROW_STS_KEY,
			E.USER_STRT_DT,E.USER_END_DT,G.USER_TYP_KEY
FROM		SECUR_SRVC				  A
JOIN		CLNT_SECUR_SRVC_ENGMT	  B
ON			A.SECUR_SRVC_CD			= B.SECUR_SRVC_CD
JOIN		CLNT_ENGMT				  C
ON			B.CLNT_ENGMT_CD			= C.CLNT_ENGMT_CD
JOIN		CLNT_ENGMT_USER_ASGN	  F
ON			C.CLNT_ENGMT_CD			= F.CLNT_ENGMT_CD
JOIN	    dbo.FnSplit(@LISERVICE,',')		  H
ON		    A.SECUR_SRVC_CD				=     H.items
LEFT JOIN		USER_CLNT_SRVC_ASGN		  E
ON			C.CLNT_ENGMT_CD			= E.CLNT_ENGMT_CD
AND			B.SECUR_SRVC_CD			= E.SECUR_SRVC_CD
LEFT JOIN		USER_PRFL				  G
ON			E.USER_ID				= G.USER_ID

JOIN		ORG						  D
ON			G.ORG_KEY				= D.ORG_KEY

AND			CONVERT(VARCHAR(20),E.USER_STRT_DT,101)  = CASE WHEN @USER_STRT_DT = '' THEN CONVERT(VARCHAR(20),E.USER_STRT_DT,101) ELSE @USER_STRT_DT END
AND			CONVERT(VARCHAR(20),E.USER_END_DT,101)	 = CASE WHEN @USER_END_DT  = '' THEN CONVERT(VARCHAR(20),E.USER_END_DT,101)  ELSE @USER_END_DT END
AND         G.USER_TYP_KEY			= CASE WHEN @USER_TYP_KEY = 0 THEN G.USER_TYP_KEY ELSE @USER_TYP_KEY END
AND			ISNULL((G.FST_NM+' '+G.LST_NM),'')  LIKE CASE WHEN ISNULL(@USERNAME,'') = '' THEN ISNULL(G.FST_NM+' '+G.LST_NM,'') ELSE '%' + @USERNAME + '%' END
WHERE		C.CLNT_ENGMT_CD			= @CLNT_ENGMT_CD
AND			F.USER_ID				= @USER_ID

END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[LIST_UserNotSentEmails]...';


GO
CREATE PROCEDURE [dbo].[LIST_UserNotSentEmails]

AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


BEGIN 
      SELECT  USER_EMAIL_LOG,NTF_MSG_KEY,USER_ID,FROM_EMAIL_ID,TO_EMAIL_ID,
			  RESND_CNT,EMAIL_MSG_SBJ_TXT,EMAIL_MSG_CNTN_TXT
      FROM    USER_EMAIL_LOG   
      WHERE   SND_SUC_IND = 0   
      AND	  RESND_CNT <= 3
END 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[List_UserWorklistByOrg]...';


GO
CREATE PROCEDURE [dbo].[List_UserWorklistByOrg]
(
      @OrgID INT
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

      SELECT  A.USER_ID,A.ORG_KEY,B.ORG_NM,[dbo].[fnGetMasterLkpNameByID](USER_TYP_KEY) USER_TYP_KEY,
                       [dbo].[fnGetMasterLkpNameByID](A.ROW_STS_KEY)ROW_STS_KEY,
              FST_NM [First Name],LST_NM,MIDL_NM,(FST_NM+' '+LST_NM) [User Name],JOB_TITL_NM,EMAIL_ID,TEL_NBR,
              USER_VERF_IND, LCK_IND,
              LOGIN_ATMPT_CNT,LST_LOGIN_DT,PSWD_RSET_DT,A.CREAT_DT,A.CREAT_USER_ID
      FROM    USER_PRFL           A
      JOIN    ORG           B
      ON      A.ORG_KEY   = B.ORG_KEY
      WHERE   A.ORG_KEY   = CASE WHEN @OrgID = 0 THEN A.ORG_KEY ELSE @OrgID END
       -- AND     B.ROW_STS_KEY = 1
         AND     A.USER_ID > 3
         ORDER BY A.USER_ID DESC 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[MERGE_CLNT_VULN_INSTC_CISCO_PEN_TST_MT]...';


GO



/******************************
	** Desc: 
	** Auth: GM
	** Date: 09/16/2016
	**************************
	** Change History
	**************************
	**  Date	        Author                  Description	
	**  --------        --					------------------------------------
	**  10/19/2016		GM					Added OWASP_TOP_10_KEY
	**  11/29/2016		GM					Multi-tenancy changes
	**  01/23/2017		GM					Vuln Category changes
	**************************************/

/*

DECLARE @SRC_COUNTS INT = 0 
		,@INSERT_COUNTS INT = 0
		,@UPDATE_COUNTS INT = 0
		,@DELETE_COUNTS INT = 0;
EXEC [dbo].[MERGE_CLNT_VULN_INSTC_CISCO_PEN_TST_MT] 
	'JOH'
	,'[JOH].[CISCO_PEN_TST_STG]'
	,'[JOH].[CLNT_VULN_INSTC]'
	, @SRC_COUNTS OUTPUT
	, @INSERT_COUNTS OUTPUT 
	, @UPDATE_COUNTS OUTPUT 
	, @DELETE_COUNTS OUTPUT

SELECT @SRC_COUNTS  
SELECT @INSERT_COUNTS  
SELECT @UPDATE_COUNTS  
SELECT @DELETE_COUNTS 

--## - PLEASE VERIFY
*/



CREATE PROCEDURE [dbo].[MERGE_CLNT_VULN_INSTC_CISCO_PEN_TST_MT]
	@SCHEMA_NM VARCHAR(1000),
	@STG_TBL_NAME VARCHAR(1000),
	@MASTER_TBL_NAME VARCHAR(1000),
	@SRC_COUNTS  INT OUTPUT,
	@INSERT_COUNTS INT OUTPUT,
	@UPDATE_COUNTS INT OUTPUT,
	@DELETE_COUNTS INT OUTPUT
AS
BEGIN

	IF OBJECT_ID('tempdb..#Vulnerability_PenTst') IS NOT NULL
	DROP TABLE #Vulnerability_PenTst;
		
	CREATE TABLE #Vulnerability_PenTst(
		[ROW_STS_KEY] [int] NOT NULL,
		[ORG_KEY] [int] NOT NULL,
		[CLNT_ENGMT_CD] [varchar](30) NOT NULL,
		[SECUR_SRVC_CD] [varchar](10) NOT NULL,
		[VULN_SRC_KEY] [int] NOT NULL,
		[VULN_INSTC_STS_CD] [varchar](3) NOT NULL,
		[VULN_SEV_CD] [varchar](3) NULL,
		[VULN_IMP_CD] [varchar](3) NULL,
		[RISK_PRBL_CD] [varchar](3) NULL,
		[RMDTN_CST_EFFRT_CD] [varchar](3) NULL,
		[VULN_CATGY_CD] [varchar](10) NULL,
		[OWASP_TOP_10_KEY] [int] NULL,
		[CVE_ID] [varchar](15) NULL,
		[OS_KEY] [int] NULL,
		[SRC_VULN_SCAN_ID] [varchar](150) NULL,
		[SRC_VULN_SCAN_STRT_DT] [datetime] NULL,
		[SRC_VULN_SCAN_END_DT] [datetime] NULL,
		[SRC_VULN_INSTC_ID] [varchar](150) NULL,
		[SRC_VULN_ID] [varchar](150) NULL,
		[VULN_NM] [varchar](255) NOT NULL,
		[VULN_DESC] [text] NULL,
		[VULN_CREAT_DT] [datetime] NOT NULL,
		[IPADR] [varchar](39) NULL,
		[PORT_NBR] [int] NULL,
		[SRC_ADVS_TXT] [varchar](1024) NULL,
		[SRC_VULN_BAS_SCOR] [decimal](10, 2) NULL,
		[VULN_BAS_SCOR] [decimal](10, 2) NULL,
		[VULN_IMP_SUB_SCOR] [decimal](10, 2) NULL,
		[VULN_EXPLT_SUB_SCOR] [decimal](10, 2) NULL,
		[VULN_TMPRL_SCOR] [decimal](10, 2) NULL,
		[VULN_ENV_SCOR] [decimal](10, 2) NULL,
		[VULN_OVALL_SCOR] [decimal](10, 2) NULL,
		[VULN_VCTR_TXT] [varchar](100) NULL,
		[NTWK_NM] [varchar](150) NULL,
		[PRTCL_NM] [varchar](255) NULL,
		[HST_NM] [varchar](150) NULL,
		[DOM_NM] [varchar](150) NULL,
		[SFTW_NM] [varchar](150) NULL,
		[APPL_URL] [nvarchar](2000) NULL,
		[NETBIOS_NM] [varchar](150) NULL,
		[MAC_ADR_NM] [varchar](150) NULL,
		[VULN_TECH_COMMT_TXT] [varchar](MAX) NULL,
		[VULN_IMP_COMMT_TXT] [varchar](MAX) NULL,
		[RECOM_COMMT_TXT] [varchar](MAX) NULL,
		[ROOT_CAUS_COMMT_TXT] [varchar](MAX) NULL,
		[APPL_FL_UPLOAD_LOG_KEY] [int] NULL
	) 

	IF OBJECT_ID('tempdb..#OP_SummaryOfChanges') IS NOT NULL
	DROP TABLE #OP_SummaryOfChanges;

	CREATE TABLE #OP_SummaryOfChanges(
		[INSERT_COUNTS] [int] NULL,
		[UPDATE_COUNTS] [int] NULL,
		[DELETE_COUNTS] [int] NULL,
	);

	/* BEGIN: INSERT OS_NAME DATA IF NOT AVAILABLE	*/
	DECLARE @SQL_OS_NM VARCHAR(MAX);
	SET @SQL_OS_NM = '
		DECLARE @ETL_AUD_LOG_KEY INT
			, @OS_NM AS OS_NMs
			, @SRC_COUNTS_OS_NM INT = 0
			, @INSERT_COUNTS_OS_NM INT = 0

		EXEC [dbo].[INS_ETL_AUD_LOG]   	
			@JOB_NM         = '''+ @SCHEMA_NM +':MERGE_CLNT_VULN_INSTC_CISCO_PEN_TST:OS_NAME''
			,@JOB_STRT_DT         = NULL
			,@JOB_END_DT         = NULL
			,@JOB_STS       = ''IN PROGRESS''
			,@SRC_FL_NM       = NULL
			,@SRC_FL_FLDR_PTH  = NULL
			,@TGT_TBL_NM       = ''[dbo].[OS]''
			,@SRC_ROW_CNT     =  @SRC_COUNTS_OS_NM
			,@TGT_INSRT_ROW_CNT = @INSERT_COUNTS_OS_NM
			,@TGT_UPDT_ROW_CNT = 0 
			,@TGT_REJ_ROW_CNT  = 0
    		,@RETVAL = @ETL_AUD_LOG_KEY OUTPUT;

		INSERT @OS_NM(OS_NM)
		SELECT DISTINCT
			LTRIM(RTRIM(pentst_stg.OS)) AS OS_NM
		FROM ' + @STG_TBL_NAME + '  pentst_stg 
		WHERE ISNULL(LTRIM(RTRIM(pentst_stg.OS)),'''') <> '''';

		EXEC [dbo].[MERGE_OS_MAP] @OS_NM, @SRC_COUNTS_OS_NM OUTPUT,  @INSERT_COUNTS_OS_NM OUTPUT;

		EXEC [dbo].[UPDATE_ETL_AUD_LOG]   	
			@ETL_AUD_LOG_KEY         = @ETL_AUD_LOG_KEY
			,@JOB_END_DT         = NULL
			,@JOB_STS       = ''COMPLETED''
			,@SRC_ROW_CNT     =  @SRC_COUNTS_OS_NM
			,@TGT_INSRT_ROW_CNT = @INSERT_COUNTS_OS_NM
			,@TGT_UPDT_ROW_CNT = 0 
			,@TGT_REJ_ROW_CNT  = 0;
	';
	EXEC (@SQL_OS_NM);
	/* END */

	/* BEGIN: INSERT VULN_NM DATA IF NOT AVAILABLE	*/
	DECLARE @SQL_VULN_NM VARCHAR(MAX);

	SET @SQL_VULN_NM = '
		DECLARE @ETL_AUD_LOG_KEY INT
			, @VULN_NM AS VULN_NMs
			, @SRC_COUNTS_VULN_NM INT = 0
			, @INSERT_COUNTS_VULN_NM INT = 0

		EXEC [dbo].[INS_ETL_AUD_LOG]   	
			@JOB_NM         = '''+ @SCHEMA_NM +':MERGE_CLNT_VULN_INSTC_CISCO_PEN_TST:VULN_NM''
			,@JOB_STRT_DT         = NULL
			,@JOB_END_DT         = NULL
			,@JOB_STS       = ''IN PROGRESS''
			,@SRC_FL_NM       = NULL
			,@SRC_FL_FLDR_PTH  = NULL
			,@TGT_TBL_NM       = ''[dbo].[VULN]''
			,@SRC_ROW_CNT     =  @SRC_COUNTS_VULN_NM
			,@TGT_INSRT_ROW_CNT = @INSERT_COUNTS_VULN_NM
			,@TGT_UPDT_ROW_CNT = 0 
			,@TGT_REJ_ROW_CNT  = 0
    		,@RETVAL = @ETL_AUD_LOG_KEY OUTPUT;

		INSERT @VULN_NM(VULN_NM)
		SELECT DISTINCT
			LTRIM(RTRIM(pentst_stg.VULN_CLSS)) AS VULN_NM
		FROM ' + @STG_TBL_NAME + '  pentst_stg 
		WHERE ISNULL(LTRIM(RTRIM(pentst_stg.VULN_CLSS)),'''') <> '''';

		EXEC [dbo].[MERGE_VULN_CATGY_MAP] @VULN_NM, @SRC_COUNTS_VULN_NM OUTPUT,  @INSERT_COUNTS_VULN_NM OUTPUT;

		EXEC [dbo].[UPDATE_ETL_AUD_LOG]   	
			@ETL_AUD_LOG_KEY         = @ETL_AUD_LOG_KEY
			,@JOB_END_DT         = NULL
			,@JOB_STS       = ''COMPLETED''
			,@SRC_ROW_CNT     =  @SRC_COUNTS_VULN_NM
			,@TGT_INSRT_ROW_CNT = @INSERT_COUNTS_VULN_NM
			,@TGT_UPDT_ROW_CNT = 0 
			,@TGT_REJ_ROW_CNT  = 0;
	';
	EXEC (@SQL_VULN_NM);
	/* END */

	-- SET XACT_ABORT ON will cause the transaction to be uncommittable when the constraint violation occurs. 
	SET XACT_ABORT ON;

	BEGIN TRY
		SET NOCOUNT ON
		DECLARE @SQL_TEMP VARCHAR(MAX), @SQL_MERGE VARCHAR(MAX);
		BEGIN TRANSACTION CISCO_PEN_TST_MERGE WITH MARK N'CISCO_PEN_TST_MERGE to process the Vulnerability data.'
		SET @SQL_TEMP = '
			INSERT #Vulnerability_PenTst
			SELECT DISTINCT
				fl_upd_log.ROW_STS_KEY
				,fl_upd_log.ORG_KEY
				,client_engmt.CLNT_ENGMT_CD
				,fl_upd_log.SECUR_SRVC_CD 
				,fl_upd_log.SRC_KEY AS VULN_SRC_KEY
				,(SELECT VULN_INSTC_STS_CD FROM dbo.VULN_INSTC_STS WHERE VULN_INSTC_STS_NM = ''Open'') AS VULN_INSTC_STS_CD --##
				,xref_sev.TGT_REF_CD AS VULN_SEV_CD
				,NULL AS VULN_IMP_CD
				,xref_prbl.TGT_REF_CD AS RISK_PRBL_CD
				,xref_rmdtn_effrt.TGT_REF_CD AS RMDTN_CST_EFFRT_CD
				,VULN_.VULN_CATGY_CD AS VULN_CATGY_CD
				,NULL AS OWASP_TOP_10_KEY
				,RTRIM(CASE 
						WHEN (charindex(''CVE-'', CVE) > 0 AND charindex('','', CVE, charindex(''CVE-'', CVE)) = 0 ) 
							THEN substring(CVE, charindex(''CVE-'', CVE), charindex('','', CVE) - charindex(''CVE-'', CVE) + 20)  
						WHEN (charindex(''CVE-'', CVE) > 0 AND charindex('','', CVE, charindex(''CVE-'', CVE)) > 0 ) 
							THEN substring(CVE, charindex(''CVE-'', CVE), charindex('','', CVE, charindex(''CVE-'', CVE)) - charindex(''CVE-'', CVE)) 
					ELSE NULL 
					END)  AS CVE_ID
				,OS_.OS_KEY AS OS_KEY --##
				,pentst_stg.PROJ_ID AS SRC_VULN_SCAN_ID
				,pentst_stg.PROJ_STRT_DT AS SRC_VULN_SCAN_STRT_DT
				,pentst_stg.PROJ_END_DT AS SRC_VULN_SCAN_END_DT
				,NULL AS SRC_VULN_INSTC_ID
				,pentst_stg.ID AS SRC_VULN_ID
				,pentst_stg.VULN_CLSS AS VULN_NM
				,CAST(pentst_stg.[DESC] AS VARCHAR(MAX)) AS VULN_DESC
				,pentst_stg.CREAT_AT AS VULN_CREAT_DT
				,pentst_stg.IP AS IPADR
				,pentst_stg.PORT AS PORT_NBR
				,pentst_stg.CVE AS SRC_ADVS_TXT
				,pentst_stg.CVSS_BAS AS SRC_VULN_BAS_SCOR
				,NULL AS VULN_BAS_SCOR
				,NULL AS VULN_IMP_SUB_SCOR
				,NULL AS VULN_EXPLT_SUB_SCOR
				,NULL AS VULN_TMPRL_SCOR
				,NULL AS VULN_ENV_SCOR
				,NULL AS VULN_OVALL_SCOR
				,NULL AS VULN_VCTR_TXT
				,NULL AS NTWK_NM
				,pentst_stg.PRTCL AS PRTCL_NM
				,pentst_stg.HST AS HST_NM
				,NULL AS DOM_NM
				,NULL AS SFTW_NM
				,pentst_stg.URL AS APPL_URL
				,NULL AS NETBIOS_NM
				,NULL AS MAC_ADR_NM
				,CAST(pentst_stg.DTL AS VARCHAR(MAX)) AS VULN_TECH_COMMT_TXT
				,CAST(pentst_stg.SECUR_IMP AS VARCHAR(MAX)) AS VULN_IMP_COMMT_TXT
				,CAST(pentst_stg.MITG_FCT AS VARCHAR(MAX)) AS RECOM_COMMT_TXT
				,NULL AS ROOT_CAUS_COMMT_TXT
				,pentst_stg.APPL_FL_UPLOAD_LOG_KEY AS APPL_FL_UPLOAD_LOG_KEY


			FROM ' + @STG_TBL_NAME + ' pentst_stg
			INNER JOIN dbo.APPL_FL_UPLOAD_LOG fl_upd_log
				ON pentst_stg.APPL_FL_UPLOAD_LOG_KEY = fl_upd_log.APPL_FL_UPLOAD_LOG_KEY
			INNER JOIN dbo.CLNT_SECUR_SRVC_ENGMT client_engmt
				ON fl_upd_log.CLNT_ENGMT_CD = client_engmt.CLNT_ENGMT_CD
				AND fl_upd_log.SECUR_SRVC_CD = client_engmt.SECUR_SRVC_CD
			LEFT JOIN dbo.OS OS_
				ON OS_.OS_NM = LTRIM(RTRIM(pentst_stg.OS))
			LEFT JOIN dbo.VULN VULN_
				ON VULN_.VULN_NM = LTRIM(RTRIM(pentst_stg.VULN_CLSS))
			LEFT JOIN dbo.CD_XREF xref_sev
				ON xref_sev.SRC_REF_CD = pentst_stg.SEV
				AND xref_sev.SRC_REF_NM = pentst_stg.SEV_LBL
				AND xref_sev.REFERRENCE_TYP_NM = ''Vulnerability Severity''
				AND xref_sev.SRC_KEY IN (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Source'' and LKP_ENTY_NM = ''CISCO'')
			LEFT JOIN dbo.CD_XREF xref_prbl
				ON xref_prbl.SRC_REF_CD = pentst_stg.PRBL
				AND xref_prbl.SRC_REF_NM = pentst_stg.PRBL_LBL
				AND xref_prbl.REFERRENCE_TYP_NM = ''Risk Probability''
				AND xref_prbl.SRC_KEY IN (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Source'' and LKP_ENTY_NM = ''CISCO'')
			LEFT JOIN dbo.CD_XREF xref_rmdtn_effrt
				ON xref_rmdtn_effrt.SRC_REF_CD = pentst_stg.RMDTN_EFFRT
				AND xref_rmdtn_effrt.SRC_REF_NM = pentst_stg.RMDTN_EFFRT_LBL
				AND xref_rmdtn_effrt.REFERRENCE_TYP_NM = ''Remediation Cost Effort''
				AND xref_rmdtn_effrt.SRC_KEY IN (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Source'' and LKP_ENTY_NM = ''CISCO'')
			WHERE fl_upd_log.ROW_STS_KEY = (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Row Status'' and LKP_ENTY_NM = ''Active'')
				AND client_engmt.ROW_STS_KEY = (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Row Status'' and LKP_ENTY_NM = ''Active'')
		';
		EXEC (@SQL_TEMP);

		UPDATE #Vulnerability_PenTst SET CVE_ID = NULL WHERE ISNULL(CVE_ID,'') = '';

		UPDATE vlun_master SET vlun_master.VULN_VCTR_TXT = cve.VCTR_TXT
			,vlun_master.VULN_BAS_SCOR = cve.BAS_SCOR
			,vlun_master.VULN_IMP_SUB_SCOR = cve.IMP_SUB_SCOR
			,vlun_master.VULN_EXPLT_SUB_SCOR = cve.EXPLT_SUB_SCOR 
			,vlun_master.VULN_OVALL_SCOR = cve.BAS_SCOR
		FROM #Vulnerability_PenTst vlun_master
		JOIN dbo.CVE cve
			ON vlun_master.CVE_ID = cve.CVE_ID;

		-- Update CVE_ID as NULL, if not in the reference table
		UPDATE vlun_master SET CVE_ID = NULL
		FROM  #Vulnerability_PenTst vlun_master
		LEFT OUTER JOIN dbo.CVE cve
			ON vlun_master.CVE_ID = cve.CVE_ID
		WHERE cve.CVE_ID IS NULL;

		SELECT @SRC_COUNTS = COUNT(*) FROM #Vulnerability_PenTst
		PRINT N'Message: TOTAL ' + CAST(@SRC_COUNTS AS VARCHAR) + N' RECORDS FROM SOURCE.'		

		SET @SQL_MERGE = '
			DECLARE @SummaryOfChanges table (Change VARCHAR(20));

			;WITH _target AS 
			(
				SELECT *
				FROM ' + @MASTER_TBL_NAME + '
				WHERE SECUR_SRVC_CD IN(''PT'') 
			)
			, _source AS 
			(
				SELECT ROW_STS_KEY
				,ORG_KEY
				,CLNT_ENGMT_CD
				,SECUR_SRVC_CD
				,VULN_SRC_KEY
				,VULN_INSTC_STS_CD
				,VULN_SEV_CD
				,VULN_IMP_CD
				,RISK_PRBL_CD
				,RMDTN_CST_EFFRT_CD
				,VULN_CATGY_CD
				,OWASP_TOP_10_KEY
				,CVE_ID
				,OS_KEY
				,SRC_VULN_SCAN_ID
				,SRC_VULN_SCAN_STRT_DT
				,SRC_VULN_SCAN_END_DT
				,SRC_VULN_INSTC_ID
				,SRC_VULN_ID
				,VULN_NM
				,CAST(VULN_DESC AS TEXT) AS VULN_DESC
				,VULN_CREAT_DT
				,IPADR
				,PORT_NBR
				,SRC_ADVS_TXT
				,SRC_VULN_BAS_SCOR
				,VULN_BAS_SCOR
				,VULN_IMP_SUB_SCOR
				,VULN_EXPLT_SUB_SCOR
				,VULN_TMPRL_SCOR
				,VULN_ENV_SCOR
				,VULN_OVALL_SCOR
				,VULN_VCTR_TXT
				,NTWK_NM
				,PRTCL_NM
				,HST_NM
				,DOM_NM
				,SFTW_NM
				,APPL_URL
				,NETBIOS_NM
				,MAC_ADR_NM
				,CAST(VULN_TECH_COMMT_TXT AS TEXT) AS VULN_TECH_COMMT_TXT
				,CAST(VULN_IMP_COMMT_TXT AS TEXT) AS VULN_IMP_COMMT_TXT
				,CAST(RECOM_COMMT_TXT AS TEXT) AS RECOM_COMMT_TXT
				,CAST(ROOT_CAUS_COMMT_TXT AS TEXT) AS ROOT_CAUS_COMMT_TXT
				,APPL_FL_UPLOAD_LOG_KEY
				FROM #Vulnerability_PenTst
			)

			MERGE INTO _target
			USING _source ON (
				_target.CLNT_ENGMT_CD=_source.CLNT_ENGMT_CD
				AND _target.SECUR_SRVC_CD=_source.SECUR_SRVC_CD
				AND _target.ROW_STS_KEY=_source.ROW_STS_KEY
				AND _target.ORG_KEY=_source.ORG_KEY
				AND _target.VULN_SRC_KEY=_source.VULN_SRC_KEY
				AND _target.VULN_INSTC_STS_CD=_source.VULN_INSTC_STS_CD

				AND ISNULL(_target.SRC_VULN_SCAN_ID,0)=ISNULL(_source.SRC_VULN_SCAN_ID,0)
				AND _target.SRC_VULN_ID=_source.SRC_VULN_ID
				AND _target.APPL_FL_UPLOAD_LOG_KEY=_source.APPL_FL_UPLOAD_LOG_KEY
				)
			WHEN NOT MATCHED THEN INSERT (
				ROW_STS_KEY
				, ORG_KEY
				, CLNT_ENGMT_CD
				, SECUR_SRVC_CD
				, VULN_SRC_KEY
				, VULN_INSTC_STS_CD
				, VULN_SEV_CD
				, VULN_IMP_CD
				, RISK_PRBL_CD
				, RMDTN_CST_EFFRT_CD
				, VULN_CATGY_CD
				, OWASP_TOP_10_KEY
				, CVE_ID
				, OS_KEY
				, SRC_VULN_SCAN_ID
				, SRC_VULN_SCAN_STRT_DT
				, SRC_VULN_SCAN_END_DT
				, SRC_VULN_INSTC_ID
				, SRC_VULN_ID
				, VULN_NM
				, VULN_DESC
				, VULN_CREAT_DT
				, IPADR
				, PORT_NBR
				, SRC_ADVS_TXT
				, SRC_VULN_BAS_SCOR
				, VULN_BAS_SCOR
				, VULN_IMP_SUB_SCOR
				, VULN_EXPLT_SUB_SCOR
				, VULN_TMPRL_SCOR
				, VULN_ENV_SCOR
				, VULN_OVALL_SCOR
				, VULN_VCTR_TXT
				, NTWK_NM
				, PRTCL_NM
				, HST_NM
				, DOM_NM
				, SFTW_NM
				, APPL_URL
				, NETBIOS_NM
				, MAC_ADR_NM
				, VULN_TECH_COMMT_TXT
				, VULN_IMP_COMMT_TXT
				, RECOM_COMMT_TXT
				, ROOT_CAUS_COMMT_TXT
				, APPL_FL_UPLOAD_LOG_KEY
				, CREAT_DT
				, CREAT_USER_ID
			)			
			VALUES (
				_source.ROW_STS_KEY
				,_source.ORG_KEY
				,_source.CLNT_ENGMT_CD
				,_source.SECUR_SRVC_CD
				,_source.VULN_SRC_KEY
				,_source.VULN_INSTC_STS_CD
				,_source.VULN_SEV_CD
				,_source.VULN_IMP_CD
				,_source.RISK_PRBL_CD
				,_source.RMDTN_CST_EFFRT_CD
				,_source.VULN_CATGY_CD
				,_source.OWASP_TOP_10_KEY
				,_source.CVE_ID
				,_source.OS_KEY
				,_source.SRC_VULN_SCAN_ID
				,_source.SRC_VULN_SCAN_STRT_DT
				,_source.SRC_VULN_SCAN_END_DT
				,_source.SRC_VULN_INSTC_ID
				,_source.SRC_VULN_ID
				,_source.VULN_NM
				,_source.VULN_DESC
				,_source.VULN_CREAT_DT
				,_source.IPADR
				,_source.PORT_NBR
				,_source.SRC_ADVS_TXT
				,_source.SRC_VULN_BAS_SCOR
				,_source.VULN_BAS_SCOR
				,_source.VULN_IMP_SUB_SCOR
				,_source.VULN_EXPLT_SUB_SCOR
				,_source.VULN_TMPRL_SCOR
				,_source.VULN_ENV_SCOR
				,_source.VULN_OVALL_SCOR
				,_source.VULN_VCTR_TXT
				,_source.NTWK_NM
				,_source.PRTCL_NM
				,_source.HST_NM
				,_source.DOM_NM
				,_source.SFTW_NM
				,_source.APPL_URL
				,_source.NETBIOS_NM
				,_source.MAC_ADR_NM
				,_source.VULN_TECH_COMMT_TXT
				,_source.VULN_IMP_COMMT_TXT
				,_source.RECOM_COMMT_TXT
				,_source.ROOT_CAUS_COMMT_TXT
				,_source.APPL_FL_UPLOAD_LOG_KEY
				,GETDATE() 
				,''2'' 
			)

			OUTPUT $ACTION INTO @SummaryOfChanges
			OPTION(RECOMPILE);

			INSERT INTO #OP_SummaryOfChanges
			VALUES(
				(SELECT COUNT(*) AS INSERT_COUNTS FROM @SummaryOfChanges WHERE Change = ''INSERT'')
				,(SELECT COUNT(*) AS UPDATE_COUNTS FROM @SummaryOfChanges WHERE Change = ''UPDATE'')
				,(SELECT COUNT(*) AS DELETE_COUNTS FROM @SummaryOfChanges WHERE Change = ''DELETE'')
			);
		'
		EXEC (@SQL_MERGE);

		SELECT @INSERT_COUNTS = INSERT_COUNTS FROM #OP_SummaryOfChanges
		PRINT N'Message: Total ' + CAST(@INSERT_COUNTS AS VARCHAR) + N' VULN INSERTED.'	

		SELECT @UPDATE_COUNTS = UPDATE_COUNTS FROM #OP_SummaryOfChanges
		PRINT N'Message: TOTAL ' + CAST(@UPDATE_COUNTS AS VARCHAR) + N' VULN UPDATED.'				

		SELECT @DELETE_COUNTS = DELETE_COUNTS FROM #OP_SummaryOfChanges
		PRINT N'Message: Total ' + CAST(@DELETE_COUNTS AS VARCHAR) + N' VULN INSERTED.'	

		IF (XACT_STATE()) = 1
		BEGIN
			PRINT N'The transaction is committable. Committing transaction.'
			COMMIT TRANSACTION CISCO_PEN_TST_MERGE;
		END;

	END TRY

        
	BEGIN CATCH

		IF (XACT_STATE()) = -1
		BEGIN
			PRINT N'The transaction is in an uncommittable state. Rolling back transaction.'
			ROLLBACK TRANSACTION CISCO_PEN_TST_MERGE
		END;
			
		DECLARE @ErrorNumber INT = ERROR_NUMBER();
		DECLARE @ErrorLine INT = ERROR_LINE();
		DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();

		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH

END
GO
PRINT N'Creating [dbo].[MERGE_CLNT_VULN_INSTC_CISCO_SECUR_RISK_ASES_MT]...';


GO

/******************************
	** Desc: 
	** Auth: GM
	** Date: 09/16/2016
	**************************
	** Change History
	**************************
	**  Date	        Author                  Description	
	**  --------        --					------------------------------------
	**  10/19/2016		GM					Added OWASP_TOP_10_KEY
	**  11/29/2016		GM					Multi-tenancy changes
	**  01/23/2017		GM					Vuln Category changes
	**************************************/

/*
DECLARE @SRC_COUNTS INT = 0 
		,@INSERT_COUNTS INT = 0
		,@UPDATE_COUNTS INT = 0
		,@DELETE_COUNTS INT = 0;
EXEC [dbo].[MERGE_CLNT_VULN_INSTC_CISCO_SECUR_RISK_ASES_MT] 
	'JOH'
	,'[JOH].[CISCO_SECUR_RISK_ASES_STG]'
	,'[JOH].[CLNT_VULN_INSTC]'
	, @SRC_COUNTS OUTPUT
	, @INSERT_COUNTS OUTPUT 
	, @UPDATE_COUNTS OUTPUT 
	, @DELETE_COUNTS OUTPUT

SELECT @SRC_COUNTS  
SELECT @INSERT_COUNTS  
SELECT @UPDATE_COUNTS  
SELECT @DELETE_COUNTS 
--## - PLEASE VERIFY
*/

CREATE PROCEDURE [dbo].[MERGE_CLNT_VULN_INSTC_CISCO_SECUR_RISK_ASES_MT]
	@SCHEMA_NM VARCHAR(1000),
	@STG_TBL_NAME VARCHAR(1000),
	@MASTER_TBL_NAME VARCHAR(1000),
	@SRC_COUNTS  INT OUTPUT,
	@INSERT_COUNTS INT OUTPUT,
	@UPDATE_COUNTS INT OUTPUT,
	@DELETE_COUNTS INT OUTPUT
AS
BEGIN

	IF OBJECT_ID('tempdb..#Vulnerability_SecurRskAses') IS NOT NULL
	DROP TABLE #Vulnerability_SecurRskAses;
		
	CREATE TABLE #Vulnerability_SecurRskAses(
		[ROW_STS_KEY] [int] NOT NULL,
		[ORG_KEY] [int] NOT NULL,
		[CLNT_ENGMT_CD] [varchar](30) NOT NULL,
		[SECUR_SRVC_CD] [varchar](10) NOT NULL,
		[VULN_SRC_KEY] [int] NOT NULL,
		[VULN_INSTC_STS_CD] [varchar](3) NOT NULL,
		[VULN_SEV_CD] [varchar](3) NULL,
		[VULN_IMP_CD] [varchar](3) NULL,
		[RISK_PRBL_CD] [varchar](3) NULL,
		[RMDTN_CST_EFFRT_CD] [varchar](3) NULL,
		[VULN_CATGY_CD] [varchar](10) NULL,
		[OWASP_TOP_10_KEY] [int] NULL,
		[CVE_ID] [varchar](15) NULL,
		[OS_KEY] [int] NULL,
		[SRC_VULN_SCAN_ID] [varchar](150) NULL,
		[SRC_VULN_SCAN_STRT_DT] [datetime] NULL,
		[SRC_VULN_SCAN_END_DT] [datetime] NULL,
		[SRC_VULN_INSTC_ID] [varchar](150) NULL,
		[SRC_VULN_ID] [varchar](150) NULL,
		[VULN_NM] [varchar](255) NOT NULL,
		[VULN_DESC] [text] NULL,
		[VULN_CREAT_DT] [datetime] NOT NULL,
		[IPADR] [varchar](39) NULL,
		[PORT_NBR] [int] NULL,
		[SRC_ADVS_TXT] [varchar](1024) NULL,
		[SRC_VULN_BAS_SCOR] [decimal](10, 2) NULL,
		[VULN_BAS_SCOR] [decimal](10, 2) NULL,
		[VULN_IMP_SUB_SCOR] [decimal](10, 2) NULL,
		[VULN_EXPLT_SUB_SCOR] [decimal](10, 2) NULL,
		[VULN_TMPRL_SCOR] [decimal](10, 2) NULL,
		[VULN_ENV_SCOR] [decimal](10, 2) NULL,
		[VULN_OVALL_SCOR] [decimal](10, 2) NULL,
		[VULN_VCTR_TXT] [varchar](100) NULL,
		[NTWK_NM] [varchar](150) NULL,
		[PRTCL_NM] [varchar](255) NULL,
		[HST_NM] [varchar](150) NULL,
		[DOM_NM] [varchar](150) NULL,
		[SFTW_NM] [varchar](150) NULL,
		[APPL_URL] [nvarchar](2000) NULL,
		[NETBIOS_NM] [varchar](150) NULL,
		[MAC_ADR_NM] [varchar](150) NULL,
		[VULN_TECH_COMMT_TXT] [varchar](MAX) NULL,
		[VULN_IMP_COMMT_TXT] [varchar](MAX) NULL,
		[RECOM_COMMT_TXT] [varchar](MAX) NULL,
		[ROOT_CAUS_COMMT_TXT] [varchar](MAX) NULL,
		[APPL_FL_UPLOAD_LOG_KEY] [int] NULL
	) 

	IF OBJECT_ID('tempdb..#OP_SummaryOfChanges') IS NOT NULL
	DROP TABLE #OP_SummaryOfChanges;

	CREATE TABLE #OP_SummaryOfChanges(
		[INSERT_COUNTS] [int] NULL,
		[UPDATE_COUNTS] [int] NULL,
		[DELETE_COUNTS] [int] NULL,
	);

	/* BEGIN: INSERT OS_NAME DATA IF NOT AVAILABLE	*/
	/* END */
	/* BEGIN: INSERT VULN_NM DATA IF NOT AVAILABLE	*/
	DECLARE @SQL_VULN_NM VARCHAR(MAX);
	SET @SQL_VULN_NM = '
		DECLARE @ETL_AUD_LOG_KEY INT
			, @VULN_NM AS VULN_NMs
			, @SRC_COUNTS_VULN_NM INT = 0
			, @INSERT_COUNTS_VULN_NM INT = 0

		EXEC [dbo].[INS_ETL_AUD_LOG]   	
			@JOB_NM         = '''+ @SCHEMA_NM +':MERGE_CISCO_SECUR_RISK_ASES:VULN_NM''
			,@JOB_STRT_DT         = NULL
			,@JOB_END_DT         = NULL
			,@JOB_STS       = ''IN PROGRESS''
			,@SRC_FL_NM       = NULL
			,@SRC_FL_FLDR_PTH  = NULL
			,@TGT_TBL_NM       = ''[dbo].[VULN]''
			,@SRC_ROW_CNT     =  @SRC_COUNTS_VULN_NM
			,@TGT_INSRT_ROW_CNT = @INSERT_COUNTS_VULN_NM
			,@TGT_UPDT_ROW_CNT = 0 
			,@TGT_REJ_ROW_CNT  = 0
    		,@RETVAL = @ETL_AUD_LOG_KEY OUTPUT;

		INSERT @VULN_NM(VULN_NM)
		SELECT DISTINCT
			LTRIM(RTRIM(riskases_stg.RISK_NM)) AS VULN_NM
		FROM ' + @STG_TBL_NAME + ' riskases_stg 
		WHERE ISNULL(LTRIM(RTRIM(riskases_stg.RISK_NM)),'''') <> '''';

		EXEC [dbo].[MERGE_VULN_CATGY_MAP] @VULN_NM, @SRC_COUNTS_VULN_NM OUTPUT,  @INSERT_COUNTS_VULN_NM OUTPUT;

		EXEC [dbo].[UPDATE_ETL_AUD_LOG]   	
			@ETL_AUD_LOG_KEY         = @ETL_AUD_LOG_KEY
			,@JOB_END_DT         = NULL
			,@JOB_STS       = ''COMPLETED''
			,@SRC_ROW_CNT     =  @SRC_COUNTS_VULN_NM
			,@TGT_INSRT_ROW_CNT = @INSERT_COUNTS_VULN_NM
			,@TGT_UPDT_ROW_CNT = 0 
			,@TGT_REJ_ROW_CNT  = 0;
	';
	EXEC (@SQL_VULN_NM);
	/* END */
	
	-- SET XACT_ABORT ON will cause the transaction to be uncommittable when the constraint violation occurs. 
	SET XACT_ABORT ON;

	BEGIN TRY
		SET NOCOUNT ON
		DECLARE @SQL_TEMP VARCHAR(MAX), @SQL_MERGE VARCHAR(MAX);
		BEGIN TRANSACTION MERGE_CISCO_SECUR_RISK_ASES WITH MARK N'MERGE_CISCO_SECUR_RISK_ASES to process the Vulnerability data.'
		SET @SQL_TEMP = '
			INSERT #Vulnerability_SecurRskAses
			SELECT DISTINCT
				fl_upd_log.ROW_STS_KEY
				,fl_upd_log.ORG_KEY
				,client_engmt.CLNT_ENGMT_CD
				,fl_upd_log.SECUR_SRVC_CD 
				,fl_upd_log.SRC_KEY AS VULN_SRC_KEY
				,(SELECT VULN_INSTC_STS_CD FROM dbo.VULN_INSTC_STS WHERE VULN_INSTC_STS_NM = ''Open'') AS VULN_INSTC_STS_CD --##
				,NULL AS VULN_SEV_CD
				,xref_imp.TGT_REF_CD AS VULN_IMP_CD
				,xref_prbl.TGT_REF_CD AS RISK_PRBL_CD
				,NULL AS RMDTN_CST_EFFRT_CD
				,VULN_.VULN_CATGY_CD AS VULN_CATGY_CD
				,NULL AS OWASP_TOP_10_KEY
				,NULL AS CVE_ID
				,NULL AS OS_KEY --##
				,NULL AS SRC_VULN_SCAN_ID
				,NULL AS SRC_VULN_SCAN_STRT_DT
				,NULL AS SRC_VULN_SCAN_END_DT
				,NULL AS SRC_VULN_INSTC_ID
				,riskases_stg.RISK_NBR AS SRC_VULN_ID
				,riskases_stg.RISK_NM AS VULN_NM
				,CAST(riskases_stg.RISK_DESC AS VARCHAR(MAX)) AS VULN_DESC
				,riskases_stg.CREAT_DT AS VULN_CREAT_DT
				,NULL AS IPADR
				,NULL AS PORT_NBR
				,NULL AS SRC_ADVS_TXT
				,NULL AS SRC_VULN_BAS_SCOR
				,NULL AS VULN_BAS_SCOR
				,NULL AS VULN_IMP_SUB_SCOR
				,NULL AS VULN_EXPLT_SUB_SCOR
				,NULL AS VULN_TMPRL_SCOR
				,NULL AS VULN_ENV_SCOR
				,NULL AS VULN_OVALL_SCOR
				,NULL AS VULN_VCTR_TXT
				,NULL AS NTWK_NM
				,NULL AS PRTCL_NM
				,NULL AS HST_NM
				,NULL AS DOM_NM
				,NULL AS SFTW_NM
				,NULL AS APPL_URL
				,NULL AS NETBIOS_NM
				,NULL AS MAC_ADR_NM
				,CAST(riskases_stg.CTL_DEFICIENCIES  AS VARCHAR(MAX)) AS VULN_TECH_COMMT_TXT
				,CAST(riskases_stg.IMP_COMMT AS VARCHAR(MAX)) AS VULN_IMP_COMMT_TXT
				,CAST(riskases_stg.RMDTN_RECOM AS VARCHAR(MAX)) AS RECOM_COMMT_TXT
				,NULL AS ROOT_CAUS_COMMT_TXT
				,riskases_stg.APPL_FL_UPLOAD_LOG_KEY AS APPL_FL_UPLOAD_LOG_KEY

			FROM 
			(
				SELECT LTRIM(RTRIM([RISK_NBR])) AS [RISK_NBR]
				  ,LTRIM(RTRIM([RISK_NM])) AS [RISK_NM]
				  ,LTRIM(RTRIM([CTL_EFF])) AS [CTL_EFF]
				  ,[RISK_LVL_IMP]
				  ,[RISK_LVL_PRBL]
				  ,LTRIM(RTRIM(SUBSTRING([RISK_LVL_IMP], 0, charindex(''-'', [RISK_LVL_IMP])-1))) AS RISK_LVL_IMP_CODE
				  ,LTRIM(RTRIM(SUBSTRING([RISK_LVL_IMP], charindex(''-'', [RISK_LVL_IMP])+1, LEN([RISK_LVL_IMP])))) AS RISK_LVL_IMP_DESC
				  ,LTRIM(RTRIM(SUBSTRING([RISK_LVL_PRBL], 0, charindex(''-'', [RISK_LVL_PRBL])-1))) AS RISK_LVL_PRBL_CODE
				  ,LTRIM(RTRIM(SUBSTRING([RISK_LVL_PRBL], charindex(''-'', [RISK_LVL_PRBL])+1, LEN([RISK_LVL_PRBL])))) AS RISK_LVL_PRBL_DESC
				  ,LTRIM(RTRIM([RISK_LVL_OVALL])) AS [RISK_LVL_OVALL]
				  ,[RISK_DESC]
				  ,[IMP_COMMT]
				  ,[CTL_DEFICIENCIES]
				  ,[RMDTN_RECOM]
				  ,[MITG_CTL_AREA]
				  ,[RLVN_STRG_TRND]
				  ,[APPL_FL_UPLOAD_LOG_KEY]
				  ,[CREAT_DT]
				  ,[CREAT_USER_ID]
				FROM ' + @STG_TBL_NAME + '
			) riskases_stg

			INNER JOIN dbo.APPL_FL_UPLOAD_LOG fl_upd_log
				ON riskases_stg.APPL_FL_UPLOAD_LOG_KEY = fl_upd_log.APPL_FL_UPLOAD_LOG_KEY
			INNER JOIN dbo.CLNT_SECUR_SRVC_ENGMT client_engmt
				ON fl_upd_log.CLNT_ENGMT_CD = client_engmt.CLNT_ENGMT_CD
				AND fl_upd_log.SECUR_SRVC_CD = client_engmt.SECUR_SRVC_CD
			LEFT JOIN dbo.CD_XREF xref_imp
				ON xref_imp.SRC_REF_NM = riskases_stg.RISK_LVL_IMP_DESC
				AND xref_imp.REFERRENCE_TYP_NM = ''Vulnerability Impact''
				AND xref_imp.SRC_KEY IN (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Source'' and LKP_ENTY_NM = ''CISCO'')
			LEFT JOIN dbo.CD_XREF xref_prbl
				ON xref_prbl.SRC_REF_NM = riskases_stg.RISK_LVL_PRBL_DESC
				AND xref_prbl.REFERRENCE_TYP_NM = ''Risk Probability''
				AND xref_prbl.SRC_KEY IN (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Source'' and LKP_ENTY_NM = ''CISCO'')
			LEFT JOIN dbo.VULN VULN_
				ON VULN_.VULN_NM = LTRIM(RTRIM(riskases_stg.RISK_NM))
			WHERE fl_upd_log.ROW_STS_KEY = (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Row Status'' and LKP_ENTY_NM = ''Active'')
				AND client_engmt.ROW_STS_KEY = (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Row Status'' and LKP_ENTY_NM = ''Active'');
			'
		EXEC (@SQL_TEMP);

		UPDATE #Vulnerability_SecurRskAses SET CVE_ID = NULL WHERE ISNULL(CVE_ID,'') = '';

		UPDATE vlun_master SET vlun_master.VULN_VCTR_TXT = cve.VCTR_TXT
			,vlun_master.VULN_BAS_SCOR = cve.BAS_SCOR
			,vlun_master.VULN_IMP_SUB_SCOR = cve.IMP_SUB_SCOR
			,vlun_master.VULN_EXPLT_SUB_SCOR = cve.EXPLT_SUB_SCOR 
			,vlun_master.VULN_OVALL_SCOR = cve.BAS_SCOR
		FROM #Vulnerability_SecurRskAses vlun_master
		JOIN dbo.CVE cve
			ON vlun_master.CVE_ID = cve.CVE_ID;

		-- Update CVE_ID as NULL, if not in the reference table
		UPDATE vlun_master SET CVE_ID = NULL
		FROM  #Vulnerability_SecurRskAses vlun_master
		LEFT OUTER JOIN dbo.CVE cve
			ON vlun_master.CVE_ID = cve.CVE_ID
		WHERE cve.CVE_ID IS NULL;

		SELECT @SRC_COUNTS = COUNT(*) FROM #Vulnerability_SecurRskAses
		PRINT N'Message: TOTAL ' + CAST(@SRC_COUNTS AS VARCHAR) + N' RECORDS FROM SOURCE.'		

		SET @SQL_MERGE = '
			DECLARE @SummaryOfChanges table (Change VARCHAR(20));

			;WITH _target AS 
			(
				SELECT *
				FROM ' + @MASTER_TBL_NAME + '
				WHERE SECUR_SRVC_CD IN(''SR'') 
			)
			, _source AS 
			(
				SELECT ROW_STS_KEY
				,ORG_KEY
				,CLNT_ENGMT_CD
				,SECUR_SRVC_CD
				,VULN_SRC_KEY
				,VULN_INSTC_STS_CD
				,VULN_SEV_CD
				,VULN_IMP_CD
				,RISK_PRBL_CD
				,RMDTN_CST_EFFRT_CD
				,VULN_CATGY_CD
				,OWASP_TOP_10_KEY
				,CVE_ID
				,OS_KEY
				,SRC_VULN_SCAN_ID
				,SRC_VULN_SCAN_STRT_DT
				,SRC_VULN_SCAN_END_DT
				,SRC_VULN_INSTC_ID
				,SRC_VULN_ID
				,VULN_NM
				,CAST(VULN_DESC AS TEXT) AS VULN_DESC
				,VULN_CREAT_DT
				,IPADR
				,PORT_NBR
				,SRC_ADVS_TXT
				,SRC_VULN_BAS_SCOR
				,VULN_BAS_SCOR
				,VULN_IMP_SUB_SCOR
				,VULN_EXPLT_SUB_SCOR
				,VULN_TMPRL_SCOR
				,VULN_ENV_SCOR
				,VULN_OVALL_SCOR
				,VULN_VCTR_TXT
				,NTWK_NM
				,PRTCL_NM
				,HST_NM
				,DOM_NM
				,SFTW_NM
				,APPL_URL
				,NETBIOS_NM
				,MAC_ADR_NM
				,CAST(VULN_TECH_COMMT_TXT AS TEXT) AS VULN_TECH_COMMT_TXT
				,CAST(VULN_IMP_COMMT_TXT AS TEXT) AS VULN_IMP_COMMT_TXT
				,CAST(RECOM_COMMT_TXT AS TEXT) AS RECOM_COMMT_TXT
				,CAST(ROOT_CAUS_COMMT_TXT AS TEXT) AS ROOT_CAUS_COMMT_TXT
				,APPL_FL_UPLOAD_LOG_KEY
				FROM #Vulnerability_SecurRskAses
			)

			MERGE INTO _target
			USING _source ON (
				_target.CLNT_ENGMT_CD=_source.CLNT_ENGMT_CD
				AND _target.SECUR_SRVC_CD=_source.SECUR_SRVC_CD
				AND _target.ROW_STS_KEY=_source.ROW_STS_KEY
				AND _target.ORG_KEY=_source.ORG_KEY
				AND _target.VULN_SRC_KEY=_source.VULN_SRC_KEY
				AND _target.VULN_INSTC_STS_CD=_source.VULN_INSTC_STS_CD
				AND ISNULL(_target.SRC_VULN_SCAN_ID,0)=ISNULL(_source.SRC_VULN_SCAN_ID,0)
				AND _target.SRC_VULN_ID=_source.SRC_VULN_ID
				AND _target.APPL_FL_UPLOAD_LOG_KEY=_source.APPL_FL_UPLOAD_LOG_KEY
				)
			WHEN NOT MATCHED THEN INSERT (
				ROW_STS_KEY
				, ORG_KEY
				, CLNT_ENGMT_CD
				, SECUR_SRVC_CD
				, VULN_SRC_KEY
				, VULN_INSTC_STS_CD
				, VULN_SEV_CD
				, VULN_IMP_CD
				, RISK_PRBL_CD
				, RMDTN_CST_EFFRT_CD
				, VULN_CATGY_CD
				, OWASP_TOP_10_KEY
				, CVE_ID
				, OS_KEY
				, SRC_VULN_SCAN_ID
				, SRC_VULN_SCAN_STRT_DT
				, SRC_VULN_SCAN_END_DT
				, SRC_VULN_INSTC_ID
				, SRC_VULN_ID
				, VULN_NM
				, VULN_DESC
				, VULN_CREAT_DT
				, IPADR
				, PORT_NBR
				, SRC_ADVS_TXT
				, SRC_VULN_BAS_SCOR
				, VULN_BAS_SCOR
				, VULN_IMP_SUB_SCOR
				, VULN_EXPLT_SUB_SCOR
				, VULN_TMPRL_SCOR
				, VULN_ENV_SCOR
				, VULN_OVALL_SCOR
				, VULN_VCTR_TXT
				, NTWK_NM
				, PRTCL_NM
				, HST_NM
				, DOM_NM
				, SFTW_NM
				, APPL_URL
				, NETBIOS_NM
				, MAC_ADR_NM
				, VULN_TECH_COMMT_TXT
				, VULN_IMP_COMMT_TXT
				, RECOM_COMMT_TXT
				, ROOT_CAUS_COMMT_TXT
				, APPL_FL_UPLOAD_LOG_KEY
				, CREAT_DT
				, CREAT_USER_ID
			)			
			VALUES (
				_source.ROW_STS_KEY
				,_source.ORG_KEY
				,_source.CLNT_ENGMT_CD
				,_source.SECUR_SRVC_CD
				,_source.VULN_SRC_KEY
				,_source.VULN_INSTC_STS_CD
				,_source.VULN_SEV_CD
				,_source.VULN_IMP_CD
				,_source.RISK_PRBL_CD
				,_source.RMDTN_CST_EFFRT_CD
				,_source.VULN_CATGY_CD
				,_source.OWASP_TOP_10_KEY
				,_source.CVE_ID
				,_source.OS_KEY
				,_source.SRC_VULN_SCAN_ID
				,_source.SRC_VULN_SCAN_STRT_DT
				,_source.SRC_VULN_SCAN_END_DT
				,_source.SRC_VULN_INSTC_ID
				,_source.SRC_VULN_ID
				,_source.VULN_NM
				,_source.VULN_DESC
				,_source.VULN_CREAT_DT
				,_source.IPADR
				,_source.PORT_NBR
				,_source.SRC_ADVS_TXT
				,_source.SRC_VULN_BAS_SCOR
				,_source.VULN_BAS_SCOR
				,_source.VULN_IMP_SUB_SCOR
				,_source.VULN_EXPLT_SUB_SCOR
				,_source.VULN_TMPRL_SCOR
				,_source.VULN_ENV_SCOR
				,_source.VULN_OVALL_SCOR
				,_source.VULN_VCTR_TXT
				,_source.NTWK_NM
				,_source.PRTCL_NM
				,_source.HST_NM
				,_source.DOM_NM
				,_source.SFTW_NM
				,_source.APPL_URL
				,_source.NETBIOS_NM
				,_source.MAC_ADR_NM
				,_source.VULN_TECH_COMMT_TXT
				,_source.VULN_IMP_COMMT_TXT
				,_source.RECOM_COMMT_TXT
				,_source.ROOT_CAUS_COMMT_TXT
				,_source.APPL_FL_UPLOAD_LOG_KEY
				,GETDATE() 
				,''2'' 
			)

			OUTPUT $ACTION INTO @SummaryOfChanges
			OPTION(RECOMPILE);

			INSERT INTO #OP_SummaryOfChanges
			VALUES(
				(SELECT COUNT(*) AS INSERT_COUNTS FROM @SummaryOfChanges WHERE Change = ''INSERT'')
				,(SELECT COUNT(*) AS UPDATE_COUNTS FROM @SummaryOfChanges WHERE Change = ''UPDATE'')
				,(SELECT COUNT(*) AS DELETE_COUNTS FROM @SummaryOfChanges WHERE Change = ''DELETE'')
			);
		
		'
		--PRINT @SQL_MERGE;
		EXEC (@SQL_MERGE);

		SELECT @INSERT_COUNTS = INSERT_COUNTS FROM #OP_SummaryOfChanges
		PRINT N'Message: Total ' + CAST(@INSERT_COUNTS AS VARCHAR) + N' VULN INSERTED.'	

		SELECT @UPDATE_COUNTS = UPDATE_COUNTS FROM #OP_SummaryOfChanges
		PRINT N'Message: TOTAL ' + CAST(@UPDATE_COUNTS AS VARCHAR) + N' VULN UPDATED.'				

		SELECT @DELETE_COUNTS = DELETE_COUNTS FROM #OP_SummaryOfChanges
		PRINT N'Message: Total ' + CAST(@DELETE_COUNTS AS VARCHAR) + N' VULN INSERTED.'	

		IF (XACT_STATE()) = 1
		BEGIN
			PRINT N'The transaction is committable. Committing transaction.'
			COMMIT TRANSACTION MERGE_CISCO_SECUR_RISK_ASES;
		END;

	END TRY

        
	BEGIN CATCH

		IF (XACT_STATE()) = -1
		BEGIN
			PRINT N'The transaction is in an uncommittable state. Rolling back transaction.'
			ROLLBACK TRANSACTION MERGE_CISCO_SECUR_RISK_ASES
		END;
			
		DECLARE @ErrorNumber INT = ERROR_NUMBER();
		DECLARE @ErrorLine INT = ERROR_LINE();
		DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();

		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH

END
GO
PRINT N'Creating [dbo].[MERGE_CLNT_VULN_INSTC_CMN_FMT_V1_MT]...';


GO

/******************************
	** Desc: 
	** Auth: GM
	** Date: 09/16/2016
	**************************
	** Change History
	**************************
	**  Date	        Author                  Description	
	**  --------        --					------------------------------------
	**  10/19/2016		GM					Added OWASP_TOP_10_KEY
	**  11/29/2016		GM					Multi-tenancy changes
	**  01/23/2017		GM					Vuln Category changes
	**************************************/
/*
	DECLARE @SRC_COUNTS INT = 0 
			,@INSERT_COUNTS INT = 0
			,@UPDATE_COUNTS INT = 0
			,@DELETE_COUNTS INT = 0;
	EXEC [dbo].[MERGE_CLNT_VULN_INSTC_CMN_FMT_V1_MT] 
		'JOH'
		,'[JOH].[CMN_FMT_V1_STG]'
		,'[JOH].[CLNT_VULN_INSTC]'
		, @SRC_COUNTS OUTPUT
		, @INSERT_COUNTS OUTPUT 
		, @UPDATE_COUNTS OUTPUT 
		, @DELETE_COUNTS OUTPUT
	SELECT @SRC_COUNTS  
	SELECT @INSERT_COUNTS  
	SELECT @UPDATE_COUNTS  
	SELECT @DELETE_COUNTS 
	--## - PLEASE VERIFY
*/

CREATE PROCEDURE [dbo].[MERGE_CLNT_VULN_INSTC_CMN_FMT_V1_MT]
	@SCHEMA_NM VARCHAR(1000),
	@STG_TBL_NAME VARCHAR(1000),
	@MASTER_TBL_NAME VARCHAR(1000),
	@SRC_COUNTS  INT OUTPUT,
	@INSERT_COUNTS INT OUTPUT,
	@UPDATE_COUNTS INT OUTPUT,
	@DELETE_COUNTS INT OUTPUT
AS
BEGIN

	IF OBJECT_ID('tempdb..#Vulnerability_ComnFrmtV1') IS NOT NULL
	DROP TABLE #Vulnerability_ComnFrmtV1;

	CREATE TABLE #Vulnerability_ComnFrmtV1(
		[ROW_STS_KEY] [int] NOT NULL,
		[ORG_KEY] [int] NOT NULL,
		[CLNT_ENGMT_CD] [varchar](30) NOT NULL,
		[SECUR_SRVC_CD] [varchar](10) NOT NULL,
		[VULN_SRC_KEY] [int] NOT NULL,
		[VULN_INSTC_STS_CD] [varchar](3) NOT NULL,
		[VULN_SEV_CD] [varchar](3) NULL,
		[VULN_IMP_CD] [varchar](3) NULL,
		[RISK_PRBL_CD] [varchar](3) NULL,
		[RMDTN_CST_EFFRT_CD] [varchar](3) NULL,
		[VULN_CATGY_CD] [varchar](10) NULL,
		[OWASP_TOP_10_KEY] [int] NULL,
		[CVE_ID] [varchar](15) NULL,
		[OS_KEY] [int] NULL,
		[SRC_VULN_SCAN_ID] [varchar](150) NULL,
		[SRC_VULN_SCAN_STRT_DT] [datetime] NULL,
		[SRC_VULN_SCAN_END_DT] [datetime] NULL,
		[SRC_VULN_INSTC_ID] [varchar](150) NULL,
		[SRC_VULN_ID] [varchar](150) NULL,
		[VULN_NM] [varchar](255) NOT NULL,
		[VULN_DESC] [text] NULL,
		[VULN_CREAT_DT] [datetime] NOT NULL,
		[IPADR] [varchar](39) NULL,
		[PORT_NBR] [int] NULL,
		[SRC_ADVS_TXT] [varchar](1024) NULL,
		[SRC_VULN_BAS_SCOR] [decimal](10, 2) NULL,
		[VULN_BAS_SCOR] [decimal](10, 2) NULL,
		[VULN_IMP_SUB_SCOR] [decimal](10, 2) NULL,
		[VULN_EXPLT_SUB_SCOR] [decimal](10, 2) NULL,
		[VULN_TMPRL_SCOR] [decimal](10, 2) NULL,
		[VULN_ENV_SCOR] [decimal](10, 2) NULL,
		[VULN_OVALL_SCOR] [decimal](10, 2) NULL,
		[VULN_VCTR_TXT] [varchar](100) NULL,
		[NTWK_NM] [varchar](150) NULL,
		[PRTCL_NM] [varchar](255) NULL,
		[HST_NM] [varchar](150) NULL,
		[DOM_NM] [varchar](150) NULL,
		[SFTW_NM] [varchar](150) NULL,
		[APPL_URL] [nvarchar](2000) NULL,
		[NETBIOS_NM] [varchar](150) NULL,
		[MAC_ADR_NM] [varchar](150) NULL,
		[VULN_TECH_COMMT_TXT] [varchar](MAX) NULL,
		[VULN_IMP_COMMT_TXT] [varchar](MAX) NULL,
		[RECOM_COMMT_TXT] [varchar](MAX) NULL,
		[ROOT_CAUS_COMMT_TXT] [varchar](MAX) NULL,
		[APPL_FL_UPLOAD_LOG_KEY] [int] NULL
	);

	IF OBJECT_ID('tempdb..#OP_SummaryOfChanges') IS NOT NULL
	DROP TABLE #OP_SummaryOfChanges;

	CREATE TABLE #OP_SummaryOfChanges(
		[INSERT_COUNTS] [int] NULL,
		[UPDATE_COUNTS] [int] NULL,
		[DELETE_COUNTS] [int] NULL,
	);

	/* BEGIN: INSERT OS_NAME DATA IF NOT AVAILABLE	*/
	DECLARE @SQL_OS_NM VARCHAR(MAX);
	SET @SQL_OS_NM = '
		DECLARE @ETL_AUD_LOG_KEY INT
			, @OS_NM AS OS_NMs
			, @SRC_COUNTS_OS_NM INT = 0
			, @INSERT_COUNTS_OS_NM INT = 0;


		EXEC [dbo].[INS_ETL_AUD_LOG]   	
			@JOB_NM         = '''+ @SCHEMA_NM +':MERGE_CLNT_VULN_INSTC_CMN_FMT_V1:OS_NAME''
			,@JOB_STRT_DT         = NULL
			,@JOB_END_DT         = NULL
			,@JOB_STS       = ''IN PROGRESS''
			,@SRC_FL_NM       = NULL
			,@SRC_FL_FLDR_PTH  = NULL
			,@TGT_TBL_NM       = ''[dbo].[OS]''
			,@SRC_ROW_CNT     =  @SRC_COUNTS_OS_NM
			,@TGT_INSRT_ROW_CNT = @INSERT_COUNTS_OS_NM
			,@TGT_UPDT_ROW_CNT = 0 
			,@TGT_REJ_ROW_CNT  = 0
    		,@RETVAL = @ETL_AUD_LOG_KEY OUTPUT;

		INSERT @OS_NM(OS_NM)
		SELECT DISTINCT
			LTRIM(RTRIM(ComnFrmtV1_stg.OS_NM)) AS OS_NM
		FROM ' + @STG_TBL_NAME + ' ComnFrmtV1_stg 
		WHERE ISNULL(LTRIM(RTRIM(ComnFrmtV1_stg.OS_NM)),'''') <> '''';
	
		EXEC [dbo].[MERGE_OS_MAP] @OS_NM, @SRC_COUNTS_OS_NM OUTPUT,  @INSERT_COUNTS_OS_NM OUTPUT;

		EXEC [dbo].[UPDATE_ETL_AUD_LOG]   	
			@ETL_AUD_LOG_KEY         = @ETL_AUD_LOG_KEY
			,@JOB_END_DT         = NULL
			,@JOB_STS       = ''COMPLETED''
			,@SRC_ROW_CNT     =  @SRC_COUNTS_OS_NM
			,@TGT_INSRT_ROW_CNT = @INSERT_COUNTS_OS_NM
			,@TGT_UPDT_ROW_CNT = 0 
			,@TGT_REJ_ROW_CNT  = 0;
		';
	EXEC (@SQL_OS_NM);
	/* END */

	/* BEGIN: INSERT VULN_NM DATA IF NOT AVAILABLE	*/
	DECLARE @SQL_VULN_NM VARCHAR(MAX);
	SET @SQL_VULN_NM = '
		DECLARE @ETL_AUD_LOG_KEY INT
			, @VULN_NM AS VULN_NMs
			, @SRC_COUNTS_VULN_NM INT = 0
			, @INSERT_COUNTS_VULN_NM INT = 0

		EXEC [dbo].[INS_ETL_AUD_LOG]   	
			@JOB_NM         = '''+ @SCHEMA_NM +':MERGE_CLNT_VULN_INSTC_CMN_FMT_V1:VULN_NM''
			,@JOB_STRT_DT         = NULL
			,@JOB_END_DT         = NULL
			,@JOB_STS       = ''IN PROGRESS''
			,@SRC_FL_NM       = NULL
			,@SRC_FL_FLDR_PTH  = NULL
			,@TGT_TBL_NM       = ''[dbo].[VULN]''
			,@SRC_ROW_CNT     =  @SRC_COUNTS_VULN_NM
			,@TGT_INSRT_ROW_CNT = @INSERT_COUNTS_VULN_NM
			,@TGT_UPDT_ROW_CNT = 0 
			,@TGT_REJ_ROW_CNT  = 0
    		,@RETVAL = @ETL_AUD_LOG_KEY OUTPUT;

		INSERT @VULN_NM(VULN_NM)
		SELECT DISTINCT
			LTRIM(RTRIM(ComnFrmtV1_stg.VULN_NM)) AS VULN_NM
		FROM ' + @STG_TBL_NAME + ' ComnFrmtV1_stg 
		WHERE ISNULL(LTRIM(RTRIM(ComnFrmtV1_stg.VULN_NM)),'''') <> '''';

		EXEC [dbo].[MERGE_VULN_CATGY_MAP] @VULN_NM, @SRC_COUNTS_VULN_NM OUTPUT,  @INSERT_COUNTS_VULN_NM OUTPUT;

		EXEC [dbo].[UPDATE_ETL_AUD_LOG]   	
			@ETL_AUD_LOG_KEY         = @ETL_AUD_LOG_KEY
			,@JOB_END_DT         = NULL
			,@JOB_STS       = ''COMPLETED''
			,@SRC_ROW_CNT     =  @SRC_COUNTS_VULN_NM
			,@TGT_INSRT_ROW_CNT = @INSERT_COUNTS_VULN_NM
			,@TGT_UPDT_ROW_CNT = 0 
			,@TGT_REJ_ROW_CNT  = 0;
	';
	EXEC (@SQL_VULN_NM);
	/* END */

	-- SET XACT_ABORT ON will cause the transaction to be uncommittable when the constraint violation occurs. 
	SET XACT_ABORT ON;

	BEGIN TRY
		SET NOCOUNT ON
		DECLARE @SQL_TEMP VARCHAR(MAX), @SQL_MERGE VARCHAR(MAX);
		BEGIN TRANSACTION MERGE_CMN_FMT_V1 WITH MARK N'MERGE_CMN_FMT_V1 to process the Vulnerability data.'
		SET @SQL_TEMP = '
			INSERT #Vulnerability_ComnFrmtV1
			SELECT DISTINCT
				fl_upd_log.ROW_STS_KEY
				,fl_upd_log.ORG_KEY
				,client_srvc_engmt.CLNT_ENGMT_CD
				,fl_upd_log.SECUR_SRVC_CD 
				,fl_upd_log.SRC_KEY AS VULN_SRC_KEY
				,(SELECT VULN_INSTC_STS_CD FROM dbo.VULN_INSTC_STS WHERE VULN_INSTC_STS_NM = ''Open'') AS VULN_INSTC_STS_CD --##
				,xref_sev.TGT_REF_CD AS VULN_SEV_CD
				,xref_imp.TGT_REF_CD AS VULN_IMP_CD
				,xref_prbl.TGT_REF_CD AS RISK_PRBL_CD
				,xref_rmdtn_effrt.TGT_REF_CD AS RMDTN_CST_EFFRT_CD
				,VULN_.VULN_CATGY_CD AS VULN_CATGY_CD
				,OWASP_.OWASP_TOP_10_KEY AS OWASP_TOP_10_KEY
				,RTRIM(CASE 
						WHEN (charindex(''CVE-'', [SRC_ADVS_TXT]) > 0 AND charindex('','', [SRC_ADVS_TXT], charindex(''CVE-'', [SRC_ADVS_TXT])) = 0 ) 
							THEN substring([SRC_ADVS_TXT], charindex(''CVE-'', [SRC_ADVS_TXT]), charindex('','', [SRC_ADVS_TXT]) - charindex(''CVE-'', [SRC_ADVS_TXT]) + 20)  
						WHEN (charindex(''CVE-'', [SRC_ADVS_TXT]) > 0 AND charindex('','', [SRC_ADVS_TXT], charindex(''CVE-'', [SRC_ADVS_TXT])) > 0 ) 
							THEN substring([SRC_ADVS_TXT], charindex(''CVE-'', [SRC_ADVS_TXT]), charindex('','', [SRC_ADVS_TXT], charindex(''CVE-'', [SRC_ADVS_TXT])) - charindex(''CVE-'', [SRC_ADVS_TXT])) 
					ELSE NULL 
					END)  AS CVE_ID
				,OS_.OS_KEY AS OS_KEY --##
				,ComnFrmtV1_stg.SRC_VULN_SCAN_ID AS SRC_VULN_SCAN_ID
				,ComnFrmtV1_stg.SRC_VULN_SCAN_STRT_DT AS SRC_VULN_SCAN_STRT_DT
				,ComnFrmtV1_stg.SRC_VULN_SCAN_END_DT AS SRC_VULN_SCAN_END_DT
				,ComnFrmtV1_stg.SRC_VULN_INSTC_ID AS SRC_VULN_INSTC_ID
				,ComnFrmtV1_stg.SRC_VULN_ID AS SRC_VULN_ID
				,ComnFrmtV1_stg.VULN_NM AS VULN_NM
				,CAST(ComnFrmtV1_stg.VULN_DESC AS VARCHAR(MAX)) AS VULN_DESC
				,ComnFrmtV1_stg.VULN_CREAT_DT AS VULN_CREAT_DT
				,ComnFrmtV1_stg.IPADR AS IPADR
				,ComnFrmtV1_stg.PORT_NBR AS PORT_NBR
				,ComnFrmtV1_stg.SRC_ADVS_TXT AS SRC_ADVS_TXT
				,ComnFrmtV1_stg.VULN_BAS_SCOR AS SRC_VULN_BAS_SCOR --##
				,ComnFrmtV1_stg.VULN_BAS_SCOR AS VULN_BAS_SCOR
				,ComnFrmtV1_stg.VULN_IMP_SUB_SCOR AS VULN_IMP_SUB_SCOR
				,ComnFrmtV1_stg.VULN_EXPLT_SUB_SCOR AS VULN_EXPLT_SUB_SCOR
				,ComnFrmtV1_stg.VULN_TMPRL_SCOR AS VULN_TMPRL_SCOR
				,ComnFrmtV1_stg.VULN_ENV_SCOR AS VULN_ENV_SCOR
				,NULL AS VULN_OVALL_SCOR
				,ComnFrmtV1_stg.VULN_VCTR_TXT AS VULN_VCTR_TXT
				,ComnFrmtV1_stg.NTWK_NM AS NTWK_NM
				,ComnFrmtV1_stg.PRTCL_NM AS PRTCL_NM
				,ComnFrmtV1_stg.HST_NM AS HST_NM
				,ComnFrmtV1_stg.DOM_NM AS DOM_NM
				,ComnFrmtV1_stg.SFTW_NM AS SFTW_NM
				,ComnFrmtV1_stg.APPL_URL AS APPL_URL
				,ComnFrmtV1_stg.NETBIOS_NM AS NETBIOS_NM
				,ComnFrmtV1_stg.MAC_ADR_NM AS MAC_ADR_NM
				,CAST(ComnFrmtV1_stg.VULN_TECH_COMMT_TXT AS VARCHAR(MAX)) AS VULN_TECH_COMMT_TXT
				,CAST(ComnFrmtV1_stg.VULN_IMP_COMMT_TXT AS VARCHAR(MAX)) AS VULN_IMP_COMMT_TXT
				,CAST(ComnFrmtV1_stg.RECOM_COMMT_TXT AS VARCHAR(MAX)) AS RECOM_COMMT_TXT
				,CAST(ComnFrmtV1_stg.ROOT_CAUS_COMMT_TXT AS VARCHAR(MAX)) AS ROOT_CAUS_COMMT_TXT
				,ComnFrmtV1_stg.APPL_FL_UPLOAD_LOG_KEY AS APPL_FL_UPLOAD_LOG_KEY
			FROM ' + @STG_TBL_NAME + ' ComnFrmtV1_stg
			INNER JOIN dbo.APPL_FL_UPLOAD_LOG fl_upd_log
				ON ComnFrmtV1_stg.APPL_FL_UPLOAD_LOG_KEY = fl_upd_log.APPL_FL_UPLOAD_LOG_KEY
			INNER JOIN dbo.CLNT_SECUR_SRVC_ENGMT client_srvc_engmt
				ON fl_upd_log.CLNT_ENGMT_CD = client_srvc_engmt.CLNT_ENGMT_CD
				AND fl_upd_log.SECUR_SRVC_CD = client_srvc_engmt.SECUR_SRVC_CD
			LEFT JOIN dbo.OS OS_
				ON OS_.OS_NM = LTRIM(RTRIM(ComnFrmtV1_stg.[OS_NM]))
			LEFT JOIN dbo.OWASP_TOP_10 OWASP_
				ON OWASP_.OWASP_CD = LTRIM(RTRIM(ComnFrmtV1_stg.OWASP_CD))
				AND OWASP_.CURR_IND = 1
			LEFT JOIN dbo.VULN VULN_
				ON VULN_.VULN_NM = LTRIM(RTRIM(ComnFrmtV1_stg.[VULN_NM]))
			LEFT JOIN dbo.CD_XREF xref_sev
				ON (xref_sev.SRC_REF_CD = ComnFrmtV1_stg.[VULN_SEV_CD] OR xref_sev.SRC_REF_NM = ComnFrmtV1_stg.[VULN_SEV_NM])
				AND xref_sev.REFERRENCE_TYP_NM = ''Vulnerability Severity''
				AND xref_sev.SRC_KEY IN (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Source'' and LKP_ENTY_NM = ''Common Format v1.0'')
			LEFT JOIN dbo.CD_XREF xref_imp
				ON (xref_imp.SRC_REF_CD = ComnFrmtV1_stg.[VULN_IMP_CD] OR xref_imp.SRC_REF_NM = ComnFrmtV1_stg.[VULN_IMP_NM])
				AND xref_imp.REFERRENCE_TYP_NM = ''Vulnerability Impact''
				AND xref_imp.SRC_KEY IN (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Source'' and LKP_ENTY_NM = ''Common Format v1.0'')
			LEFT JOIN dbo.CD_XREF xref_prbl
				ON (xref_prbl.SRC_REF_CD = ComnFrmtV1_stg.[RISK_PRBL_CD] OR xref_prbl.SRC_REF_NM = ComnFrmtV1_stg.[RISK_PRBL_NM])
				AND xref_prbl.REFERRENCE_TYP_NM = ''Risk Probability''
				AND xref_prbl.SRC_KEY IN (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Source'' and LKP_ENTY_NM = ''Common Format v1.0'')
			LEFT JOIN dbo.CD_XREF xref_rmdtn_effrt
				ON (xref_rmdtn_effrt.SRC_REF_CD = ComnFrmtV1_stg.[RMDTN_CST_EFFRT_CD] OR xref_rmdtn_effrt.SRC_REF_NM = ComnFrmtV1_stg.[RMDTN_CST_EFFRT_NM])
				AND xref_rmdtn_effrt.REFERRENCE_TYP_NM = ''Remediation Cost Effort''
				AND xref_rmdtn_effrt.SRC_KEY IN (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Source'' and LKP_ENTY_NM = ''Common Format v1.0'')
			WHERE fl_upd_log.ROW_STS_KEY = (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Row Status'' and LKP_ENTY_NM = ''Active'')
				AND client_srvc_engmt.ROW_STS_KEY = (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Row Status'' and LKP_ENTY_NM = ''Active'')'
			;
		EXEC (@SQL_TEMP);

		UPDATE #Vulnerability_ComnFrmtV1 SET CVE_ID = NULL WHERE ISNULL(CVE_ID,'') = ''

		UPDATE vlun_master SET vlun_master.VULN_VCTR_TXT = cve.VCTR_TXT
			,vlun_master.VULN_BAS_SCOR = cve.BAS_SCOR
			,vlun_master.VULN_IMP_SUB_SCOR = cve.IMP_SUB_SCOR
			,vlun_master.VULN_EXPLT_SUB_SCOR = cve.EXPLT_SUB_SCOR 
			--,vlun_master.VULN_OVALL_SCOR = cve.BAS_SCOR
		FROM #Vulnerability_ComnFrmtV1 vlun_master
		JOIN dbo.CVE cve
			ON vlun_master.CVE_ID = cve.CVE_ID

		--Overall Score Logic --CVSS v2
		UPDATE vlun_master SET vlun_master.VULN_OVALL_SCOR = (CASE WHEN ((vlun_master.[VULN_BAS_SCOR] IS NOT NULL) AND (vlun_master.[VULN_ENV_SCOR] IS NOT NULL)) THEN vlun_master.[VULN_ENV_SCOR] WHEN ((vlun_master.[VULN_BAS_SCOR] IS NOT NULL) AND (vlun_master.[VULN_ENV_SCOR] IS NULL) AND (vlun_master.[VULN_TMPRL_SCOR] IS NOT NULL)) THEN vlun_master.[VULN_TMPRL_SCOR] WHEN ((vlun_master.[VULN_BAS_SCOR] IS NOT NULL) AND (vlun_master.[VULN_ENV_SCOR] IS NULL) AND (vlun_master.[VULN_TMPRL_SCOR] IS NULL)) THEN vlun_master.[VULN_BAS_SCOR] ELSE vlun_master.[VULN_BAS_SCOR] END)
		FROM #Vulnerability_ComnFrmtV1 vlun_master
		
		-- Update CVE_ID as NULL, if not in the reference table
		UPDATE vlun_master SET CVE_ID = NULL
		FROM  #Vulnerability_ComnFrmtV1 vlun_master
		LEFT OUTER JOIN dbo.CVE cve
			ON vlun_master.CVE_ID = cve.CVE_ID
		WHERE cve.CVE_ID IS NULL

		SELECT @SRC_COUNTS = COUNT(*) FROM #Vulnerability_ComnFrmtV1
		PRINT N'Message: TOTAL ' + CAST(@SRC_COUNTS AS VARCHAR) + N' RECORDS FROM SOURCE.'	
		SET @SQL_MERGE = '
			DECLARE @SummaryOfChanges table (Change VARCHAR(20));
			;WITH _target AS 
			(
				SELECT *
				FROM ' + @MASTER_TBL_NAME + '
			)
			, _source AS 
			(
				SELECT ROW_STS_KEY
				,ORG_KEY
				,CLNT_ENGMT_CD
				,SECUR_SRVC_CD
				,VULN_SRC_KEY
				,VULN_INSTC_STS_CD
				,VULN_SEV_CD
				,VULN_IMP_CD
				,RISK_PRBL_CD
				,RMDTN_CST_EFFRT_CD
				,VULN_CATGY_CD
				,OWASP_TOP_10_KEY
				,CVE_ID
				,OS_KEY
				,SRC_VULN_SCAN_ID
				,SRC_VULN_SCAN_STRT_DT
				,SRC_VULN_SCAN_END_DT
				,SRC_VULN_INSTC_ID
				,SRC_VULN_ID
				,VULN_NM
				,VULN_DESC
				,VULN_CREAT_DT
				,IPADR
				,PORT_NBR
				,SRC_ADVS_TXT
				,SRC_VULN_BAS_SCOR
				,VULN_BAS_SCOR
				,VULN_IMP_SUB_SCOR
				,VULN_EXPLT_SUB_SCOR
				,VULN_TMPRL_SCOR
				,VULN_ENV_SCOR
				,VULN_OVALL_SCOR
				,VULN_VCTR_TXT
				,NTWK_NM
				,PRTCL_NM
				,HST_NM
				,DOM_NM
				,SFTW_NM
				,APPL_URL
				,NETBIOS_NM
				,MAC_ADR_NM
				,CAST(VULN_TECH_COMMT_TXT AS TEXT) AS VULN_TECH_COMMT_TXT
				,CAST(VULN_IMP_COMMT_TXT AS TEXT) AS VULN_IMP_COMMT_TXT
				,CAST(RECOM_COMMT_TXT AS TEXT) AS RECOM_COMMT_TXT
				,CAST(ROOT_CAUS_COMMT_TXT AS TEXT) AS ROOT_CAUS_COMMT_TXT
				,APPL_FL_UPLOAD_LOG_KEY
				FROM #Vulnerability_ComnFrmtV1
			)

			MERGE INTO _target
			USING _source ON (
				_target.CLNT_ENGMT_CD=_source.CLNT_ENGMT_CD
				AND _target.SECUR_SRVC_CD=_source.SECUR_SRVC_CD
				AND _target.ROW_STS_KEY=_source.ROW_STS_KEY
				AND _target.ORG_KEY=_source.ORG_KEY
				AND _target.VULN_SRC_KEY=_source.VULN_SRC_KEY
				AND _target.VULN_INSTC_STS_CD=_source.VULN_INSTC_STS_CD

				AND ISNULL(_target.SRC_VULN_SCAN_ID,0)=ISNULL(_source.SRC_VULN_SCAN_ID,0)
				AND ISNULL(_target.SRC_VULN_INSTC_ID,0)=ISNULL(_source.SRC_VULN_INSTC_ID,0)
				AND ISNULL(_target.SRC_VULN_ID,0) =ISNULL(_source.SRC_VULN_ID,0)
				AND _target.APPL_FL_UPLOAD_LOG_KEY=_source.APPL_FL_UPLOAD_LOG_KEY
				)

			WHEN NOT MATCHED THEN INSERT (
				ROW_STS_KEY
				, ORG_KEY
				, CLNT_ENGMT_CD
				, SECUR_SRVC_CD
				, VULN_SRC_KEY
				, VULN_INSTC_STS_CD
				, VULN_SEV_CD
				, VULN_IMP_CD
				, RISK_PRBL_CD
				, RMDTN_CST_EFFRT_CD
				, VULN_CATGY_CD
				, OWASP_TOP_10_KEY
				, CVE_ID
				, OS_KEY
				, SRC_VULN_SCAN_ID
				, SRC_VULN_SCAN_STRT_DT
				, SRC_VULN_SCAN_END_DT
				, SRC_VULN_INSTC_ID
				, SRC_VULN_ID
				, VULN_NM
				, VULN_DESC
				, VULN_CREAT_DT
				, IPADR
				, PORT_NBR
				, SRC_ADVS_TXT
				, SRC_VULN_BAS_SCOR
				, VULN_BAS_SCOR
				, VULN_IMP_SUB_SCOR
				, VULN_EXPLT_SUB_SCOR
				, VULN_TMPRL_SCOR
				, VULN_ENV_SCOR
				, VULN_OVALL_SCOR
				, VULN_VCTR_TXT
				, NTWK_NM
				, PRTCL_NM
				, HST_NM
				, DOM_NM
				, SFTW_NM
				, APPL_URL
				, NETBIOS_NM
				, MAC_ADR_NM
				, VULN_TECH_COMMT_TXT
				, VULN_IMP_COMMT_TXT
				, RECOM_COMMT_TXT
				, ROOT_CAUS_COMMT_TXT
				, APPL_FL_UPLOAD_LOG_KEY
				, CREAT_DT
				, CREAT_USER_ID
			)			
			VALUES (
				_source.ROW_STS_KEY
				,_source.ORG_KEY
				,_source.CLNT_ENGMT_CD
				,_source.SECUR_SRVC_CD
				,_source.VULN_SRC_KEY
				,_source.VULN_INSTC_STS_CD
				,_source.VULN_SEV_CD
				,_source.VULN_IMP_CD
				,_source.RISK_PRBL_CD
				,_source.RMDTN_CST_EFFRT_CD
				,_source.VULN_CATGY_CD
				,_source.OWASP_TOP_10_KEY
				,_source.CVE_ID
				,_source.OS_KEY
				,_source.SRC_VULN_SCAN_ID
				,_source.SRC_VULN_SCAN_STRT_DT
				,_source.SRC_VULN_SCAN_END_DT
				,_source.SRC_VULN_INSTC_ID
				,_source.SRC_VULN_ID
				,_source.VULN_NM
				,_source.VULN_DESC
				,_source.VULN_CREAT_DT
				,_source.IPADR
				,_source.PORT_NBR
				,_source.SRC_ADVS_TXT
				,_source.SRC_VULN_BAS_SCOR
				,_source.VULN_BAS_SCOR
				,_source.VULN_IMP_SUB_SCOR
				,_source.VULN_EXPLT_SUB_SCOR
				,_source.VULN_TMPRL_SCOR
				,_source.VULN_ENV_SCOR
				,_source.VULN_OVALL_SCOR
				,_source.VULN_VCTR_TXT
				,_source.NTWK_NM
				,_source.PRTCL_NM
				,_source.HST_NM
				,_source.DOM_NM
				,_source.SFTW_NM
				,_source.APPL_URL
				,_source.NETBIOS_NM
				,_source.MAC_ADR_NM
				,_source.VULN_TECH_COMMT_TXT
				,_source.VULN_IMP_COMMT_TXT
				,_source.RECOM_COMMT_TXT
				,_source.ROOT_CAUS_COMMT_TXT
				,_source.APPL_FL_UPLOAD_LOG_KEY
				,GETDATE() 
				,''2''
			)

			OUTPUT $ACTION INTO @SummaryOfChanges
			OPTION(RECOMPILE);

			INSERT INTO #OP_SummaryOfChanges
			VALUES(
				(SELECT COUNT(*) AS INSERT_COUNTS FROM @SummaryOfChanges WHERE Change = ''INSERT'')
				,(SELECT COUNT(*) AS UPDATE_COUNTS FROM @SummaryOfChanges WHERE Change = ''UPDATE'')
				,(SELECT COUNT(*) AS DELETE_COUNTS FROM @SummaryOfChanges WHERE Change = ''DELETE'')
			);
		'
		EXEC (@SQL_MERGE);

		SELECT @INSERT_COUNTS = INSERT_COUNTS FROM #OP_SummaryOfChanges
		PRINT N'Message: Total ' + CAST(@INSERT_COUNTS AS VARCHAR) + N' VULN INSERTED.'	

		SELECT @UPDATE_COUNTS = UPDATE_COUNTS FROM #OP_SummaryOfChanges
		PRINT N'Message: TOTAL ' + CAST(@UPDATE_COUNTS AS VARCHAR) + N' VULN UPDATED.'				

		SELECT @DELETE_COUNTS = DELETE_COUNTS FROM #OP_SummaryOfChanges
		PRINT N'Message: Total ' + CAST(@DELETE_COUNTS AS VARCHAR) + N' VULN INSERTED.'	

		IF (XACT_STATE()) = 1
		BEGIN
			PRINT N'The transaction is committable. Committing transaction.'
			COMMIT TRANSACTION MERGE_CMN_FMT_V1;
		END;

	END TRY

        
	BEGIN CATCH

		IF (XACT_STATE()) = -1
		BEGIN
			PRINT N'The transaction is in an uncommittable state. Rolling back transaction.'
			ROLLBACK TRANSACTION MERGE_CMN_FMT_V1
		END;
			
		DECLARE @ErrorNumber INT = ERROR_NUMBER();
		DECLARE @ErrorLine INT = ERROR_LINE();
		DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();

		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH

END
GO
PRINT N'Creating [dbo].[MERGE_CLNT_VULN_INSTC_TRIPWIRE_IP360_MT]...';


GO

/******************************
	** Desc: 
	** Auth: GM
	** Date: 09/16/2016
	**************************
	** Change History
	**************************
	**  Date	        Author                  Description	
	**  --------        --					------------------------------------
	**  10/19/2016		GM					Added OWASP_TOP_10_KEY
	**  11/29/2016		GM					Multi-tenancy changes
	**  01/23/2017		GM					Vuln Category changes
	**************************************/

/*
	DECLARE @SRC_COUNTS INT = 0 
			,@INSERT_COUNTS INT = 0
			,@UPDATE_COUNTS INT = 0
			,@DELETE_COUNTS INT = 0;
	EXEC [dbo].[MERGE_CLNT_VULN_INSTC_TRIPWIRE_IP360_MT] 
		'JOH'
		,'[JOH].[TRIPWIRE_IP360_STG]'
		,'[JOH].[CLNT_VULN_INSTC]'
		, @SRC_COUNTS OUTPUT
		, @INSERT_COUNTS OUTPUT 
		, @UPDATE_COUNTS OUTPUT 
		, @DELETE_COUNTS OUTPUT

	SELECT @SRC_COUNTS  
	SELECT @INSERT_COUNTS  
	SELECT @UPDATE_COUNTS  
	SELECT @DELETE_COUNTS 

	--## - PLEASE VERIFY
*/

CREATE PROCEDURE [dbo].[MERGE_CLNT_VULN_INSTC_TRIPWIRE_IP360_MT]
	@SCHEMA_NM VARCHAR(1000),
	@STG_TBL_NAME VARCHAR(1000),
	@MASTER_TBL_NAME VARCHAR(1000),
	@SRC_COUNTS  INT OUTPUT,
	@INSERT_COUNTS INT OUTPUT,
	@UPDATE_COUNTS INT OUTPUT,
	@DELETE_COUNTS INT OUTPUT
AS
BEGIN
	IF OBJECT_ID('tempdb..#Vulnerability_NV') IS NOT NULL
	DROP TABLE #Vulnerability_NV;

	CREATE TABLE #Vulnerability_NV(
		[ROW_STS_KEY] [int] NOT NULL,
		[ORG_KEY] [int] NOT NULL,
		[CLNT_ENGMT_CD] [varchar](30) NOT NULL,
		[SECUR_SRVC_CD] [varchar](10) NOT NULL,
		[VULN_SRC_KEY] [int] NOT NULL,
		[VULN_INSTC_STS_CD] [varchar](3) NOT NULL,
		[VULN_SEV_CD] [varchar](3) NULL,
		[VULN_IMP_CD] [varchar](3) NULL,
		[RISK_PRBL_CD] [varchar](3) NULL,
		[RMDTN_CST_EFFRT_CD] [varchar](3) NULL,
		[VULN_CATGY_CD] [varchar](10) NULL,
		[OWASP_TOP_10_KEY] [int] NULL,
		[CVE_ID] [varchar](15) NULL,
		[OS_KEY] [int] NULL,
		[SRC_VULN_SCAN_ID] [varchar](150) NULL,
		[SRC_VULN_SCAN_STRT_DT] [datetime] NULL,
		[SRC_VULN_SCAN_END_DT] [datetime] NULL,
		[SRC_VULN_INSTC_ID] [varchar](150) NULL,
		[SRC_VULN_ID] [varchar](150) NULL,
		[VULN_NM] [varchar](255) NOT NULL,
		[VULN_DESC] [text] NULL,
		[VULN_CREAT_DT] [datetime] NOT NULL,
		[IPADR] [varchar](39) NULL,
		[PORT_NBR] [int] NULL,
		[SRC_ADVS_TXT] [varchar](1024) NULL,
		[SRC_VULN_BAS_SCOR] [decimal](10, 2) NULL,
		[VULN_BAS_SCOR] [decimal](10, 2) NULL,
		[VULN_IMP_SUB_SCOR] [decimal](10, 2) NULL,
		[VULN_EXPLT_SUB_SCOR] [decimal](10, 2) NULL,
		[VULN_TMPRL_SCOR] [decimal](10, 2) NULL,
		[VULN_ENV_SCOR] [decimal](10, 2) NULL,
		[VULN_OVALL_SCOR] [decimal](10, 2) NULL,
		[VULN_VCTR_TXT] [varchar](100) NULL,
		[NTWK_NM] [varchar](150) NULL,
		[PRTCL_NM] [varchar](255) NULL,
		[HST_NM] [varchar](150) NULL,
		[DOM_NM] [varchar](150) NULL,
		[SFTW_NM] [varchar](150) NULL,
		[APPL_URL] [nvarchar](2000) NULL,
		[NETBIOS_NM] [varchar](150) NULL,
		[MAC_ADR_NM] [varchar](150) NULL,
		[VULN_TECH_COMMT_TXT] [varchar](MAX) NULL,
		[VULN_IMP_COMMT_TXT] [varchar](MAX) NULL,
		[RECOM_COMMT_TXT] [varchar](MAX) NULL,
		[ROOT_CAUS_COMMT_TXT] [varchar](MAX) NULL,
		[APPL_FL_UPLOAD_LOG_KEY] [int] NULL
	) 
	 
	IF OBJECT_ID('tempdb..#OP_SummaryOfChanges') IS NOT NULL
	DROP TABLE #OP_SummaryOfChanges;

	CREATE TABLE #OP_SummaryOfChanges(
		[INSERT_COUNTS] [int] NULL,
		[UPDATE_COUNTS] [int] NULL,
		[DELETE_COUNTS] [int] NULL,
	);

	DECLARE @SQL_OS_NM VARCHAR(MAX);

	SET @SQL_OS_NM = '
		DECLARE @ETL_AUD_LOG_KEY INT
			, @OS_NM AS OS_NMs
			, @SRC_COUNTS_OS_NM INT = 0
			, @INSERT_COUNTS_OS_NM INT = 0;

		EXEC [dbo].[INS_ETL_AUD_LOG]   	
			@JOB_NM         = '''+ @SCHEMA_NM +':MERGE_CLNT_VULN_INSTC_TRIPWIRE_IP360:OS_NAME''
			,@JOB_STRT_DT         = NULL
			,@JOB_END_DT         = NULL
			,@JOB_STS       = ''IN PROGRESS''
			,@SRC_FL_NM       = NULL
			,@SRC_FL_FLDR_PTH  = NULL
			,@TGT_TBL_NM       = ''[dbo].[OS]''
			,@SRC_ROW_CNT     =  @SRC_COUNTS_OS_NM
			,@TGT_INSRT_ROW_CNT = @INSERT_COUNTS_OS_NM
			,@TGT_UPDT_ROW_CNT = 0 
			,@TGT_REJ_ROW_CNT  = 0
    		,@RETVAL = @ETL_AUD_LOG_KEY OUTPUT;

		INSERT @OS_NM(OS_NM)
		SELECT DISTINCT
			LTRIM(RTRIM(nv_stg.OS_NM)) AS OS_NM
		FROM ' + @STG_TBL_NAME + ' nv_stg 
		WHERE ISNULL(LTRIM(RTRIM(nv_stg.OS_NM)),'''') <> '''';
	
		EXEC [dbo].[MERGE_OS_MAP] @OS_NM, @SRC_COUNTS_OS_NM OUTPUT,  @INSERT_COUNTS_OS_NM OUTPUT;

		EXEC [dbo].[UPDATE_ETL_AUD_LOG]   	
			@ETL_AUD_LOG_KEY         = @ETL_AUD_LOG_KEY
			,@JOB_END_DT         = NULL
			,@JOB_STS       = ''COMPLETED''
			,@SRC_ROW_CNT     =  @SRC_COUNTS_OS_NM
			,@TGT_INSRT_ROW_CNT = @INSERT_COUNTS_OS_NM
			,@TGT_UPDT_ROW_CNT = 0 
			,@TGT_REJ_ROW_CNT  = 0;

		';
	EXEC (@SQL_OS_NM);
	/* END */

	/* BEGIN: INSERT VULN_NM DATA IF NOT AVAILABLE	*/
	DECLARE @SQL_VULN_NM VARCHAR(MAX);
	SET @SQL_VULN_NM = '
		DECLARE @ETL_AUD_LOG_KEY INT
			, @VULN_NM AS VULN_NMs
			, @SRC_COUNTS_VULN_NM INT = 0
			, @INSERT_COUNTS_VULN_NM INT = 0

		EXEC [dbo].[INS_ETL_AUD_LOG]   	
			@JOB_NM         = '''+ @SCHEMA_NM +':MERGE_TRIPWIRE_IP360:VULN_NM''
			,@JOB_STRT_DT         = NULL
			,@JOB_END_DT         = NULL
			,@JOB_STS       = ''IN PROGRESS''
			,@SRC_FL_NM       = NULL
			,@SRC_FL_FLDR_PTH  = NULL
			,@TGT_TBL_NM       = ''[dbo].[VULN]''
			,@SRC_ROW_CNT     =  @SRC_COUNTS_VULN_NM
			,@TGT_INSRT_ROW_CNT = @INSERT_COUNTS_VULN_NM
			,@TGT_UPDT_ROW_CNT = 0 
			,@TGT_REJ_ROW_CNT  = 0
    		,@RETVAL = @ETL_AUD_LOG_KEY OUTPUT;

		INSERT @VULN_NM(VULN_NM)
		SELECT DISTINCT
			LTRIM(RTRIM(nv_stg.VULN_NM)) AS VULN_NM
		FROM ' + @STG_TBL_NAME + ' nv_stg 
		WHERE ISNULL(LTRIM(RTRIM(nv_stg.VULN_NM)),'''') <> '''';

		EXEC [dbo].[MERGE_VULN_CATGY_MAP] @VULN_NM, @SRC_COUNTS_VULN_NM OUTPUT,  @INSERT_COUNTS_VULN_NM OUTPUT;

		EXEC [dbo].[UPDATE_ETL_AUD_LOG]   	
			@ETL_AUD_LOG_KEY         = @ETL_AUD_LOG_KEY
			,@JOB_END_DT         = NULL
			,@JOB_STS       = ''COMPLETED''
			,@SRC_ROW_CNT     =  @SRC_COUNTS_VULN_NM
			,@TGT_INSRT_ROW_CNT = @INSERT_COUNTS_VULN_NM
			,@TGT_UPDT_ROW_CNT = 0 
			,@TGT_REJ_ROW_CNT  = 0;
	';
	EXEC (@SQL_VULN_NM);
	/* END */


	-- SET XACT_ABORT ON will cause the transaction to be uncommittable when the constraint violation occurs. 
	SET XACT_ABORT ON;
	
	BEGIN TRY
		SET NOCOUNT ON

		DECLARE @SQL_TEMP VARCHAR(MAX), @SQL_MERGE VARCHAR(MAX);
		BEGIN TRANSACTION MERGE_TRIPWIRE_IP360 WITH MARK N'MERGE_TRIPWIRE_IP360 to process the Vulnerability data.'
		
		SET @SQL_TEMP = '
			INSERT #Vulnerability_NV
			SELECT 
				client_srvc_engmt.ROW_STS_KEY
				,client_engmt.CLNT_ORG_KEY
				,client_engmt.CLNT_ENGMT_CD
				,client_srvc_engmt.SECUR_SRVC_CD 
				,(SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Source'' and LKP_ENTY_NM = ''Tripwire IP360'') AS VULN_SRC_KEY
				,(SELECT VULN_INSTC_STS_CD FROM dbo.VULN_INSTC_STS WHERE VULN_INSTC_STS_NM = ''Open'') AS VULN_INSTC_STS_CD --##
				,NULL AS VULN_SEV_CD
				,NULL AS VULN_IMP_CD
				,NULL AS RISK_PRBL_CD
				,NULL AS RMDTN_CST_EFFRT_CD
				,VULN_.VULN_CATGY_CD AS VULN_CATGY_CD
				,NULL AS OWASP_TOP_10_KEY
				,RTRIM(CASE 
						WHEN (charindex(''CVE-'', nv_stg.ADVS) > 0 AND charindex('','', nv_stg.ADVS, charindex(''CVE-'', nv_stg.ADVS)) = 0 ) 
							THEN substring(nv_stg.ADVS, charindex(''CVE-'', nv_stg.ADVS), charindex('','', nv_stg.ADVS) - charindex(''CVE-'', nv_stg.ADVS) + 20)  
						WHEN (charindex(''CVE-'', nv_stg.ADVS) > 0 AND charindex('','', nv_stg.ADVS, charindex(''CVE-'', nv_stg.ADVS)) > 0 ) 
							THEN substring(nv_stg.ADVS, charindex(''CVE-'', nv_stg.ADVS), charindex('','', nv_stg.ADVS, charindex(''CVE-'', nv_stg.ADVS)) - charindex(''CVE-'', nv_stg.ADVS)) 
					ELSE NULL 
					END)  AS CVE_ID
				,OS_.OS_KEY AS OS_KEY --##
				,nv_stg.AUD_ID AS SRC_VULN_SCAN_ID
				,nv_stg.STRT_DT AS SRC_VULN_SCAN_STRT_DT
				,nv_stg.END_DT AS SRC_VULN_SCAN_END_DT
				,nv_stg.[GUID] AS SRC_VULN_INSTC_ID
				,nv_stg.VULN_ID AS SRC_VULN_ID
				,nv_stg.VULN_NM AS VULN_NM
				,nv_stg.[DESC] AS VULN_DESC
				,ISNULL(nv_stg.PUBL_DT,nv_stg.CREAT_DT) AS VULN_CREAT_DT
				,nv_stg.IP AS IPADR
				,nv_stg.PORT AS PORT_NBR
				,nv_stg.ADVS AS SRC_ADVS_TXT
				,nv_stg.MAX_CVSS_BAS_SCOR AS SRC_VULN_BAS_SCOR
				,NULL AS VULN_BAS_SCOR
				,NULL AS VULN_IMP_SUB_SCOR
				,NULL AS VULN_EXPLT_SUB_SCOR
				,NULL AS VULN_TMPRL_SCOR
				,NULL AS VULN_ENV_SCOR
				,NULL AS VULN_OVALL_SCOR
				,NULL AS VULN_VCTR_TXT
				,nv_stg.NTWK_NM AS NTWK_NM
				,nv_stg.PRTCL AS PRTCL_NM
				,nv_stg.HST_NM AS HST_NM
				,nv_stg.DOM_NM AS DOM_NM
				,nv_stg.APPL_NM AS SFTW_NM
				,NULL AS APPL_URL
				,nv_stg.NETBIOS_NM AS NETBIOS_NM
				,nv_stg.MAC_ADR AS MAC_ADR_NM
				,NULL AS VULN_TECH_COMMT_TXT
				,CAST(,nv_stg.STRG AS VARCHAR(MAX)) AS VULN_IMP_COMMT_TXT
				,NULL AS RECOM_COMMT_TXT
				,CAST(nv_stg.RISK AS VARCHAR(MAX)) AS ROOT_CAUS_COMMT_TXT
				,NULL AS APPL_FL_UPLOAD_LOG_KEY
			FROM ' + @STG_TBL_NAME + ' nv_stg
			INNER JOIN dbo.CLNT_ENGMT client_engmt
				ON nv_stg.NTWK_GRP_NM = client_engmt.CLNT_ENGMT_CD
			INNER JOIN dbo.CLNT_SECUR_SRVC_ENGMT client_srvc_engmt
				ON client_srvc_engmt.CLNT_ENGMT_CD = client_engmt.CLNT_ENGMT_CD
				AND client_srvc_engmt.SECUR_SRVC_CD = ''NV''
			LEFT JOIN dbo.OS OS_
				ON OS_.OS_NM = LTRIM(RTRIM(nv_stg.OS_NM))
			LEFT JOIN dbo.VULN VULN_
				ON VULN_.VULN_NM = LTRIM(RTRIM(nv_stg.VULN_NM))
			WHERE client_srvc_engmt.ROW_STS_KEY = (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Row Status'' and LKP_ENTY_NM = ''Active'')';
		EXEC (@SQL_TEMP);

		UPDATE #Vulnerability_NV SET CVE_ID = NULL WHERE ISNULL(CVE_ID,'') = ''

		UPDATE vlun_master SET vlun_master.VULN_VCTR_TXT = cve.VCTR_TXT
			,vlun_master.VULN_BAS_SCOR = cve.BAS_SCOR
			,vlun_master.VULN_IMP_SUB_SCOR = cve.IMP_SUB_SCOR
			,vlun_master.VULN_EXPLT_SUB_SCOR = cve.EXPLT_SUB_SCOR 
			--,vlun_master.VULN_OVALL_SCOR = cve.BAS_SCOR
		FROM #Vulnerability_NV vlun_master
		JOIN dbo.CVE cve
			ON vlun_master.CVE_ID = cve.CVE_ID

		--Overall Score Logic --CVSS v2
		UPDATE vlun_master SET vlun_master.VULN_OVALL_SCOR = (CASE WHEN ((vlun_master.[VULN_BAS_SCOR] IS NOT NULL) AND (vlun_master.[VULN_ENV_SCOR] IS NOT NULL)) THEN vlun_master.[VULN_ENV_SCOR] WHEN ((vlun_master.[VULN_BAS_SCOR] IS NOT NULL) AND (vlun_master.[VULN_ENV_SCOR] IS NULL) AND (vlun_master.[VULN_TMPRL_SCOR] IS NOT NULL)) THEN vlun_master.[VULN_TMPRL_SCOR] WHEN ((vlun_master.[VULN_BAS_SCOR] IS NOT NULL) AND (vlun_master.[VULN_ENV_SCOR] IS NULL) AND (vlun_master.[VULN_TMPRL_SCOR] IS NULL)) THEN vlun_master.[VULN_BAS_SCOR] ELSE vlun_master.[VULN_BAS_SCOR] END)
		FROM #Vulnerability_NV vlun_master

		-- Update CVE_ID as NULL, if not in the reference table
		UPDATE vlun_master SET CVE_ID = NULL
		FROM  #Vulnerability_NV vlun_master
		LEFT OUTER JOIN dbo.CVE cve
			ON vlun_master.CVE_ID = cve.CVE_ID
		WHERE cve.CVE_ID IS NULL

		SELECT @SRC_COUNTS = COUNT(*) FROM #Vulnerability_NV
		PRINT N'Message: TOTAL ' + CAST(@SRC_COUNTS AS VARCHAR) + N' RECORDS FROM SOURCE.'	

		SET @SQL_MERGE = '
			DECLARE @SummaryOfChanges table (Change VARCHAR(20));

			;WITH _target AS 
			(

				SELECT *
				FROM ' + @MASTER_TBL_NAME + '
				WHERE SECUR_SRVC_CD IN(''NV'') 
			)
			, _source AS 
			(
				SELECT ROW_STS_KEY
				,ORG_KEY
				,CLNT_ENGMT_CD
				,SECUR_SRVC_CD
				,VULN_SRC_KEY
				,VULN_INSTC_STS_CD
				,VULN_SEV_CD
				,VULN_IMP_CD
				,RISK_PRBL_CD
				,RMDTN_CST_EFFRT_CD
				,VULN_CATGY_CD
				,OWASP_TOP_10_KEY
				,CVE_ID
				,OS_KEY
				,SRC_VULN_SCAN_ID
				,SRC_VULN_SCAN_STRT_DT
				,SRC_VULN_SCAN_END_DT
				,SRC_VULN_INSTC_ID
				,SRC_VULN_ID
				,VULN_NM
				,VULN_DESC
				,VULN_CREAT_DT
				,IPADR
				,PORT_NBR
				,SRC_ADVS_TXT
				,SRC_VULN_BAS_SCOR
				,VULN_BAS_SCOR
				,VULN_IMP_SUB_SCOR
				,VULN_EXPLT_SUB_SCOR
				,VULN_TMPRL_SCOR
				,VULN_ENV_SCOR
				,VULN_OVALL_SCOR
				,VULN_VCTR_TXT
				,NTWK_NM
				,PRTCL_NM
				,HST_NM
				,DOM_NM
				,SFTW_NM
				,APPL_URL
				,NETBIOS_NM
				,MAC_ADR_NM
				,CAST(VULN_TECH_COMMT_TXT AS TEXT) AS VULN_TECH_COMMT_TXT
				,CAST(VULN_IMP_COMMT_TXT AS TEXT) AS VULN_IMP_COMMT_TXT
				,CAST(RECOM_COMMT_TXT AS TEXT) AS RECOM_COMMT_TXT
				,CAST(ROOT_CAUS_COMMT_TXT AS TEXT) AS ROOT_CAUS_COMMT_TXT
				,APPL_FL_UPLOAD_LOG_KEY
				FROM #Vulnerability_NV
			)


			MERGE INTO _target
			USING _source ON (
				_target.CLNT_ENGMT_CD=_source.CLNT_ENGMT_CD
				AND _target.SECUR_SRVC_CD=_source.SECUR_SRVC_CD
				AND _target.ROW_STS_KEY=_source.ROW_STS_KEY
				AND _target.ORG_KEY=_source.ORG_KEY
				AND _target.VULN_SRC_KEY=_source.VULN_SRC_KEY
				AND _target.VULN_INSTC_STS_CD=_source.VULN_INSTC_STS_CD

				AND ISNULL(_target.SRC_VULN_SCAN_ID,0)=ISNULL(_source.SRC_VULN_SCAN_ID,0)
				AND _target.SRC_VULN_ID=_source.SRC_VULN_ID
				AND ISNULL(_target.APPL_FL_UPLOAD_LOG_KEY,0)=ISNULL(_source.APPL_FL_UPLOAD_LOG_KEY,0)
				)
			WHEN NOT MATCHED THEN INSERT (
				ROW_STS_KEY
				, ORG_KEY
				, CLNT_ENGMT_CD
				, SECUR_SRVC_CD
				, VULN_SRC_KEY
				, VULN_INSTC_STS_CD
				, VULN_SEV_CD
				, VULN_IMP_CD
				, RISK_PRBL_CD
				, RMDTN_CST_EFFRT_CD
				, VULN_CATGY_CD
				, OWASP_TOP_10_KEY
				, CVE_ID
				, OS_KEY
				, SRC_VULN_SCAN_ID
				, SRC_VULN_SCAN_STRT_DT
				, SRC_VULN_SCAN_END_DT
				, SRC_VULN_INSTC_ID
				, SRC_VULN_ID
				, VULN_NM
				, VULN_DESC
				, VULN_CREAT_DT
				, IPADR
				, PORT_NBR
				, SRC_ADVS_TXT
				, SRC_VULN_BAS_SCOR
				, VULN_BAS_SCOR
				, VULN_IMP_SUB_SCOR
				, VULN_EXPLT_SUB_SCOR
				, VULN_TMPRL_SCOR
				, VULN_ENV_SCOR
				, VULN_OVALL_SCOR
				, VULN_VCTR_TXT
				, NTWK_NM
				, PRTCL_NM
				, HST_NM
				, DOM_NM
				, SFTW_NM
				, APPL_URL
				, NETBIOS_NM
				, MAC_ADR_NM
				, VULN_TECH_COMMT_TXT
				, VULN_IMP_COMMT_TXT
				, RECOM_COMMT_TXT
				, ROOT_CAUS_COMMT_TXT
				, APPL_FL_UPLOAD_LOG_KEY
				, CREAT_DT
				, CREAT_USER_ID
			)			
			VALUES (
				_source.ROW_STS_KEY
				,_source.ORG_KEY
				,_source.CLNT_ENGMT_CD
				,_source.SECUR_SRVC_CD
				,_source.VULN_SRC_KEY
				,_source.VULN_INSTC_STS_CD
				,_source.VULN_SEV_CD
				,_source.VULN_IMP_CD
				,_source.RISK_PRBL_CD
				,_source.RMDTN_CST_EFFRT_CD
				,_source.VULN_CATGY_CD
				,_source.OWASP_TOP_10_KEY
				,_source.CVE_ID
				,_source.OS_KEY
				,_source.SRC_VULN_SCAN_ID
				,_source.SRC_VULN_SCAN_STRT_DT
				,_source.SRC_VULN_SCAN_END_DT
				,_source.SRC_VULN_INSTC_ID
				,_source.SRC_VULN_ID
				,_source.VULN_NM
				,_source.VULN_DESC
				,_source.VULN_CREAT_DT
				,_source.IPADR
				,_source.PORT_NBR
				,_source.SRC_ADVS_TXT
				,_source.SRC_VULN_BAS_SCOR
				,_source.VULN_BAS_SCOR
				,_source.VULN_IMP_SUB_SCOR
				,_source.VULN_EXPLT_SUB_SCOR
				,_source.VULN_TMPRL_SCOR
				,_source.VULN_ENV_SCOR
				,_source.VULN_OVALL_SCOR
				,_source.VULN_VCTR_TXT
				,_source.NTWK_NM
				,_source.PRTCL_NM
				,_source.HST_NM
				,_source.DOM_NM
				,_source.SFTW_NM
				,_source.APPL_URL
				,_source.NETBIOS_NM
				,_source.MAC_ADR_NM
				,_source.VULN_TECH_COMMT_TXT
				,_source.VULN_IMP_COMMT_TXT
				,_source.RECOM_COMMT_TXT
				,_source.ROOT_CAUS_COMMT_TXT
				,_source.APPL_FL_UPLOAD_LOG_KEY
				,GETDATE() 
				,''2''
			)

			OUTPUT $ACTION INTO @SummaryOfChanges
			OPTION(RECOMPILE);

			INSERT INTO #OP_SummaryOfChanges
			VALUES(
				(SELECT COUNT(*) AS INSERT_COUNTS FROM @SummaryOfChanges WHERE Change = ''INSERT'')
				,(SELECT COUNT(*) AS UPDATE_COUNTS FROM @SummaryOfChanges WHERE Change = ''UPDATE'')
				,(SELECT COUNT(*) AS DELETE_COUNTS FROM @SummaryOfChanges WHERE Change = ''DELETE'')
			);
		'
		EXEC (@SQL_MERGE);

		SELECT @INSERT_COUNTS = INSERT_COUNTS FROM #OP_SummaryOfChanges
		PRINT N'Message: Total ' + CAST(@INSERT_COUNTS AS VARCHAR) + N' VULN INSERTED.'	

		SELECT @UPDATE_COUNTS = UPDATE_COUNTS FROM #OP_SummaryOfChanges
		PRINT N'Message: TOTAL ' + CAST(@UPDATE_COUNTS AS VARCHAR) + N' VULN UPDATED.'				

		SELECT @DELETE_COUNTS = DELETE_COUNTS FROM #OP_SummaryOfChanges
		PRINT N'Message: Total ' + CAST(@DELETE_COUNTS AS VARCHAR) + N' VULN INSERTED.'			

		IF (XACT_STATE()) = 1
		BEGIN
			PRINT N'The transaction is committable. Committing transaction.'
			COMMIT TRANSACTION MERGE_TRIPWIRE_IP360;
		END;

	END TRY

        
	BEGIN CATCH

		IF (XACT_STATE()) = -1
		BEGIN
			PRINT N'The transaction is in an uncommittable state. Rolling back transaction.'
			ROLLBACK TRANSACTION MERGE_TRIPWIRE_IP360
		END;
			
		DECLARE @ErrorNumber INT = ERROR_NUMBER();
		DECLARE @ErrorLine INT = ERROR_LINE();
		DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();

		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH

END
GO
PRINT N'Creating [dbo].[MERGE_CLNT_VULN_SECUR_CTL_MT]...';


GO



/******************************
	** Desc: 
	** Auth: GM
	** Date: 06/20/2016
	**************************
	** Change History
	**************************
	**  Date	        Author			Description	
	**  --------        --		        ------------------------------------
	**  11/29/2016		GM				Multi-tenancy changes
	**************************************/

/*

DECLARE @SRC_COUNTS INT = 0 
		,@INSERT_COUNTS INT = 0
		,@UPDATE_COUNTS INT = 0
		,@DELETE_COUNTS INT = 0;
EXEC [dbo].[MERGE_CLNT_VULN_SECUR_CTL_MT] 
	'JOH'
	,'[JOH].[CLNT_VULN_INSTC]'
	,'[JOH].[CLNT_VULN_SECUR_CTL]'
	, @SRC_COUNTS OUTPUT
	, @INSERT_COUNTS OUTPUT 
	, @UPDATE_COUNTS OUTPUT 
	, @DELETE_COUNTS OUTPUT

SELECT @SRC_COUNTS  
SELECT @INSERT_COUNTS  
SELECT @UPDATE_COUNTS  
SELECT @DELETE_COUNTS 

--## - PLEASE VERIFY
*/


CREATE PROCEDURE [dbo].[MERGE_CLNT_VULN_SECUR_CTL_MT]
	@SCHEMA_NM VARCHAR(1000),
	@MASTER_TBL_NAME VARCHAR(1000),
	@MAPPING_TBL_NAME VARCHAR(1000),
	@SRC_COUNTS  INT OUTPUT,
	@INSERT_COUNTS INT OUTPUT,
	@UPDATE_COUNTS INT OUTPUT,
	@DELETE_COUNTS INT OUTPUT
AS

BEGIN

	IF OBJECT_ID('tempdb..#CLNT_VULN_SECUR_CTL') IS NOT NULL
	DROP TABLE #CLNT_VULN_SECUR_CTL;

	CREATE TABLE #CLNT_VULN_SECUR_CTL(
		[CLNT_VULN_INSTC_KEY] [int] NOT NULL,
		[REG_CMPLN_CD] [varchar](20) NOT NULL,
		[REG_CMPLN_VER] [varchar](20) NOT NULL,
		[SECUR_CTL_CD] [varchar](20) NOT NULL
		)

	IF OBJECT_ID('tempdb..#SecurCtlData') IS NOT NULL
	DROP TABLE #SecurCtlData;

	CREATE TABLE #SecurCtlData(
		[REG_CMPLN_CD] [varchar](20) NOT NULL,
		[REG_CMPLN_VER] [varchar](20) NOT NULL,
		[SECUR_CTL_CD] [varchar](20) NOT NULL,
		[PRI_REG_CMPLN_CD] [varchar](20) NOT NULL,
		[PRI_REG_CMPLN_VER] [varchar](20) NOT NULL,
		[PRI_SECUR_CTL_CD] [varchar](20) NOT NULL
		)
	
	IF OBJECT_ID('tempdb..#OP_SummaryOfChanges') IS NOT NULL
	DROP TABLE #OP_SummaryOfChanges;

	CREATE TABLE #OP_SummaryOfChanges(
		[INSERT_COUNTS] [int] NULL,
		[UPDATE_COUNTS] [int] NULL,
		[DELETE_COUNTS] [int] NULL,
	);
	


	-- #Populate Primary and Secondary control mapping
	SELECT DISTINCT PRI_SECUR_CTL_CD, PRI_REG_CMPLN_CD, PRI_REG_CMPLN_VER
	INTO #secur_ctl_CTE
	FROM [dbo].SECUR_CTL_MAP

	INSERT #SecurCtlData([REG_CMPLN_CD], [REG_CMPLN_VER], [SECUR_CTL_CD], [PRI_REG_CMPLN_CD], [PRI_REG_CMPLN_VER], [PRI_SECUR_CTL_CD] )
	SELECT [REG_CMPLN_CD], [REG_CMPLN_VER], [SECUR_CTL_CD], [PRI_REG_CMPLN_CD], [PRI_REG_CMPLN_VER], [PRI_SECUR_CTL_CD]
	FROM
	(
		SELECT DISTINCT PRI_REG_CMPLN_CD AS REG_CMPLN_CD, PRI_REG_CMPLN_VER AS REG_CMPLN_VER, PRI_SECUR_CTL_CD AS SECUR_CTL_CD
		, [PRI_REG_CMPLN_CD], [PRI_REG_CMPLN_VER], [PRI_SECUR_CTL_CD]
		FROM #secur_ctl_CTE
		UNION 
		SELECT SEC_REG_CMPLN_CD AS REG_CMPLN_CD, SEC_REG_CMPLN_VER AS REG_CMPLN_VER, SEC_SECUR_CTL_CD AS SECUR_CTL_CD
		, secur_ctl_map.PRI_REG_CMPLN_CD, secur_ctl_map.PRI_REG_CMPLN_VER, secur_ctl_map.PRI_SECUR_CTL_CD
		FROM [dbo].SECUR_CTL_MAP secur_ctl_map
		JOIN #secur_ctl_CTE 
			ON secur_ctl_map.PRI_REG_CMPLN_CD = #secur_ctl_CTE.PRI_REG_CMPLN_CD
				AND secur_ctl_map.PRI_REG_CMPLN_VER = #secur_ctl_CTE.PRI_REG_CMPLN_VER
				AND secur_ctl_map.PRI_SECUR_CTL_CD = #secur_ctl_CTE.PRI_SECUR_CTL_CD
	) SecurCtlTemp;

	 
	-- SET XACT_ABORT ON will cause the transaction to be uncommittable when the constraint violation occurs. 
	SET XACT_ABORT ON;
	
	BEGIN TRY
		SET NOCOUNT ON

		--DECLARE @SCHEMA_NM VARCHAR(1000), @STG_TBL_NAME VARCHAR(1000), @MASTER_TBL_NAME VARCHAR(1000), @MAPPING_TBL_NAME VARCHAR(1000);;
		--SET @SCHEMA_NM = 'JOH';
		--SET @MASTER_TBL_NAME = '[JOH].[CLNT_VULN_INSTC]';
		--SET @MAPPING_TBL_NAME = '[JOH].[CLNT_VULN_SECUR_CTL]';

		DECLARE @SQL_TEMP VARCHAR(MAX), @SQL_MERGE VARCHAR(MAX);

		--BEGIN TRANSACTION MERGE_CLNT_VULN_SECUR_CTL WITH MARK N'MERGE_CLNT_VULN_SECUR_CTL to process the Vulnerability data.'
			
		SET @SQL_TEMP = '
						
		INSERT #CLNT_VULN_SECUR_CTL
		SELECT DISTINCT 
			_clientvuln.CLNT_VULN_INSTC_KEY
			,SecurCtldata.[REG_CMPLN_CD]
			,SecurCtldata.[REG_CMPLN_VER]
			,SecurCtldata.[SECUR_CTL_CD]
		FROM ' + @MASTER_TBL_NAME + ' _clientvuln WITH(NOLOCK)
		INNER JOIN [dbo].[CVE] _cve  WITH(NOLOCK)
			ON _clientvuln.[CVE_ID] = _cve.[CVE_ID]
		INNER JOIN [dbo].[CVE_SECUR_CTL_MAP] _cvescrtymap  WITH(NOLOCK)
			ON _cvescrtymap.[CVE_ID] = _cve.[CVE_ID]
			AND _cvescrtymap.ROW_STS_KEY IN (SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Row Status'' and LKP_ENTY_NM = ''Active'')
		INNER JOIN #SecurCtldata SecurCtldata
			on _cvescrtymap.REG_CMPLN_CD = SecurCtldata.PRI_REG_CMPLN_CD
				and _cvescrtymap.REG_CMPLN_VER = SecurCtldata.PRI_REG_CMPLN_VER
				and _cvescrtymap.SECUR_CTL_CD = SecurCtldata.PRI_SECUR_CTL_CD
		WHERE NOT EXISTS
		(
			SELECT TOP 1 _clientvulnsecurctl.CLNT_VULN_INSTC_KEY
			FROM ' + @MAPPING_TBL_NAME + ' _clientvulnsecurctl WITH(NOLOCK)
			WHERE _clientvuln.CLNT_VULN_INSTC_KEY = _clientvulnsecurctl.CLNT_VULN_INSTC_KEY
		);'

		PRINT @SQL_TEMP;
		EXEC (@SQL_TEMP);



		SELECT @SRC_COUNTS = COUNT(*) FROM #CLNT_VULN_SECUR_CTL
		PRINT N'Message: TOTAL ' + CAST(@SRC_COUNTS AS VARCHAR) + N' RECORDS FROM SOURCE.'	

		SET @SQL_MERGE = '

		DECLARE @SummaryOfChanges table (Change VARCHAR(20));

		;WITH _target AS 
		(
			SELECT * FROM ' + @MAPPING_TBL_NAME + '
		)
		, _source AS 
		(
			SELECT * FROM #CLNT_VULN_SECUR_CTL
		)

		MERGE INTO _target
		USING _source ON (
			_target.CLNT_VULN_INSTC_KEY=_source.CLNT_VULN_INSTC_KEY
			AND _target.REG_CMPLN_CD=_source.REG_CMPLN_CD
			 AND _target.REG_CMPLN_VER=_source.REG_CMPLN_VER
			 AND _target.SECUR_CTL_CD=_source.SECUR_CTL_CD
			)
		WHEN NOT MATCHED THEN INSERT (
			[CLNT_VULN_INSTC_KEY]
           ,[REG_CMPLN_CD]
           ,[REG_CMPLN_VER]
           ,[SECUR_CTL_CD]
           ,[ROW_STS_KEY]
           ,[CREAT_DT]
           ,[CREAT_USER_ID]
           ,[UPDT_DT]
           ,[UPDT_USER_ID]
		)			
		VALUES (
			_source.CLNT_VULN_INSTC_KEY
			,_source.REG_CMPLN_CD
			,_source.REG_CMPLN_VER
			,_source.SECUR_CTL_CD
			,(SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = ''Row Status'' and LKP_ENTY_NM = ''Active'')
			,GETDATE() 
			,''2'' 
			,NULL
			,NULL
		)

		OUTPUT $ACTION INTO @SummaryOfChanges
		OPTION(RECOMPILE);

		INSERT INTO #OP_SummaryOfChanges
		VALUES(
			(SELECT COUNT(*) AS INSERT_COUNTS FROM @SummaryOfChanges WHERE Change = ''INSERT'')
			,(SELECT COUNT(*) AS UPDATE_COUNTS FROM @SummaryOfChanges WHERE Change = ''UPDATE'')
			,(SELECT COUNT(*) AS DELETE_COUNTS FROM @SummaryOfChanges WHERE Change = ''DELETE'')
		);
		
		'

		--PRINT @SQL_MERGE;
		EXEC (@SQL_MERGE);

		SELECT @INSERT_COUNTS = INSERT_COUNTS FROM #OP_SummaryOfChanges
		PRINT N'Message: Total ' + CAST(@INSERT_COUNTS AS VARCHAR) + N' VULN INSERTED.'	

		SELECT @UPDATE_COUNTS = UPDATE_COUNTS FROM #OP_SummaryOfChanges
		PRINT N'Message: TOTAL ' + CAST(@UPDATE_COUNTS AS VARCHAR) + N' VULN UPDATED.'				

		SELECT @DELETE_COUNTS = DELETE_COUNTS FROM #OP_SummaryOfChanges
		PRINT N'Message: Total ' + CAST(@DELETE_COUNTS AS VARCHAR) + N' VULN INSERTED.'	

		IF (XACT_STATE()) = 1
		BEGIN
			PRINT N'The transaction is committable. Committing transaction.'
			COMMIT TRANSACTION MERGE_CLNT_VULN_SECUR_CTL;
		END;

	END TRY

        
	BEGIN CATCH

		IF (XACT_STATE()) = -1
		BEGIN
			PRINT N'The transaction is in an uncommittable state. Rolling back transaction.'
			ROLLBACK TRANSACTION MERGE_CLNT_VULN_SECUR_CTL
		END;
			
		DECLARE @ErrorNumber INT = ERROR_NUMBER();
		DECLARE @ErrorLine INT = ERROR_LINE();
		DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();

		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH

END
GO
PRINT N'Creating [dbo].[MERGE_CVE]...';


GO
/********************************************************************
	** Desc: To load CVE table
	** Auth: Prakash Selvaraj
	** Date: 06/20/2016
	**************************
	** Change History
	**************************
	**  Date					Author					Description	
	**  06/20/2016        Prakash Selvaraj            Inital Version
*********************************************************************/

/*
EXEC [dbo].[MERGE_CVE]

*/



CREATE PROCEDURE [dbo].[MERGE_CVE]
  @ins_row_cnt int output,
  @upd_row_cnt int output
AS
BEGIN

declare  @mergeResultsTable table (MergeAction VARCHAR(20));


BEGIN TRY
	SET NOCOUNT ON

		MERGE DBO.CVE AS T
USING ( 
 SELECT 
	   CVE_ID,
	   PUBL_DT,
	   LST_MOD_DT,
	   CVE_DESC,  
	   metric.BAS_SCOR,
	   metric.ACS_VCTR,
	   metric.ACS_CMPLX, 
	   metric.AUTH, 
	   metric.CONFDTY_IMP, 
	   metric.INGTY_IMP, 
	   metric.AVL_IMP,
	   ltrim(CWE.CWE_LIST_ID) AS CWE_ID, 
			'(' + Acc_Vec.MTRC_VCTR_CD	 + ':' +  Acc_Vec.MTRC_VAL_VCTR_CD   + '/' 
				+ Acc_cmp.MTRC_VCTR_CD	 + ':' +  Acc_cmp.MTRC_VAL_VCTR_CD   + '/'
				+ Authen.MTRC_VCTR_CD	 + ':' +  Authen.MTRC_VAL_VCTR_CD    + '/'
				+ Conf_Imp.MTRC_VCTR_CD	 + ':' +  Conf_Imp.MTRC_VAL_VCTR_CD  + '/'
				+ Intg_Impc.MTRC_VCTR_CD + ':' +  Intg_Impc.MTRC_VAL_VCTR_CD + '/'
				+ Avail_Imp.MTRC_VCTR_CD + ':' +  Avail_Imp.MTRC_VAL_VCTR_CD + ')' VCTR_TXT,
	   cast ( cast(10.41*(1-(1-Conf_Imp.MTRC_VAL_SCOR)*(1-Intg_Impc.MTRC_VAL_SCOR)*(1-Avail_Imp.MTRC_VAL_SCOR)) as decimal(10,1)) as float ) AS IMP_SUB_SCOR,
	   cast( cast(20 * Acc_Vec.MTRC_VAL_SCOR * Acc_cmp.MTRC_VAL_SCOR * Authen.MTRC_VAL_SCOR as decimal(10,1)) as float ) as EXPLT_SUB_SCOR
 FROM 
   stg.CVE_ENTRY_STG ENT 
   LEFT OUTER JOIN   
		   ( SELECT ENTRY_ID
					,STUFF((SELECT ', ' + CAST(CWE_ID AS VARCHAR(10)) [text()]
			 FROM stg.CVE_CWE_STG
			 WHERE ENTRY_ID = t.ENTRY_ID
				FOR XML PATH(''), TYPE).value('.','VARCHAR(50)'),1,2,' ') CWE_LIST_ID
			FROM stg.CVE_CWE_STG t
			GROUP BY ENTRY_ID 
			) CWE
		ON ENT.ENTRY_ID = CWE.ENTRY_ID 
   LEFT OUTER JOIN  stg.CVE_CVSS_STG cvss
		on ENT.ENTRY_ID = cvss.ENTRY_ID 
   LEFT OUTER JOIN stg.CVE_BAS_METR_STG metric
		on cvss.cvss_id = metric.cvss_id 
   LEFT OUTER JOIN (
		  SELECT MTRC_VCTR_CD, MTRC_VAL_VCTR_CD, MTRC_VAL_TXT, MTRC_VAL_SCOR
		  FROM dbo.CVSS_SCOR_MTRC where mtrc_nm = 'Access Vector' ) Acc_Vec
		  ON metric.ACS_VCTR = Acc_Vec.MTRC_VAL_TXT
   LEFT OUTER JOIN (
		  SELECT MTRC_VCTR_CD, MTRC_VAL_VCTR_CD, MTRC_VAL_TXT, MTRC_VAL_SCOR
		  FROM dbo.CVSS_SCOR_MTRC where mtrc_nm = 'Access Complexity' ) Acc_cmp
		  ON metric.ACS_CMPLX = Acc_cmp.MTRC_VAL_TXT
   LEFT OUTER JOIN (
		  SELECT MTRC_VCTR_CD, MTRC_VAL_VCTR_CD, MTRC_VAL_TXT, MTRC_VAL_SCOR
		  FROM dbo.CVSS_SCOR_MTRC where mtrc_nm = 'Authentication' ) Authen
		  ON metric.AUTH = Authen.MTRC_VAL_TXT
   LEFT OUTER JOIN (
		  SELECT MTRC_VCTR_CD, MTRC_VAL_VCTR_CD, MTRC_VAL_TXT, MTRC_VAL_SCOR
		  FROM dbo.CVSS_SCOR_MTRC where mtrc_nm = 'Confidentiality Impact' ) Conf_Imp
		  ON metric.CONFDTY_IMP = Conf_Imp.MTRC_VAL_TXT
   LEFT OUTER JOIN (
		  SELECT MTRC_VCTR_CD, MTRC_VAL_VCTR_CD, MTRC_VAL_TXT, MTRC_VAL_SCOR
		  FROM dbo.CVSS_SCOR_MTRC where mtrc_nm = 'Integrity Impact' ) Intg_Impc
		  ON metric.INGTY_IMP = Intg_Impc.MTRC_VAL_TXT
   LEFT OUTER JOIN (
		  SELECT MTRC_VCTR_CD, MTRC_VAL_VCTR_CD, MTRC_VAL_TXT, MTRC_VAL_SCOR
		  FROM dbo.CVSS_SCOR_MTRC where mtrc_nm = 'Availability Impact' ) Avail_Imp
		  ON metric.AVL_IMP = Avail_Imp.MTRC_VAL_TXT
  
 ) AS S
ON  S.CVE_ID  = T.CVE_ID
WHEN NOT MATCHED BY TARGET 
    THEN INSERT(
    CVE_ID, 
    CVE_DESC,
    PUBL_DT, 
    LST_MOD_DT, 
    CWE_ID,
    BAS_SCOR, 
    ACS_VCTR,
    ACS_CMPLX,
    AUTH,
    CONFDTY_IMP,
    INGTY_IMP,
    AVL_IMP,
	VCTR_TXT,
	IMP_SUB_SCOR,
	EXPLT_SUB_SCOR,
    CREAT_DT, 
    CREAT_USER_ID) 
  VALUES(
    S.CVE_ID, 
    S.CVE_DESC,
    S.PUBL_DT, 
    S.LST_MOD_DT, 
    S.CWE_ID,
    S.BAS_SCOR, 
    S.ACS_VCTR,
    S.ACS_CMPLX,
    S.AUTH,
    S.CONFDTY_IMP,
    S.INGTY_IMP,
    S.AVL_IMP, 
	S.VCTR_TXT,
	S.IMP_SUB_SCOR,
	S.EXPLT_SUB_SCOR,
    GETDATE(),
    2)
WHEN MATCHED 
    THEN UPDATE 
  SET 
   T.CVE_DESC      = S.CVE_DESC,
   T.PUBL_DT  = S.PUBL_DT,
   T.LST_MOD_DT = S.LST_MOD_DT,
   T.CWE_ID  = S.CWE_ID,
   T.BAS_SCOR  = S.BAS_SCOR,
   T.ACS_VCTR  = S.ACS_VCTR,
   T.ACS_CMPLX  = S.ACS_CMPLX,
   T.AUTH   = S.AUTH,
   T.CONFDTY_IMP = S.CONFDTY_IMP,
   T.INGTY_IMP  = S.INGTY_IMP,
   T.AVL_IMP  = S.AVL_IMP,  
   T.VCTR_TXT = S.VCTR_TXT,
   T.IMP_SUB_SCOR = S.IMP_SUB_SCOR,
   T.EXPLT_SUB_SCOR = S.EXPLT_SUB_SCOR,
   T.UPDT_DT = GETDATE(), 
   UPDT_USER_ID = 2


output $action into @mergeResultsTable; 

			select @ins_row_cnt = [INSERT],
				   @upd_row_cnt = [UPDATE]
			  from (select 'NOOP' MergeAction -- row for null merge into null
					 union all
					select * from @mergeResultsTable) mergeResultsPlusEmptyRow     
			 pivot (count(MergeAction) 
			   for MergeAction in ([INSERT],[UPDATE],[DELETE])) 
				as mergeResultsPivot;

END TRY

BEGIN CATCH

		
		DECLARE @ErrorNumber INT = ERROR_NUMBER();
		DECLARE @ErrorLine INT = ERROR_LINE();
		DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();

		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);

END CATCH

END
GO
PRINT N'Creating [dbo].[MERGE_CVE_SECUR_CTL_MAP]...';


GO
/********************************************************************
	** Desc: To load CVE_SECUR_CTL_MAP table
	** Auth: Prakash Selvaraj
	** Date: 06/20/2016
	**************************
	** Change History
	**************************
	**  Date					Author					Description	
	**  06/20/2016        Prakash Selvaraj            Inital Version
	**  07/11/2016        Prakash Selvaraj            Added Try-Catch to capture the errors
*********************************************************************/

/*
EXEC [dbo].[MERGE_CVE_SECUR_CTL_MAP]

*/



CREATE PROCEDURE [dbo].[MERGE_CVE_SECUR_CTL_MAP]
  @ins_row_cnt int output,
  @upd_row_cnt int output
AS
BEGIN

declare  @mergeResultsTable table (MergeAction VARCHAR(20));


BEGIN TRY
	SET NOCOUNT ON

		MERGE DBO.CVE_SECUR_CTL_MAP AS T
		USING 
		(

				SELECT 
					a.CVE_ID, 
					a.REG_CMPLN_CD, 
					a.REG_CMPLN_VER, 
					LTRIM(Split.a.value('.', 'VARCHAR(100)')) AS SECUR_CTL_CD_SPLIT 
				FROM 
					(
					SELECT 
						CVE_ID, 
						REG_CMPLN_CD, 
						REG_CMPLN_VER, 
						CAST ('<M>' + REPLACE(SECUR_CTL_CD, ',', '</M><M>') + '</M>' AS XML) AS String 
					 FROM 
						stg.CVE_SECUR_CTL_MAP_STG 
		
					) AS a CROSS APPLY String.nodes ('/M') AS Split(a)

				 join dbo.cve cve
					 on a.cve_id = cve.cve_id
				 join dbo.secur_ctl sec
					 on a.REG_CMPLN_CD = sec.REG_CMPLN_CD 
					 and a.REG_CMPLN_VER = sec.REG_CMPLN_VER 
					 and LTRIM(Split.a.value('.', 'VARCHAR(100)')) = sec.SECUR_CTL_CD

		)
		AS S
		ON 
			S.CVE_ID				= T.CVE_ID
		AND S.REG_CMPLN_CD			= T.REG_CMPLN_CD
		AND S.REG_CMPLN_VER			= T.REG_CMPLN_VER
		AND S.SECUR_CTL_CD_SPLIT    = T.SECUR_CTL_CD

		WHEN NOT MATCHED BY TARGET 
 
					THEN INSERT
					(
					CVE_ID, 
					REG_CMPLN_CD,
					REG_CMPLN_VER, 
					SECUR_CTL_CD, 
					ROW_STS_KEY,
					CREAT_DT, 
					CREAT_USER_ID) VALUES

					(
					S.CVE_ID, 
					S.REG_CMPLN_CD,
					S.REG_CMPLN_VER,
					S.SECUR_CTL_CD_SPLIT, 
					1,
					GETDATE(), 
					2)

		WHEN MATCHED 
			THEN UPDATE 
					SET 
					T.CVE_ID = S.CVE_ID, 
					T.REG_CMPLN_CD = S.REG_CMPLN_CD, 
					T.REG_CMPLN_VER = S.REG_CMPLN_VER, 
					T.SECUR_CTL_CD = S.SECUR_CTL_CD_SPLIT,
					T.ROW_STS_KEY = 1,
					T.UPDT_DT = GETDATE(), 
					T.UPDT_USER_ID = 2


		output $action into @mergeResultsTable; 

			select @ins_row_cnt = [INSERT],
				   @upd_row_cnt = [UPDATE]
			  from (select 'NOOP' MergeAction -- row for null merge into null
					 union all
					select * from @mergeResultsTable) mergeResultsPlusEmptyRow     
			 pivot (count(MergeAction) 
			   for MergeAction in ([INSERT],[UPDATE],[DELETE])) 
				as mergeResultsPivot;


		-- Marking Inactive records

		UPDATE TGT
		SET 
		ROW_STS_KEY = 2, 
		UPDT_DT = GETDATE(), 
		UPDT_USER_ID = 2
		FROM dbo.CVE_SECUR_CTL_MAP TGT
		JOIN ( SELECT DISTINCT CVE_ID FROM STG.CVE_SECUR_CTL_MAP_STG ) STG
		ON TGT.CVE_ID = STG.CVE_ID
		LEFT OUTER JOIN 
		( SELECT 
			a.CVE_ID, 
			a.REG_CMPLN_CD, 
			a.REG_CMPLN_VER, 
			LTRIM(Split.a.value('.', 'VARCHAR(100)')) AS SECUR_CTL_CD_SPLIT 
		FROM 
			(SELECT 
			CVE_ID, 
			REG_CMPLN_CD, 
			REG_CMPLN_VER,
			CAST ('<M>' + REPLACE(SECUR_CTL_CD, ',', '</M><M>') + '</M>' AS XML) AS String 
			FROM 
			stg.CVE_SECUR_CTL_MAP_STG ) AS A 
		CROSS APPLY String.nodes ('/M') AS Split(a) ) STG1

		ON TGT.CVE_ID = STG1.CVE_ID
		AND TGT.REG_CMPLN_CD  = STG1.REG_CMPLN_CD
		AND TGT.REG_CMPLN_VER = STG1.REG_CMPLN_VER
		AND TGT.SECUR_CTL_CD  = STG1.SECUR_CTL_CD_SPLIT
		WHERE STG1.CVE_ID IS NULL 
		AND STG1.REG_CMPLN_CD IS NULL
		AND STG1.REG_CMPLN_VER IS NULL
		AND STG1.SECUR_CTL_CD_SPLIT IS NULL;


END TRY

BEGIN CATCH

		
		DECLARE @ErrorNumber INT = ERROR_NUMBER();
		DECLARE @ErrorLine INT = ERROR_LINE();
		DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();

		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);

END CATCH

END
GO
PRINT N'Creating [dbo].[MERGE_OS_MAP]...';


GO


/*
--CREATE TYPE OS_NMs AS TABLE (OS_NM NVARCHAR(150));

DECLARE @OS_NM AS OS_NMs

INSERT @OS_NM(OS_NM)
SELECT 'Cisco Aironet 1200 Series AP  '
UNION ALL
SELECT 'mac os  '
UNION ALL
SELECT 'TEST vmware TEST  '
UNION ALL
SELECT '  TEST mac os TEST'

--SELECT * FROM @OS_NM

EXEC [dbo].[MERGE_OS_MAP] @OS_NM
*/


CREATE PROCEDURE [dbo].[MERGE_OS_MAP]
	@OS_NM AS OS_NMs READONLY,
	@SRC_COUNTS  INT OUTPUT,
	@INSERT_COUNTS INT OUTPUT
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE
		@ROWS INT = 0
		,@TARGETROWS INT = 0			
		,@MESSAGE NVARCHAR(4000)
		,@DEBUG INT = 0
		--,@SRC_COUNTS INT = 0
		--,@INSERT_COUNTS INT = 0
		--,@UPDATE_COUNTS INT = 0
		--,@DELETE_COUNTS INT = 0  
		,@COUNT INT = 1;
	DECLARE @SummaryOfChanges table (Change VARCHAR(20));

	
	IF OBJECT_ID('tempdb..#OS_CATGY_MAP') IS NOT NULL
	DROP TABLE #OS_CATGY_MAP;

	CREATE TABLE #OS_CATGY_MAP(
		[OS_CATGY_KEY] [int] NOT NULL,
		[OS_CATGY_NM] [varchar](150) NULL,
		[OS_NM_QUALFR] [varchar](150) NULL,
		[ROW_STS_KEY] [int] NOT NULL,
	) 

	IF OBJECT_ID('tempdb..#OS_NM_QUAL') IS NOT NULL
	DROP TABLE #OS_NM_QUAL;

	CREATE TABLE #OS_NM_QUAL(
		[OS_NM] [varchar](150) NULL,
		[OS_CATGY_KEY] [int] NOT NULL
	) 

	IF OBJECT_ID('tempdb..#OS_NM_INSERT') IS NOT NULL
	DROP TABLE #OS_NM_INSERT;

	CREATE TABLE #OS_NM_INSERT(
		[OS_NM] [varchar](150) NULL,
		[OS_CATGY_KEY] [int] NOT NULL
	) 
	
	/*MAPPING TABLE BASED ON BUSINESS RULES*/	 
	INSERT #OS_CATGY_MAP
	SELECT '1','Windows','windows','1' UNION ALL
	SELECT '2','Linux','linux','1' UNION ALL
	SELECT '2','Linux','Red Hat','1' UNION ALL
	SELECT '3','Unix','unix','1' UNION ALL
	SELECT '3','Unix','aix','1' UNION ALL
	SELECT '3','Unix','microsystems','1' UNION ALL
	SELECT '3','Unix','hp-ux','1' UNION ALL
	SELECT '3','Unix','sco opendesktop','1' UNION ALL
	SELECT '3','Unix','sco openserver','1' UNION ALL
	SELECT '3','Unix','sco release','1' UNION ALL
	SELECT '3','Unix','sco unix','1' UNION ALL
	SELECT '3','Unix','SCO','2' UNION ALL
	SELECT '4','Mac','mac os','1' UNION ALL
	SELECT '4','Mac','iOS','1' UNION ALL
	SELECT '5','VMWare','vmware','1' UNION ALL
	SELECT '6','MainFrame','ibm os','1'  UNION ALL
	SELECT '7','Other',NULL,'1' 
	

	INSERT #OS_NM_QUAL ([OS_NM], [OS_CATGY_KEY])
	SELECT DISTINCT 
		LTRIM(RTRIM(A.OS_NM)) AS OS_NM
		,B.OS_CATGY_KEY
	FROM @OS_NM A, #OS_CATGY_MAP B
	WHERE A.OS_NM LIKE '%' + B.OS_NM_QUALFR + '%'
		AND B.ROW_STS_KEY = 1

	INSERT #OS_NM_INSERT ([OS_NM], [OS_CATGY_KEY])
	SELECT 
		OS_OTH.OS_NM
		,ISNULL(OS_QUAL.OS_CATGY_KEY, (SELECT OS_CATGY_KEY FROM #OS_CATGY_MAP WHERE OS_CATGY_NM = 'Other')) AS OS_CATGY_KEY
	FROM (SELECT LTRIM(RTRIM(OS_NM)) AS OS_NM FROM @OS_NM) OS_OTH
	 LEFT JOIN #OS_NM_QUAL OS_QUAL
		ON OS_OTH.OS_NM = OS_QUAL.OS_NM 

	SELECT @SRC_COUNTS = COUNT(*) FROM #OS_NM_INSERT
	PRINT N'Message: TOTAL ' + CAST(@SRC_COUNTS AS VARCHAR) + N' RECORDS FROM SOURCE.'

	-- SET XACT_ABORT ON will cause the transaction to be uncommittable when the constraint violation occurs. 
	SET XACT_ABORT ON;

	BEGIN TRY
	
		BEGIN TRANSACTION OS_MAP WITH MARK N'OS NAME INSERT DATA'

		;WITH _target AS 
		(

			SELECT *
			FROM [dbo].[OS]
		)
		, _source AS 
		(
			SELECT *
			FROM #OS_NM_INSERT
		)

		MERGE INTO _target
		USING _source ON (
			_target.OS_NM=_source.OS_NM
			--AND _target.OS_CATGY_KEY=_source.OS_CATGY_KEY
			)
		WHEN NOT MATCHED THEN INSERT (
			[OS_NM]
			,[OS_CATGY_KEY]
			,[CREAT_DT]
			,[CREAT_USER_ID]
		)			
		VALUES (
			_source.OS_NM
			,_source.OS_CATGY_KEY
			,GETDATE() 
			,'2' 
		)

		OUTPUT $ACTION INTO @SummaryOfChanges
		OPTION(RECOMPILE);

		SELECT @INSERT_COUNTS = @@ROWCOUNT
		PRINT N'Message: Total ' + CAST(@INSERT_COUNTS AS VARCHAR) + N' VULN INSERTED.'	

		IF (XACT_STATE()) = 1
		BEGIN
			PRINT N'The transaction is committable. Committing transaction.'
			COMMIT TRANSACTION OS_MAP;
		END;

	END TRY

        
	BEGIN CATCH

		IF (XACT_STATE()) = -1
		BEGIN
			PRINT N'The transaction is in an uncommittable state. Rolling back transaction.'
			ROLLBACK TRANSACTION OS_MAP
		END;
			
		DECLARE @ErrorNumber INT = ERROR_NUMBER();
		DECLARE @ErrorLine INT = ERROR_LINE();
		DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();

		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH

END
GO
PRINT N'Creating [dbo].[MERGE_REG_CMPLN]...';


GO

/******************************
	** Desc: To load REG_CMPLN table
	** Auth: Prakash Selvaraj
	** Date: 06/20/2016
	**************************
	** Change History
	**************************
	**  Date	        Author                  Description	
	**  06/20/2016        PS                  Inital Version
	**  07/11/2016        PS				Added Try-Catch to capture the errors
	**************************************/

/*
EXEC [dbo].[MERGE_REG_CMPLN]

*/




CREATE PROCEDURE [dbo].[MERGE_REG_CMPLN]
  @ins_row_cnt int output,
  @upd_row_cnt int output
AS
BEGIN


declare  @mergeResultsTable table (MergeAction VARCHAR(20));


	
BEGIN TRY

	SET NOCOUNT ON


		MERGE DBO.REG_CMPLN AS T
		USING STG.REG_CMPLN_STG AS S
		ON		S.REG_CMPLN_CD = T.REG_CMPLN_CD
			AND S.REG_CMPLN_VER = T.REG_CMPLN_VER
		WHEN NOT MATCHED BY TARGET 
    
			THEN INSERT
			(REG_CMPLN_CD, 
			REG_CMPLN_VER,
			REG_CMPLN_NM, 
			REG_CMPLN_DESC, 
			REG_CMPLN_PUBL_DT, 
			CREAT_DT, 
			CREAT_USER_ID) 
	
			VALUES
	
			(S.REG_CMPLN_CD, 
			S.REG_CMPLN_VER,
			S.REG_CMPLN_NM, 
			S.REG_CMPLN_DESC, 
			S.REG_CMPLN_PUBL_DT, 
			GETDATE(), 
			2)

		WHEN MATCHED 
    
			THEN UPDATE 
			SET T.REG_CMPLN_NM = S.REG_CMPLN_NM, 
			T.REG_CMPLN_DESC = S.REG_CMPLN_DESC, 
			T.REG_CMPLN_PUBL_DT = S.REG_CMPLN_PUBL_DT, 
			T.UPDT_DT = GETDATE(), 
			UPDT_USER_ID = 2

		output $action into @mergeResultsTable; 

			select @ins_row_cnt = [INSERT],
				   @upd_row_cnt = [UPDATE]
			  from (select 'NOOP' MergeAction -- row for null merge into null
					 union all
					select * from @mergeResultsTable) mergeResultsPlusEmptyRow     
			 pivot (count(MergeAction) 
			   for MergeAction in ([INSERT],[UPDATE],[DELETE])) 
				as mergeResultsPivot;

END TRY

BEGIN CATCH

		DECLARE @ErrorNumber INT = ERROR_NUMBER();
		DECLARE @ErrorLine INT = ERROR_LINE();
		DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();

		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);

END CATCH


END
GO
PRINT N'Creating [dbo].[MERGE_SECUR_CTL]...';


GO
/******************************
	** Desc: To load SECUR_CTL table
	** Auth: Prakash Selvaraj
	** Date: 06/28/2016
	**************************
	** Change History
	**************************
	**  Date	        Author                  Description	
	**  06/20/2016     Prakash Selvaraj        Inital Version
	**  07/11/2016     Prakash Selvaraj        Added Try-Catch to capture the errors
	**************************************/

/*

EXEC MERGE_SECUR_CTL ? OUTPUT , ? OUTPUT

*/




CREATE PROCEDURE [dbo].[MERGE_SECUR_CTL]
  @ins_row_cnt int output,
  @upd_row_cnt int output
AS
BEGIN


declare  @mergeResultsTable table (MergeAction VARCHAR(20));

BEGIN TRY
	SET NOCOUNT ON

		MERGE DBO.SECUR_CTL AS T
		USING 
		(
		SELECT
		  STG.REG_CMPLN_CD, 
		  STG.REG_CMPLN_VER,
		  STG.SECUR_CTL_CD,
		  STG.SECUR_CTL_FAM_CD,
		  STG.SECUR_CTL_FAM_NM,
		  STG.SECUR_CTL_FAM_DESC,
		  STG.SECUR_OBJ_CD,
		  STG.SECUR_OBJ_NM,
		  STG.SECUR_OBJ_DESC,
		  STG.SECUR_CTL_NM,
		  STG.SECUR_CTL_DESC,
		  STG.CTL_TYP_NM,
		  STG.TPC_TXT,
		  STG.SECUR_CTL_IMPL,
		  STG.RQR_FOR_CERT_IND
		 FROM 
		 STG.SECUR_CTL_STG STG
		 JOIN dbo.REG_CMPLN REG
		 ON STG.REG_CMPLN_CD = REG.REG_CMPLN_CD
		 AND STG.REG_CMPLN_VER = REG.REG_CMPLN_VER
		  )
		   AS S
		ON S.REG_CMPLN_CD = T.REG_CMPLN_CD
		 AND S.REG_CMPLN_VER = T.REG_CMPLN_VER
		 AND S.SECUR_CTL_CD = T.SECUR_CTL_CD
		WHEN NOT MATCHED BY TARGET 
			THEN 
		 INSERT
		  (
		  REG_CMPLN_CD, 
		  REG_CMPLN_VER,
		  SECUR_CTL_CD,
		  SECUR_CTL_FAM_CD,
		  SECUR_CTL_FAM_NM,
		  SECUR_CTL_FAM_DESC,
		  SECUR_OBJ_CD,
		  SECUR_OBJ_NM,
		  SECUR_OBJ_DESC,
		  SECUR_CTL_NM,
		  SECUR_CTL_DESC,
		  CTL_TYP_NM,
		  TPC_TXT,
		  SECUR_CTL_IMPL,
		  RQR_FOR_CERT_IND,
		  CREAT_DT,
		  CREAT_USER_ID
		  ) 
		 VALUES
		  (
		  S.REG_CMPLN_CD, 
		  S.REG_CMPLN_VER,
		  S.SECUR_CTL_CD,
		  S.SECUR_CTL_FAM_CD,
		  S.SECUR_CTL_FAM_NM,
		  S.SECUR_CTL_FAM_DESC,
		  S.SECUR_OBJ_CD,
		  S.SECUR_OBJ_NM,
		  S.SECUR_OBJ_DESC,
		  S.SECUR_CTL_NM,
		  S.SECUR_CTL_DESC,
		  S.CTL_TYP_NM,
		  S.TPC_TXT, 
		  S.SECUR_CTL_IMPL,
		  S.RQR_FOR_CERT_IND,
		  GETDATE(),
		  2
		  )
		WHEN MATCHED 
			THEN UPDATE  
		  SET T.SECUR_CTL_FAM_CD = S.SECUR_CTL_FAM_CD, 
		   T.SECUR_CTL_FAM_NM = S.SECUR_CTL_FAM_NM, 
		   T.SECUR_CTL_FAM_DESC = S.SECUR_CTL_FAM_DESC,
		   T.SECUR_OBJ_CD = S.SECUR_OBJ_CD,
		   T.SECUR_OBJ_NM = S.SECUR_OBJ_NM,
		   T.SECUR_OBJ_DESC = S.SECUR_OBJ_DESC,
		   T.SECUR_CTL_NM = S.SECUR_CTL_NM,
		   T.SECUR_CTL_DESC = S.SECUR_CTL_DESC,
		   T.CTL_TYP_NM = S.CTL_TYP_NM,
		   T.TPC_TXT = S.TPC_TXT,
		   T.SECUR_CTL_IMPL = S.SECUR_CTL_IMPL,
		   T.RQR_FOR_CERT_IND = S.RQR_FOR_CERT_IND,
		   T.UPDT_DT = GETDATE(),
		   T.UPDT_USER_ID = 2


		output $action into @mergeResultsTable; 


		SELECT  
			@ins_row_cnt = [INSERT],
			@upd_row_cnt = [UPDATE]
		FROM 
			(
			SELECT 'NOOP' MergeAction -- row for null merge into null
			UNION ALL
			SELECT * FROM @mergeResultsTable
			) mergeResultsPlusEmptyRow     

			pivot ( count(MergeAction) for MergeAction in ([INSERT],[UPDATE],[DELETE])
				  ) as mergeResultsPivot;

END TRY


BEGIN CATCH

		
		DECLARE @ErrorNumber INT = ERROR_NUMBER();
		DECLARE @ErrorLine INT = ERROR_LINE();
		DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();

		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);

END CATCH


END
GO
PRINT N'Creating [dbo].[MERGE_SECUR_CTL_MAP]...';


GO

/*************************************
	** Desc: To load SECUR_CTL_MAP table
	** Auth: Prakash Selvaraj
	** Date: 06/28/2016
	**************************
	** Change History
	**************************
	**  Date	        Author                  Description	
	**  06/28/2016     Prakash Selvaraj        InitIal Version
	**  07/11/2016     Prakash Selvaraj        Added Try-Catch to capture the errors
**************************************/

/*

EXEC MERGE_SECUR_CTL_MAP ? OUTPUT , ? OUTPUT

*/




CREATE PROCEDURE [dbo].[MERGE_SECUR_CTL_MAP]
  @ins_row_cnt int output,
  @upd_row_cnt int output
AS

BEGIN

declare  @mergeResultsTable table (MergeAction VARCHAR(20));


BEGIN TRY

	SET NOCOUNT ON


		MERGE DBO.SECUR_CTL_MAP AS T

		USING 
		(
				SELECT
					PRI_REG_CMPLN_CD,
					PRI_REG_CMPLN_VER,
					PRI_SECUR_CTL_CD,
					SEC_REG_CMPLN_CD,
					SEC_REG_CMPLN_VER,
					SEC_SECUR_CTL_CD
				FROM
				STG.SECUR_CTL_MAP_STG stg
				JOIN dbo.secur_ctl pri
					on 		stg.PRI_REG_CMPLN_CD = pri.REG_CMPLN_CD
						and stg.PRI_REG_CMPLN_VER = pri.REG_CMPLN_VER
						and stg.PRI_SECUR_CTL_CD = pri.SECUR_CTL_CD
				join dbo.secur_ctl sec
					on  	stg.SEC_REG_CMPLN_CD = sec.REG_CMPLN_CD
						and stg.SEC_REG_CMPLN_VER = sec.REG_CMPLN_VER
						and stg.SEC_SECUR_CTL_CD = sec.SECUR_CTL_CD
		)

		AS S

		ON  S.PRI_REG_CMPLN_CD  = T.PRI_REG_CMPLN_CD
		 AND S.PRI_REG_CMPLN_VER = T.PRI_REG_CMPLN_VER
		 AND S.PRI_SECUR_CTL_CD  = T.PRI_SECUR_CTL_CD
		 AND S.SEC_REG_CMPLN_CD  = T.SEC_REG_CMPLN_CD
		 AND S.SEC_REG_CMPLN_VER = T.SEC_REG_CMPLN_VER
		 AND S.SEC_SECUR_CTL_CD  = T.SEC_SECUR_CTL_CD

		WHEN NOT MATCHED BY TARGET 

			THEN INSERT 

					( PRI_REG_CMPLN_CD, 
					  PRI_REG_CMPLN_VER,
					  PRI_SECUR_CTL_CD, 
					  SEC_REG_CMPLN_CD, 
					  SEC_REG_CMPLN_VER,
					  SEC_SECUR_CTL_CD, 
					  CREAT_DT, 
					  CREAT_USER_ID
					) 
				  VALUES
					( S.PRI_REG_CMPLN_CD, 
					  S.PRI_REG_CMPLN_VER,
					  S.PRI_SECUR_CTL_CD, 
					  S.SEC_REG_CMPLN_CD, 
					  S.SEC_REG_CMPLN_VER,
					  S.SEC_SECUR_CTL_CD, 
					  GETDATE(),
					  2
					)
		WHEN MATCHED 
    
			THEN UPDATE 
		  
				  SET T.UPDT_DT = GETDATE(), 
				  UPDT_USER_ID = 2

		output $action into @mergeResultsTable; 


		SELECT  
			@ins_row_cnt = [INSERT],
			@upd_row_cnt = [UPDATE]
		FROM 
			(
			SELECT 'NOOP' MergeAction -- row for null merge into null
			UNION ALL
			SELECT * FROM @mergeResultsTable
			) mergeResultsPlusEmptyRow     

			pivot ( count(MergeAction) for MergeAction in ([INSERT],[UPDATE],[DELETE])
				  ) as mergeResultsPivot;

END TRY


BEGIN CATCH

		
		DECLARE @ErrorNumber INT = ERROR_NUMBER();
		DECLARE @ErrorLine INT = ERROR_LINE();
		DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();

		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);

END CATCH

END
GO
PRINT N'Creating [dbo].[MERGE_VULN_CATGY_MAP]...';


GO


/*
CREATE TYPE VULN_NMs AS TABLE (VULN_NM NVARCHAR(255));

DECLARE @VULN_NM AS VULN_NMs

INSERT @VULN_NM(VULN_NM)
SELECT DISTINCT VULN_NM FROM [ABC5].[CLNT_VULN_INSTC]
UNION ALL
SELECT DISTINCT VULN_NM FROM [BAY4].[CLNT_VULN_INSTC]
UNION ALL
SELECT DISTINCT VULN_NM FROM MAX2.[CLNT_VULN_INSTC]

SELECT * FROM @VULN_NM

EXEC [dbo].[MERGE_VULN_CATGY_MAP] @VULN_NM, 0, 0
*/


CREATE PROCEDURE [dbo].[MERGE_VULN_CATGY_MAP]
	@VULN_NM AS VULN_NMs READONLY,
	@SRC_COUNTS  INT OUTPUT,
	@INSERT_COUNTS INT OUTPUT
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE
		@ROWS INT = 0
		,@TARGETROWS INT = 0			
		,@MESSAGE NVARCHAR(4000)
		,@DEBUG INT = 0
		,@COUNT INT = 1;
	DECLARE @SummaryOfChanges table (Change VARCHAR(20));

	
	IF OBJECT_ID('tempdb..#VULN_CATGY_MAP') IS NOT NULL
	DROP TABLE #VULN_CATGY_MAP;

	CREATE TABLE #VULN_CATGY_MAP(
		[VULN_NM] [varchar](150) NULL,
		[VULN_CATGY_CD] [varchar](10) NULL
	)

	
	/*MAPPING TABLE BASED ON BUSINESS RULES*/	 
	INSERT #VULN_CATGY_MAP
	SELECT DISTINCT LTRIM(RTRIM(VULN_NM)) AS [VULN_NM], NULL AS [VULN_CATGY_CD]
	FROM @VULN_NM
	
	SELECT @SRC_COUNTS = COUNT(*) FROM #VULN_CATGY_MAP
	PRINT N'Message: TOTAL ' + CAST(@SRC_COUNTS AS VARCHAR) + N' RECORDS FROM SOURCE.'

	-- SET XACT_ABORT ON will cause the transaction to be uncommittable when the constraint violation occurs. 
	SET XACT_ABORT ON;

	BEGIN TRY
	
		BEGIN TRANSACTION VULN_MAP WITH MARK N'OS NAME INSERT DATA'

		;WITH _target AS 
		(

			SELECT [VULN_NM]
			  ,[VULN_CATGY_CD]
			  ,[CREAT_DT]
			  ,[CREAT_USER_ID]
			FROM [dbo].[VULN]
		)
		, _source AS 
		(
			SELECT [VULN_NM], [VULN_CATGY_CD]
			FROM #VULN_CATGY_MAP
		)

		MERGE INTO _target
		USING _source ON (
			_target.VULN_NM=_source.VULN_NM
			--AND _target.VULN_CATGY_CD=_source.VULN_CATGY_CD
			)
		WHEN NOT MATCHED THEN INSERT (
			[VULN_NM]
			,[VULN_CATGY_CD]
			,[CREAT_DT]
			,[CREAT_USER_ID]
		)			
		VALUES (
			_source.[VULN_NM]
			,_source.[VULN_CATGY_CD]
			,GETDATE() 
			,'2' 
		)

		OUTPUT $ACTION INTO @SummaryOfChanges
		OPTION(RECOMPILE);

		SELECT @INSERT_COUNTS = @@ROWCOUNT
		PRINT N'Message: Total ' + CAST(@INSERT_COUNTS AS VARCHAR) + N' VULN INSERTED.'	

		IF (XACT_STATE()) = 1
		BEGIN
			PRINT N'The transaction is committable. Committing transaction.'
			COMMIT TRANSACTION VULN_MAP;
		END;

	END TRY

        
	BEGIN CATCH

		IF (XACT_STATE()) = -1
		BEGIN
			PRINT N'The transaction is in an uncommittable state. Rolling back transaction.'
			ROLLBACK TRANSACTION VULN_MAP
		END;
			
		DECLARE @ErrorNumber INT = ERROR_NUMBER();
		DECLARE @ErrorLine INT = ERROR_LINE();
		DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();

		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH

END
GO
PRINT N'Creating [dbo].[Report_AppFindingDetail]...';


GO
CREATE PROCEDURE [dbo].[Report_AppFindingDetail]
(
	@Flag				 VARCHAR(2),-- 'AL' all,'AP' Application , 'SS' SSID
	@CLNT_ENGMT_CD		 VARCHAR(100),
	@SECUR_SRVC_CD		 VARCHAR(100),
	@VULN_SEV_CD		 VARCHAR(50),
	@SECUR_OBJ_CD		 VARCHAR(500),
	@APPNETCD			 VARCHAR(500),
	@SchemaName			 VARCHAR(50)
)
AS
BEGIN
	
BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(MAX)

IF @Flag = 'AL'
BEGIN
SET @Query='
 SELECT    A.*
 FROM	  '+ @SchemaName+ '.Findings								  A
 WHERE    A.CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD+'''
 AND	  A.VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
 AND	  A.VULN_SEV_CD				NOT IN(''I'')
 --AND	  A.ROW_STS_KEY				  = 1
 AND	  1= CASE WHEN '''+@SECUR_SRVC_CD+''' = '''' THEN 1	WHEN A.SECUR_SRVC_CD IN (SELECT Items FROM Dbo.FnSplit('''+@SECUR_SRVC_CD+''','','')) THEN 1 END
 AND	  1= CASE WHEN '''+@VULN_SEV_CD+''' = ''''   THEN 1	WHEN A.VULN_SEV_CD IN (SELECT Items FROM Dbo.FnSplit('''+@VULN_SEV_CD+''','',''))		THEN 1 END
 AND	  1= CASE WHEN '''+@SECUR_OBJ_CD+''' = ''''  THEN 1	WHEN LTRIM(RTRIM(A.SECUR_OBJ_CD)) IN (SELECT Items FROM Dbo.FnSplit(LTRIM(RTRIM('''+@SECUR_OBJ_CD+''')),'',''))	THEN 1 END'
 EXECUTE(@Query)
 END

 IF @Flag = 'AP'
BEGIN
SET @Query='
SELECT    A.*
FROM	  '+ @SchemaName+ '.Findings								  A
JOIN	  dbo.FnSplit('''+@APPNETCD +''','','')	  E
 ON		  A.SFTW_NM					= E.items
 WHERE    A.CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD+'''
 AND	  A.VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
 AND	  A.VULN_SEV_CD				NOT IN(''I'')
 --AND	  A.ROW_STS_KEY				  = 1
 AND	  1= CASE WHEN '''+@SECUR_SRVC_CD+''' = '''' THEN 1	WHEN A.SECUR_SRVC_CD IN (SELECT Items FROM Dbo.FnSplit('''+@SECUR_SRVC_CD+''','','')) THEN 1 END
 AND	  1= CASE WHEN '''+@VULN_SEV_CD+''' = ''''   THEN 1	WHEN A.VULN_SEV_CD IN (SELECT Items FROM Dbo.FnSplit('''+@VULN_SEV_CD+''','',''))		THEN 1 END
 AND	  1= CASE WHEN '''+@SECUR_OBJ_CD+''' = ''''  THEN 1	WHEN LTRIM(RTRIM(A.SECUR_OBJ_CD)) IN (SELECT Items FROM Dbo.FnSplit(LTRIM(RTRIM('''+@SECUR_OBJ_CD+''')),'',''))	THEN 1 END'
 EXECUTE(@Query)
 END

 IF @Flag = 'SS'
BEGIN

SET @Query='
 SELECT    A.*
 FROM	  '+ @SchemaName+ '.Findings								  A
 JOIN	  dbo.FnSplit('''+@APPNETCD +''','','')	  E
 ON		 A.NETBIOS_NM				= E.items
 WHERE    A.CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD+'''
 AND	  A.VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
 AND	  A.VULN_SEV_CD				NOT IN(''I'')
 --AND	  A.ROW_STS_KEY				  = 1
 AND	  1= CASE WHEN '''+@SECUR_SRVC_CD+''' = '''' THEN 1	WHEN A.SECUR_SRVC_CD IN (SELECT Items FROM Dbo.FnSplit('''+@SECUR_SRVC_CD+''','','')) THEN 1 END
 AND	  1= CASE WHEN '''+@VULN_SEV_CD+''' = ''''   THEN 1	WHEN A.VULN_SEV_CD IN (SELECT Items FROM Dbo.FnSplit('''+@VULN_SEV_CD+''','',''))		THEN 1 END
 AND	  1= CASE WHEN '''+@SECUR_OBJ_CD+''' = ''''  THEN 1	WHEN LTRIM(RTRIM(A.SECUR_OBJ_CD)) IN (SELECT Items FROM Dbo.FnSplit(LTRIM(RTRIM('''+@SECUR_OBJ_CD+''')),'',''))	THEN 1 END'
 EXECUTE(@Query)
 END
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_FindingAssessments]...';


GO
CREATE PROCEDURE [dbo].[Report_FindingAssessments]
(

	@CLNT_ENGMT_CD	VARCHAR(100),
	@SECUR_SRVC_CD	VARCHAR(100),
	@SchemaName		VARCHAR(50)
	
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(MAX)

SET @Query='
	SELECT   COUNT(A.CLNT_VULN_INSTC_KEY) ''Total'',
			 COUNT(CASE WHEN A.VULN_SEV_CD=''C'' THEN A.CLNT_VULN_INSTC_KEY ELSE NULL END)''Critical'',
			 COUNT(CASE WHEN A.VULN_SEV_CD=''H'' THEN A.CLNT_VULN_INSTC_KEY ELSE NULL END)''High'',
			 COUNT(CASE WHEN A.VULN_SEV_CD=''M'' THEN A.CLNT_VULN_INSTC_KEY ELSE NULL END)''Medium'',
			 COUNT(CASE WHEN A.VULN_SEV_CD=''L'' THEN A.CLNT_VULN_INSTC_KEY ELSE NULL END)''Low''
    FROM     '+ @SchemaName+ '.CLNT_VULN_INSTC		A
	JOIN	 SECUR_SRVC	B
	ON		 A.SECUR_SRVC_CD = B.SECUR_SRVC_CD
	WHERE    A.CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD+'''
	AND		 VULN_INSTC_STS_CD  NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD		NOT IN(''I'')
	AND		 A.SECUR_SRVC_CD = CASE WHEN '''+@SECUR_SRVC_CD+''' = '''' THEN A.SECUR_SRVC_CD ELSE '''+@SECUR_SRVC_CD+''' END
	AND		 A.ROW_STS_KEY	= 1'
	EXECUTE (@Query)
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_FindingDetails]...';


GO
CREATE PROCEDURE  [dbo].[Report_FindingDetails]
(
	@CLNT_ENGMT_CD		 VARCHAR(100),
	@SECUR_SRVC_CD		 VARCHAR(100),
	@VULN_SEV_CD		 VARCHAR(50),
	@VULN_CATGY_CD		 VARCHAR(500),
	@SchemaName			 VARCHAR(50)
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(MAX)

SET @Query='
 SELECT	  CLNT_VULN_INSTC_KEY ID,CLNT_ENGMT_CD,SECUR_SRVC_CD,VULN_SEV_NM,VULN_NM,VULN_DESC,RECOM_COMMT_TXT,
		  VULN_TECH_COMMT_TXT,HITRUST,FedRAMP,NIST,CSACCM,FISMA,MARSE,SOC2,PCIDSS,HIPAA,ISO,IRS,VULN_CATGY_NM,
		  VULN_CATGY_CD 
 FROM	  '+ @SchemaName+ '.Findings
 WHERE    CLNT_ENGMT_CD						= '''+@CLNT_ENGMT_CD+'''
 AND	  VULN_INSTC_STS_CD					NOT IN(''D'',''FP'')
 AND	  VULN_SEV_CD						NOT IN(''I'')
 AND	  1= CASE WHEN '''+@SECUR_SRVC_CD+'''		= '''' THEN 1	WHEN SECUR_SRVC_CD IN (SELECT Items FROM Dbo.FnSplit('''+@SECUR_SRVC_CD+''','','')) THEN 1 END
 AND	  1= CASE WHEN '''+@VULN_SEV_CD+'''			= ''''   THEN 1	WHEN VULN_SEV_CD IN (SELECT Items FROM Dbo.FnSplit('''+@VULN_SEV_CD+''','',''))		THEN 1 END
 AND	  1= CASE WHEN '''+@VULN_CATGY_CD+'''  = ''''  THEN 1	WHEN LTRIM(RTRIM(VULN_CATGY_CD)) IN (SELECT Items FROM Dbo.FnSplit(LTRIM(RTRIM('''+@VULN_CATGY_CD+''')),'',''))	THEN 1 END
 AND	  VULN_INSTC_STS_CD  NOT IN(''D'',''FP'')
 AND	  VULN_SEV_CD		NOT IN(''I'')
'
-- PRINT (@Query)
EXECUTE(@Query)
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_FindingDetailsByID]...';


GO
CREATE PROCEDURE  [dbo].[Report_FindingDetailsByID]
(
	
	@CLNT_ENGMT_CD		 VARCHAR(100),
	@CLNT_VULN_INSTC_KEY VARCHAR(1000),
	@Flag				 VARCHAR(2), --  Summary 'S',Matrix 'M'
	@SchemaName			 VARCHAR(50)
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(MAX)


IF @Flag = 'S' 
BEGIN
SET @Query='
SELECT    DISTINCT A.*
FROM	  '+ @SchemaName+ '.Findings								  A
--JOIN	  dbo.FnSplit('+@CLNT_VULN_INSTC_KEY + ','','')	  E
--ON		  A.CLNT_VULN_INSTC_KEY					= E.items
WHERE	      A.VULN_INSTC_STS_CD					NOT IN(''D'',''FP'')
AND			A.VULN_SEV_CD							NOT IN(''I'')
AND			A.CLNT_ENGMT_CD							= '''+@CLNT_ENGMT_CD + '''
AND			A.VULN_CATGY_CD							= '+ @CLNT_VULN_INSTC_KEY 
EXECUTE(@Query)
END

IF @Flag = 'M' 
BEGIN
SET @Query='
SELECT    *
FROM	  '+ @SchemaName+ '.Findings								 
WHERE	  CLNT_ENGMT_CD							=  '''+@CLNT_ENGMT_CD+'''
AND		  VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
AND		  VULN_SEV_CD			NOT IN(''I'')
AND		  VULN_IMP_CD			IN(''C'',''MJ'',''I'',''MI'',''IF'',''MO'') 
AND		  RMDTN_CST_EFFRT_CD IN(''H'',''M'',''L'')
AND		  1= CASE WHEN '''+@CLNT_VULN_INSTC_KEY+''' = ''''  THEN 1	WHEN LTRIM(RTRIM(CLNT_VULN_INSTC_KEY)) IN (SELECT Items FROM Dbo.FnSplit(LTRIM(RTRIM('''+@CLNT_VULN_INSTC_KEY +''')),'',''))	THEN 1 END
'
EXECUTE(@Query)
END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_FindingsCount]...';


GO
CREATE PROCEDURE [dbo].[Report_FindingsCount]
(
	
	@CLNT_ENGMT_CD	VARCHAR(100),
	@SECUR_SRVC_CD	VARCHAR(100),
	@SchemaName		VARCHAR(50)
	
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(MAX)

SET @Query='
 SELECT   CLNT_ENGMT_CD,A.SECUR_SRVC_CD,B.SECUR_SRVC_NM,
		  COUNT(CLNT_VULN_INSTC_KEY) ''Total'',
		  COUNT(CASE WHEN VULN_SEV_CD=''C'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Critical'',
		  COUNT(CASE WHEN VULN_SEV_CD=''H'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''High'',
		  COUNT(CASE WHEN VULN_SEV_CD=''M'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Medium'',
		  COUNT(CASE WHEN VULN_SEV_CD=''L'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Low''
 FROM	  '+ @SchemaName+ '.CLNT_VULN_INSTC A
 JOIN	  SECUR_SRVC	B
 ON		  A.SECUR_SRVC_CD = B.SECUR_SRVC_CD
 WHERE    CLNT_ENGMT_CD = '''+@CLNT_ENGMT_CD+'''
 AND	  A.SECUR_SRVC_CD = CASE WHEN '''+@SECUR_SRVC_CD+''' = '''' THEN A.SECUR_SRVC_CD ELSE '''+@SECUR_SRVC_CD+''' END
 AND	  VULN_INSTC_STS_CD NOT IN(''D'',''FP'')
 AND	  VULN_SEV_CD		NOT IN(''I'')
 AND	  A.ROW_STS_KEY	= 1
 GROUP BY CLNT_ENGMT_CD,A.SECUR_SRVC_CD,B.SECUR_SRVC_NM'
-- PRINT(@Query)
 EXECUTE(@Query)

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_GetFindingsCSV]...';


GO
CREATE PROCEDURE [dbo].[Report_GetFindingsCSV]
(
	@CLNT_ENGMT_CD		 VARCHAR(100),
	@SECUR_SRVC_CD		 VARCHAR(500),
	@VULN_SEV_CD		 VARCHAR(500),
	@SECUR_OBJ_CD		 VARCHAR(500),
	@Flag				 VARCHAR(2),
	@APPNETCD			 VARCHAR(500),
	@SchemaName                VARCHAR(50)
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(MAX)

IF @Flag = 'AL'
BEGIN
SET @Query='
SELECT     *
FROM     '+ @SchemaName+ '.Findings 
			WHERE	CLNT_ENGMT_CD			    =   '''+@CLNT_ENGMT_CD+'''
			AND     1= CASE WHEN '''+@SECUR_SRVC_CD + ''' = '''' THEN 1	WHEN SECUR_SRVC_CD IN (SELECT Items FROM Dbo.FnSplit('''+@SECUR_SRVC_CD + ''','','')) THEN 1 END
			AND		1= CASE WHEN '''+@VULN_SEV_CD + '''	= '''' THEN 1	WHEN VULN_SEV_CD IN (SELECT Items FROM Dbo.FnSplit('''+@VULN_SEV_CD + ''','',''))		THEN 1 END
			AND	    1= CASE WHEN '''+@SECUR_OBJ_CD + '''  = '''' THEN 1	WHEN LTRIM(RTRIM(SECUR_OBJ_CD)) IN (SELECT Items FROM Dbo.FnSplit(LTRIM(RTRIM('''+@SECUR_OBJ_CD + ''')),'',''))	THEN 1 END'
EXECUTE(@Query)
END

IF @Flag = 'AP'
BEGIN
SET @Query='
			SELECT  DISTINCT * 
			FROM	'+ @SchemaName+ '.Findings 			  A
			JOIN	dbo.FnSplit('''+@APPNETCD+''','','')  L
			ON		A.SFTW_NM				=	L.items
			WHERE	CLNT_ENGMT_CD			    =   '''+@CLNT_ENGMT_CD+'''
			AND     1= CASE WHEN '''+@SECUR_SRVC_CD + ''' = '''' THEN 1	WHEN SECUR_SRVC_CD IN (SELECT Items FROM Dbo.FnSplit('''+@SECUR_SRVC_CD + ''','','')) THEN 1 END
			AND		1= CASE WHEN '''+@VULN_SEV_CD + '''	= '''' THEN 1	WHEN VULN_SEV_CD IN (SELECT Items FROM Dbo.FnSplit('''+@VULN_SEV_CD + ''','',''))		THEN 1 END
			AND	    1= CASE WHEN '''+@SECUR_OBJ_CD + '''  = '''' THEN 1	WHEN LTRIM(RTRIM(SECUR_OBJ_CD)) IN (SELECT Items FROM Dbo.FnSplit(LTRIM(RTRIM('''+@SECUR_OBJ_CD + ''')),'',''))	THEN 1 END'
EXECUTE(@Query)

END

IF @Flag = 'SS'
BEGIN
SET @Query='
			SELECT  DISTINCT * 
			FROM	'+ @SchemaName+ '.Findings 			  A
			JOIN	dbo.FnSplit('''+@APPNETCD+''','','')  L
			ON		A.NETBIOS_NM			=	L.items
			WHERE	CLNT_ENGMT_CD			    =   '''+@CLNT_ENGMT_CD+'''
			AND     1= CASE WHEN '''+@SECUR_SRVC_CD + ''' = '''' THEN 1	WHEN SECUR_SRVC_CD IN (SELECT Items FROM Dbo.FnSplit('''+@SECUR_SRVC_CD + ''','','')) THEN 1 END
			AND		1= CASE WHEN '''+@VULN_SEV_CD + '''	= '''' THEN 1	WHEN VULN_SEV_CD IN (SELECT Items FROM Dbo.FnSplit('''+@VULN_SEV_CD + ''','',''))		THEN 1 END
			AND	    1= CASE WHEN '''+@SECUR_OBJ_CD + '''  = '''' THEN 1	WHEN LTRIM(RTRIM(SECUR_OBJ_CD)) IN (SELECT Items FROM Dbo.FnSplit(LTRIM(RTRIM('''+@SECUR_OBJ_CD + ''')),'',''))	THEN 1 END'
EXECUTE(@Query)

END
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_GetHitrustInfoByCD]...';


GO

CREATE PROCEDURE [dbo].Report_GetHitrustInfoByCD
(
       @SECUR_CTL_CD    VARCHAR(500)
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
              
              SELECT	  DISTINCT A.SECUR_CTL_CD,A.SECUR_CTL_NM,A.SECUR_CTL_FAM_CD,A.SECUR_CTL_FAM_NM,A.SECUR_OBJ_CD,
						  A.SECUR_OBJ_NM,A.SECUR_CTL_DESC
              FROM		  SECUR_CTL							A
              CROSS APPLY FnSplit(@SECUR_CTL_CD,',')		B
              WHERE		  A.SECUR_CTL_CD			    =	B.items
 


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_GetRemediationFindingListByEngmtcd]...';


GO
CREATE PROCEDURE [dbo].[Report_GetRemediationFindingListByEngmtcd]
(
       
	   @CLNT_ENGMT_CD		 VARCHAR(30)
	   			

)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON

		SELECT	A.CLNT_VULN_INSTC_KEY,A.CLNT_ENGMT_CD,A.VULN_NM,A.SECUR_SRVC_CD,B.SECUR_SRVC_NM,A.VULN_SRC_KEY,
				C.LKP_ENTY_NM,A.VULN_SEV_CD,D.VULN_SEV_NM,E.VULN_INSTC_STS_NM,A.UPDT_DT,A.CREAT_DT
		FROM	CLNT_VULN_INSTC			A
		JOIN	SECUR_SRVC				B
		ON		B.SECUR_SRVC_CD		=   A.SECUR_SRVC_CD
		JOIN	MSTR_LKP				C
		ON		A.VULN_SRC_KEY		=   C.MSTR_LKP_KEY
		JOIN	VULN_INSTC_STS			E
		ON		E.VULN_INSTC_STS_CD	=   A.VULN_INSTC_STS_CD
		LEFT JOIN	VULN_SEV				D
		ON		D.VULN_SEV_CD		=   A.VULN_SEV_CD	

		
		WHERE	A.CLNT_ENGMT_CD		=	@CLNT_ENGMT_CD
		AND		A.VULN_INSTC_STS_CD IN ('C','V')
		AND		A.ROW_STS_KEY		= 1
		ORDER BY CASE WHEN ISNULL(A.UPDT_DT,'') ='' THEN A.CREAT_DT ELSE A.UPDT_DT END DESC
	   

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_GetRemediationPMWorkList]...';


GO
CREATE PROCEDURE [dbo].[Report_GetRemediationPMWorkList]
(
       
       @ORG_KEY                   INTEGER,
       @OrgName                   VARCHAR(150),
       @CLNT_ENGMT_CD             VARCHAR(30),  
       @CLNT_ENGMT_NM             VARCHAR(150)  

)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON

              SELECT A.CLNT_ENGMT_CD,A.CLNT_ORG_KEY,B.ORG_NM,A.SECUR_PKG_CD,A.CLNT_ENGMT_NM,A.UPDT_DT,A.CREAT_DT 
              FROM   CLNT_ENGMT           A
              JOIN   ORG                  B
              ON     B.ORG_KEY     =      A.CLNT_ORG_KEY
              WHERE  A.ROW_STS_KEY =      1
              AND    A.CLNT_ORG_KEY = CASE WHEN @ORG_KEY= 0 THEN A.CLNT_ORG_KEY ELSE @ORG_KEY   END
              AND    ISNULL(B.ORG_NM,'') LIKE CASE WHEN @OrgName = '' THEN  ISNULL(B.ORG_NM,'') ELSE '%' + @OrgName + '%' END
			  AND    ISNULL(A.CLNT_ENGMT_CD,'') LIKE CASE WHEN @CLNT_ENGMT_CD = '' THEN   A.CLNT_ENGMT_CD ELSE '%' + @CLNT_ENGMT_CD +'%' END 
			  AND    ISNULL(A.CLNT_ENGMT_NM,'') LIKE CASE WHEN @CLNT_ENGMT_NM = '' THEN   A.CLNT_ENGMT_NM ELSE '%' + @CLNT_ENGMT_NM + '%'   END   
			  ORDER BY CASE WHEN ISNULL(A.UPDT_DT,'') ='' THEN A.CREAT_DT ELSE A.UPDT_DT END DESC

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_GetReportWorkList]...';


GO
CREATE PROCEDURE  [dbo].[Report_GetReportWorkList]
(

       @PiUserID                  INTEGER

)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON

       SELECT		 [Client NAME],CLNT_ORG_KEY, CLNT_ENGMT_CD,CLNT_ENGMT_NM,
                     RPT_NM,RPT_FL_UPLOAD_LOG_KEY,FL_NM,UPDT_DT,RPT_STS_KEY,LKP_ENTY_NM,
					 CREAT_DT 
					 FROM(
       SELECT        DISTINCT  H.ORG_NM [Client NAME],B.CLNT_ORG_KEY, A.CLNT_ENGMT_CD,B.CLNT_ENGMT_NM,
                     K.RPT_NM,J.RPT_FL_UPLOAD_LOG_KEY,J.FL_NM,J.UPDT_DT,J.RPT_STS_KEY,I.LKP_ENTY_NM,
					 J.CREAT_DT
       FROM          CLNT_SECUR_SRVC_ENGMT							 A
       JOIN          CLNT_ENGMT                                      B
       ON            A.CLNT_ENGMT_CD                          =      B.CLNT_ENGMT_CD
       JOIN          USER_CLNT_SRVC_ASGN							 G
       ON            B.CLNT_ENGMT_CD                          =      G.CLNT_ENGMT_CD
       JOIN          ORG                                                    H
       ON            H.ORG_KEY                                =      B.CLNT_ORG_KEY 
       LEFT JOIN     RPT_FL_UPLOAD_LOG								 J
       ON            A.CLNT_ENGMT_CD                          =      J.CLNT_ENGMT_CD
       LEFT JOIN     RPT_NM                                          K
       ON            J.RPT_NM_KEY							  =		 K.RPT_NM_KEY
       LEFT JOIN     MSTR_LKP                                        I
       ON            I.MSTR_LKP_KEY                           =		 J.RPT_STS_KEY
	 --  AND			 I.LKP_ENTY_NM							  <>     'Scan Failure'
       WHERE         G.USER_ID                                =		 @PiUserID 
	   AND			 B.ROW_STS_KEY							  =		 1
       
	   UNION

       SELECT        DISTINCT H.ORG_NM [Client NAME],B.CLNT_ORG_KEY, A.CLNT_ENGMT_CD,B.CLNT_ENGMT_NM,
                     K.RPT_NM,J.RPT_FL_UPLOAD_LOG_KEY,J.FL_NM,J.UPDT_DT,J.RPT_STS_KEY,I.LKP_ENTY_NM,
					 J.CREAT_DT
       FROM          CLNT_SECUR_SRVC_ENGMT							 A
       JOIN          CLNT_ENGMT                                      B
       ON            A.CLNT_ENGMT_CD                          =      B.CLNT_ENGMT_CD
       JOIN          CLNT_ENGMT_USER_ASGN							 G
       ON            B.CLNT_ENGMT_CD                          =      G.CLNT_ENGMT_CD
       JOIN          ORG                                                    H
       ON            H.ORG_KEY                                =      B.CLNT_ORG_KEY 
       LEFT JOIN     RPT_FL_UPLOAD_LOG								 J
       ON            A.CLNT_ENGMT_CD                          =      J.CLNT_ENGMT_CD
       LEFT JOIN     RPT_NM                                          K
       ON            J.RPT_NM_KEY							  =		 K.RPT_NM_KEY
       LEFT JOIN     MSTR_LKP                                        I
       ON            I.MSTR_LKP_KEY                           =		 J.RPT_STS_KEY
	--   AND			 I.LKP_ENTY_NM							  <>     'Scan Failure'
       WHERE         G.USER_ID                                =		 @PiUserID 
	   AND			 B.ROW_STS_KEY							  =		 1
	   
		)Z
	--	WHERE ISNULL(Z.RPT_STS_KEY,'') <> 70 
	   ORDER BY		 CASE WHEN ISNULL(UPDT_DT,'') ='' THEN CREAT_DT ELSE UPDT_DT END DESC
	    
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_GetReportWorkListSearch]...';


GO
CREATE PROCEDURE [dbo].[Report_GetReportWorkListSearch]
(
       @PiUserID                  INTEGER,
       @OrgName                   VARCHAR(150),
       @CLNT_ENGMT_CD             VARCHAR(30),  
       @CLNT_ENGMT_NM             VARCHAR(150),
       @RPT_NM                    VARCHAR(150),
       @FL_NM                     VARCHAR(150),
       @UPDT_DT                   VARCHAR(50),
       @Status                    VARCHAR(50)   

)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON


        SELECT         [Client NAME],CLNT_ORG_KEY, CLNT_ENGMT_CD,CLNT_ENGMT_NM,
                     RPT_NM,RPT_FL_UPLOAD_LOG_KEY,FL_NM,UPDT_DT,RPT_STS_KEY,LKP_ENTY_NM,
                                  CREAT_DT 
                                    FROM(
                                  SELECT       DISTINCT  H.ORG_NM [Client NAME],B.CLNT_ORG_KEY, A.CLNT_ENGMT_CD,B.CLNT_ENGMT_NM,
                     K.RPT_NM,J.RPT_FL_UPLOAD_LOG_KEY,J.FL_NM,CONVERT(VARCHAR(20),J.UPDT_DT,101) UPDT_DT,J.RPT_STS_KEY,I.LKP_ENTY_NM,
                                  CONVERT(VARCHAR(20),J.CREAT_DT,101) CREAT_DT
       FROM          CLNT_SECUR_SRVC_ENGMT                                               A
       JOIN          CLNT_ENGMT                                      B
       ON            A.CLNT_ENGMT_CD                          =      B.CLNT_ENGMT_CD
       JOIN          USER_CLNT_SRVC_ASGN                                          G
       ON            B.CLNT_ENGMT_CD                          =      G.CLNT_ENGMT_CD
       JOIN          ORG                                             H
       ON            H.ORG_KEY                                =      B.CLNT_ORG_KEY 
       LEFT JOIN     RPT_FL_UPLOAD_LOG                                                   J
       ON            A.CLNT_ENGMT_CD                          =      J.CLNT_ENGMT_CD
      
       LEFT JOIN     RPT_NM                                          K
       ON            J.RPT_NM_KEY                      =   K.RPT_NM_KEY
      
       LEFT JOIN     MSTR_LKP                                        I
       ON            I.MSTR_LKP_KEY                           =   J.RPT_STS_KEY
         
       --   AND               I.LKP_ENTY_NM                                                  <>     'Scan Failure'        
       WHERE         G.USER_ID                                =   @PiUserID 
       AND           ISNULL(H.ORG_NM,'')           LIKE CASE WHEN @OrgName = '' THEN       ISNULL(H.ORG_NM,'') ELSE '%' + @OrgName + '%' END
       AND           ISNULL(A.CLNT_ENGMT_CD,'') LIKE CASE WHEN @CLNT_ENGMT_CD = '' THEN       A.CLNT_ENGMT_CD ELSE '%' + @CLNT_ENGMT_CD +'%' END     
       AND           ISNULL(B.CLNT_ENGMT_NM,'') LIKE CASE WHEN @CLNT_ENGMT_NM = '' THEN       B.CLNT_ENGMT_NM ELSE '%' + @CLNT_ENGMT_NM + '%'   END  
           AND           ISNULL(K.RPT_NM,'')           LIKE CASE WHEN @RPT_NM = '' THEN       ISNULL(K.RPT_NM,'') ELSE '%' + @RPT_NM + '%' END
              AND           ISNULL(CONVERT(VARCHAR(20),J.UPDT_DT,101),'') = CASE WHEN @UPDT_DT  = '' THEN ISNULL(CONVERT(VARCHAR(20),J.UPDT_DT,101),'')  ELSE @UPDT_DT END
       AND           ISNULL(J.FL_NM,'')            LIKE CASE WHEN @FL_NM = '' THEN       ISNULL(J.FL_NM,'') ELSE '%' + @FL_NM + '%' END
          AND           ISNULL(I.LKP_ENTY_NM ,'')   =     CASE WHEN @Status = '' THEN ISNULL(I.LKP_ENTY_NM ,'')  ELSE @Status  END
       AND                 B.ROW_STS_KEY                                                  =           1
          UNION

       SELECT        DISTINCT H.ORG_NM [Client NAME],B.CLNT_ORG_KEY, A.CLNT_ENGMT_CD,B.CLNT_ENGMT_NM,
                     K.RPT_NM,J.RPT_FL_UPLOAD_LOG_KEY,J.FL_NM,CONVERT(VARCHAR(20),J.UPDT_DT,101) UPDT_DT,J.RPT_STS_KEY,I.LKP_ENTY_NM,
                                  CONVERT(VARCHAR(20),J.CREAT_DT,101) CREAT_DT
       FROM          CLNT_SECUR_SRVC_ENGMT                                               A
       JOIN          CLNT_ENGMT                                      B
       ON            A.CLNT_ENGMT_CD                          =      B.CLNT_ENGMT_CD
       JOIN          CLNT_ENGMT_USER_ASGN                                                G
       ON            B.CLNT_ENGMT_CD                          =      G.CLNT_ENGMT_CD
       JOIN          ORG                                             H
       ON            H.ORG_KEY                                =      B.CLNT_ORG_KEY 
       LEFT JOIN     RPT_FL_UPLOAD_LOG                                                   J
       ON            A.CLNT_ENGMT_CD                          =      J.CLNT_ENGMT_CD
       
       LEFT JOIN     RPT_NM                                                                            K
       ON            J.RPT_NM_KEY                                          =            K.RPT_NM_KEY
       
       LEFT JOIN     MSTR_LKP                                                                          I
       ON            I.MSTR_LKP_KEY                           =            J.RPT_STS_KEY
   
       --   AND               I.LKP_ENTY_NM                                                  <>     'Scan Failure'       
       WHERE         G.USER_ID                                =   @PiUserID 
       AND           ISNULL(H.ORG_NM,'')           LIKE CASE WHEN @OrgName = '' THEN       ISNULL(H.ORG_NM,'') ELSE '%' + @OrgName + '%' END
       AND           ISNULL(A.CLNT_ENGMT_CD,'') LIKE CASE WHEN @CLNT_ENGMT_CD = '' THEN       A.CLNT_ENGMT_CD ELSE '%' + @CLNT_ENGMT_CD +'%' END     
       AND           ISNULL(B.CLNT_ENGMT_NM,'') LIKE CASE WHEN @CLNT_ENGMT_NM = '' THEN       B.CLNT_ENGMT_NM ELSE '%' + @CLNT_ENGMT_NM + '%'   END  
          AND           ISNULL(K.RPT_NM,'')           LIKE CASE WHEN @RPT_NM = '' THEN       ISNULL(K.RPT_NM,'') ELSE '%' + @RPT_NM + '%' END
          AND           ISNULL(CONVERT(VARCHAR(20),J.UPDT_DT,101),'') = CASE WHEN @UPDT_DT  = '' THEN ISNULL(CONVERT(VARCHAR(20),J.UPDT_DT,101),'')  ELSE @UPDT_DT END
       AND           ISNULL(J.FL_NM,'')            LIKE CASE WHEN @FL_NM = '' THEN       ISNULL(J.FL_NM,'') ELSE '%' + @FL_NM + '%' END
           AND           ISNULL(I.LKP_ENTY_NM ,'')   =     CASE WHEN @Status = '' THEN ISNULL(I.LKP_ENTY_NM ,'')  ELSE @Status  END
          AND               B.ROW_STS_KEY                                                  =           1) Z      
       --  WHERE             ISNULL(Z.RPT_STS_KEY,'')       <> 70
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_GetVulnerabilityCSV]...';


GO
CREATE PROCEDURE [dbo].[Report_GetVulnerabilityCSV]
(
	@CLNT_ENGMT_CD		 VARCHAR(100),
	@SECUR_SRVC_CD		 VARCHAR(500),
	@VULN_SEV_CD		 VARCHAR(500),
	@VULN_CATGY_CD		 VARCHAR(500),
	@SchemaName			 VARCHAR(50)
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(max)

SET @Query = '
			SELECT  DISTINCT * 
			FROM	'+ @SchemaName+ '.Findings
			WHERE	CLNT_ENGMT_CD			    =   '''+@CLNT_ENGMT_CD+'''  
			AND     1= CASE WHEN '''+@SECUR_SRVC_CD+''' = '''' THEN 1	WHEN SECUR_SRVC_CD IN (SELECT Items FROM Dbo.FnSplit('''+@SECUR_SRVC_CD+''','','')) THEN 1 END
			AND		1= CASE WHEN '''+@VULN_SEV_CD+''' = ''''   THEN 1	WHEN VULN_SEV_CD IN (SELECT Items FROM Dbo.FnSplit('''+@VULN_SEV_CD+''','',''))		THEN 1 END
			AND		1= CASE WHEN '''+@VULN_CATGY_CD+'''  = ''''  THEN 1	WHEN LTRIM(RTRIM(VULN_CATGY_CD)) IN (SELECT Items FROM Dbo.FnSplit(LTRIM(RTRIM('''+@VULN_CATGY_CD+''')),'',''))	THEN 1 END
			AND		ISNULL(VULN_SEV_CD,'''') <> '''' '
--  PRINT  (@query1)
 EXECUTE (@Query)
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_InstanceByIssues]...';


GO
CREATE PROCEDURE [dbo].[Report_InstanceByIssues]
(

	@CLNT_ENGMT_CD	VARCHAR(100),
	@SECUR_SRVC_CD	VARCHAR(100),
	@VULN_SEV_CD	VARCHAR(50)	
	
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON

 DECLARE @LiCOUNT INTEGER
	 
 SELECT   A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,B.VULN_SEV_NM,A.VULN_NM
 FROM	  CLNT_VULN_INSTC			  A
 JOIN	  VULN_SEV					  B
 ON		  A.VULN_SEV_CD				= B.VULN_SEV_CD
 WHERE    A.CLNT_ENGMT_CD			= @CLNT_ENGMT_CD
 AND	  A.SECUR_SRVC_CD			= @SECUR_SRVC_CD
 AND	  A.VULN_SEV_CD				= CASE WHEN @VULN_SEV_CD = '' THEN A.VULN_SEV_CD ELSE @VULN_SEV_CD END
 AND	  A.VULN_INSTC_STS_CD		NOT IN('D','FP')
 AND	  A.VULN_SEV_CD				NOT IN('I')
 GROUP BY A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,B.VULN_SEV_NM,A.VULN_NM


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_ListEngmts]...';


GO
CREATE PROCEDURE [dbo].[Report_ListEngmts]
(
       @PvcFlag             VARCHAR(1), -- 'R' Remediation,'U' for User specific data
       @CLNT_ORG_KEY INTEGER,
       @UserTypeID          INTEGER,
       @UserID                    INTEGER       
       
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON

              IF @PvcFlag ='U'
              BEGIN
              SELECT        A.CLNT_ENGMT_CD,A.CLNT_ENGMT_NM,A.SECUR_PKG_CD,B.SECUR_PKG_NM,D.ORG_SCHM
              FROM			CLNT_ENGMT              A
              JOIN			SECUR_PKG               B
              ON            A.SECUR_PKG_CD       =  B.SECUR_PKG_CD
              JOIN			CLNT_ENGMT_USER_ASGN    C
              ON            A.CLNT_ENGMT_CD      =  C.CLNT_ENGMT_CD
			  JOIN			ORG						D
			  ON			A.CLNT_ORG_KEY		 =	D.ORG_KEY
              WHERE			CLNT_ORG_KEY		 = CASE WHEN @UserTypeID = 17 THEN @CLNT_ORG_KEY ELSE CLNT_ORG_KEY END
              AND           A.ENGMT_STS_KEY		 = CASE WHEN @UserTypeID = 17 THEN 68 ELSE A.ENGMT_STS_KEY END
              AND           A.CLNT_ORG_KEY <> 1
              AND           A.ROW_STS_KEY		 = 1
              AND           C.USER_ID            =      @UserID
              
              UNION

              SELECT        A.CLNT_ENGMT_CD,A.CLNT_ENGMT_NM,A.SECUR_PKG_CD,B.SECUR_PKG_NM,D.ORG_SCHM
              FROM			CLNT_ENGMT             A
              JOIN			SECUR_PKG              B
              ON            A.SECUR_PKG_CD       = B.SECUR_PKG_CD
              JOIN			USER_CLNT_SRVC_ASGN	   C
              ON            A.CLNT_ENGMT_CD      = C.CLNT_ENGMT_CD
			  JOIN			ORG					   D
			  ON			A.CLNT_ORG_KEY		 = D.ORG_KEY
              WHERE  CLNT_ORG_KEY  = CASE WHEN @UserTypeID = 17 THEN @CLNT_ORG_KEY ELSE CLNT_ORG_KEY END
              AND           A.ENGMT_STS_KEY = CASE WHEN @UserTypeID = 17 THEN 68 ELSE A.ENGMT_STS_KEY END
              AND           A.CLNT_ORG_KEY <> 1
              AND           A.ROW_STS_KEY = 1
              AND           C.USER_ID            =      @UserID
              END
          
           IF @PvcFlag ='R'
              BEGIN
              SELECT        A.CLNT_ENGMT_CD,A.CLNT_ENGMT_NM,A.SECUR_PKG_CD,B.SECUR_PKG_NM,D.ORG_SCHM
              FROM			CLNT_ENGMT             A
              JOIN			SECUR_PKG              B
              ON            A.SECUR_PKG_CD       = B.SECUR_PKG_CD
			  JOIN			ORG						D
			  ON			A.CLNT_ORG_KEY		 =	D.ORG_KEY
              WHERE			A.CLNT_ORG_KEY <> 1
              AND           A.ROW_STS_KEY = 1
              END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_ListObjective]...';


GO

CREATE PROCEDURE [dbo].[Report_ListObjective]
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
					   SELECT DISTINCT LTRIM(SECUR_OBJ_CD) SECUR_OBJ_CD,SECUR_OBJ_CD + '-' + SECUR_OBJ_NM ObjectiveName
                       FROM SECUR_CTL
                       WHERE REG_CMPLN_CD = 'HITRUST'
                       ORDER BY LTRIM(SECUR_OBJ_CD) ASC
                     
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_ListReportFileUpload]...';


GO

CREATE PROCEDURE  [dbo].[Report_ListReportFileUpload]
(
       @CLNT_ENGMT_CD             VARCHAR(30)   
)

AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
              SELECT A.RPT_FL_UPLOAD_LOG_KEY,B.RPT_NM,A.CREAT_DT UpdatedOn,C.FST_NM +' '+ C.LST_NM UpdatedBy,D.LKP_ENTY_NM,
					 A.RPT_STS_KEY,A.UPDT_USER_ID,A.FL_NM,A.FL_FLDR_PTH,A.FL_SZ
              FROM   RPT_FL_UPLOAD_LOG		A
			  JOIN	 RPT_NM				    B
			  ON	 A.RPT_NM_KEY		=	B.RPT_NM_KEY
			  JOIN	 USER_PRFL				C
			  ON	 C.USER_ID			=	A.CREAT_USER_ID
			  JOIN	 MSTR_LKP				D
			  ON	 A.RPT_STS_KEY	    =	D.MSTR_LKP_KEY
              WHERE  A.CLNT_ENGMT_CD    =	@CLNT_ENGMT_CD
			  AND	 D.LKP_ENTY_NM		<> 'Scan Failure'
			  ORDER BY CASE WHEN ISNULL(A.UPDT_DT,'') ='' THEN A.CREAT_DT ELSE A.UPDT_DT END DESC
                     
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_ListReportNames]...';


GO

CREATE PROCEDURE [dbo].[Report_ListReportNames]
(
       @CLNT_ENGMT_CD             VARCHAR(30)   
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
              SELECT  RPT_NM_KEY,RPT_NM
              FROM   RPT_NM        
              WHERE  RPT_NM                            =   'Executive Summary'    
              UNION
              SELECT  A.RPT_NM_KEY,A.RPT_NM
              FROM   RPT_NM                                   A
              JOIN   CLNT_SECUR_SRVC_ENGMT             B
              ON            A.SECUR_SRVC_CD                   =   B.SECUR_SRVC_CD
              WHERE   B.CLNT_ENGMT_CD                  =   @CLNT_ENGMT_CD

                     
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_ListReportUploadlogByCode]...';


GO
CREATE PROCEDURE  [dbo].[Report_ListReportUploadlogByCode]
(
	   @RPT_FL_UPLOAD_LOG_KEY     INTEGER  
)

AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
              SELECT A.RPT_FL_UPLOAD_LOG_KEY,B.RPT_NM,A.CREAT_DT UpdatedOn,D.LKP_ENTY_NM,
					 A.RPT_STS_KEY,A.UPDT_USER_ID,A.FL_NM,A.FL_FLDR_PTH,A.FL_SZ
              FROM   RPT_FL_UPLOAD_LOG		A
			  JOIN	 RPT_NM				    B
			  ON	 A.RPT_NM_KEY		=	B.RPT_NM_KEY
			  JOIN	 MSTR_LKP				D
			  ON	 A.RPT_STS_KEY	    =	D.MSTR_LKP_KEY
              WHERE  A.RPT_FL_UPLOAD_LOG_KEY    =	@RPT_FL_UPLOAD_LOG_KEY
			  ORDER BY CASE WHEN ISNULL(A.UPDT_DT,'') ='' THEN A.CREAT_DT ELSE A.UPDT_DT END DESC
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_ListServiceswithFindings]...';


GO
CREATE PROCEDURE [dbo].[Report_ListServiceswithFindings]
(
	@ENGMT_CD VARCHAR(30),
	@SchemaName		VARCHAR(50)
)
AS
BEGIN


BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(MAX)

SET @Query='
			SELECT  DISTINCT B.SECUR_SRVC_CD,SECUR_SRVC_NM,D.LKP_ENTY_NM ReviewStatus
			FROM	CLNT_SECUR_SRVC_ENGMT		A
			JOIN	SECUR_SRVC					B
			ON		A.SECUR_SRVC_CD			=   B.SECUR_SRVC_CD
			JOIN	USER_PRFL					C
			ON		A.CREAT_USER_ID			=   C.USER_ID
			JOIN	MSTR_LKP					D
			ON		A.SRVC_ENGMT_STS_KEY	=	D.MSTR_LKP_KEY
			JOIN	'+ @SchemaName+ '.CLNT_VULN_INSTC				E
			ON		A.SECUR_SRVC_CD			=	E.SECUR_SRVC_CD
			AND		A.CLNT_ENGMT_CD			=   E.CLNT_ENGMT_CD
			WHERE	A.CLNT_ENGMT_CD			=	'''+@ENGMT_CD+'''
			AND		A.ROW_STS_KEY			=   1
			AND		E.VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
			AND		E.VULN_SEV_CD			NOT IN(''I'')
			AND		E.ROW_STS_KEY			=   1'
			 -- PRINT (@query)
  EXECUTE(@Query)
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[REPORT_MatrixFindings]...';


GO

CREATE PROCEDURE [dbo].[REPORT_MatrixFindings]
(
       @CLNT_ENGMT_CD             VARCHAR(30),
	   @schema					  VARCHAR(50)  
  
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON

DECLARE @Query VARCHAR(max)

	SET		 @Query ='
    SELECT   DISTINCT A.CLNT_VULN_INSTC_KEY ID,A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,A.VULN_NM, ISNULL(CONVERT(VARCHAR(MAX),A.VULN_DESC),'''')VULN_DESC,
		     ISNULL(CONVERT(VARCHAR(MAX), A.RECOM_COMMT_TXT),'''')RECOM,F.VULN_SEV_NM
    FROM     '+@schema+'.CLNT_VULN_INSTC		  A
	JOIN	 VULN_IMP				  B
	ON		 A.VULN_IMP_CD			= B.VULN_IMP_CD
	JOIN	 RMDTN_CST_EFFRT		  C
	ON		 A.RMDTN_CST_EFFRT_CD	= C.RMDTN_CST_EFFRT_CD
	JOIN	  VULN_SEV				  F
	ON		  A.VULN_SEV_CD		    = F.VULN_SEV_CD
	LEFT JOIN '+@schema+'.CLNT_VULN_SECUR_CTL	  D
	ON		 A.CLNT_VULN_INSTC_KEY	= D.CLNT_VULN_INSTC_KEY
	LEFT JOIN SECUR_CTL				  E
	ON		 D.REG_CMPLN_CD			= E.REG_CMPLN_CD
	AND		 D.SECUR_CTL_CD			= E.SECUR_CTL_CD
	AND		 D.REG_CMPLN_VER		= E.REG_CMPLN_VER
	AND		 E.REG_CMPLN_CD			= ''HITRUST''
	WHERE    CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD+'''
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 A.VULN_SEV_CD			NOT IN(''I'')
	AND		 B.VULN_IMP_CD			IN(''C'',''MJ'',''I'',''MI'',''IF'',''MO'') 
	AND		 C.RMDTN_CST_EFFRT_CD IN(''H'',''M'',''L'')
	AND		 A.ROW_STS_KEY		  = 1'
	EXECUTE (@Query)



END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[REPORT_PRIORITYMATRIX]...';


GO
CREATE PROCEDURE [dbo].[REPORT_PRIORITYMATRIX]
(
       @CLNT_ENGMT_CD             VARCHAR(30),  
       @SECUR_SRVC_CD             VARCHAR(150),
	   @schema					  VARCHAR(50)  
  
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(max)

	SET		 @Query ='
    SELECT   DISTINCT CLNT_ENGMT_CD,CLNT_VULN_INSTC_KEY,SECUR_OBJ_CD,SECUR_CTL_CD,SECUR_CTL_NM,Quadrant
	FROM (
    SELECT   A.CLNT_ENGMT_CD,A.CLNT_VULN_INSTC_KEY,E.SECUR_OBJ_CD,E.SECUR_CTL_CD,E.SECUR_CTL_NM,''Quadrant1'' Quadrant
    FROM     '+ @schema+'.CLNT_VULN_INSTC		  A
	JOIN	 VULN_IMP				  B
	ON		 A.VULN_IMP_CD			= B.VULN_IMP_CD
	JOIN	 RMDTN_CST_EFFRT		  C
	ON		 A.RMDTN_CST_EFFRT_CD	= C.RMDTN_CST_EFFRT_CD
	LEFT JOIN '+ @schema+'.CLNT_VULN_SECUR_CTL	  D
	ON		 A.CLNT_VULN_INSTC_KEY	= D.CLNT_VULN_INSTC_KEY
	AND		 D.ROW_STS_KEY			= 1
	LEFT JOIN SECUR_CTL				  E
	ON		 D.REG_CMPLN_CD			= E.REG_CMPLN_CD
	AND		 D.SECUR_CTL_CD			= E.SECUR_CTL_CD
	AND		 D.REG_CMPLN_VER		= E.REG_CMPLN_VER
	AND		 E.REG_CMPLN_CD			= ''HITRUST''
	WHERE    CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD+'''
--	AND		 SECUR_SRVC_CD			= CASE WHEN '''+@SECUR_SRVC_CD+'''='''' THEN SECUR_SRVC_CD ELSE '''+@SECUR_SRVC_CD+''' END
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
	AND		 B.VULN_IMP_CD			IN(''C'',''MJ'') 
	AND		 C.RMDTN_CST_EFFRT_CD = ''L''
	AND		 A.ROW_STS_KEY		  = 1
--	GROUP BY A.CLNT_ENGMT_CD,E.SECUR_OBJ_CD,E.SECUR_CTL_CD,E.SECUR_CTL_NM
	UNION
	SELECT   A.CLNT_ENGMT_CD,A.CLNT_VULN_INSTC_KEY, E.SECUR_OBJ_CD,E.SECUR_CTL_CD,E.SECUR_CTL_NM,''Quadrant2'' Quadrant
    FROM     '+ @schema+'.CLNT_VULN_INSTC		  A
	JOIN	 VULN_IMP				  B
	ON		 A.VULN_IMP_CD			= B.VULN_IMP_CD
	JOIN	 RMDTN_CST_EFFRT		  C
	ON		 A.RMDTN_CST_EFFRT_CD	= C.RMDTN_CST_EFFRT_CD
	LEFT JOIN '+ @schema+'.CLNT_VULN_SECUR_CTL	  D
	ON		 A.CLNT_VULN_INSTC_KEY	= D.CLNT_VULN_INSTC_KEY
	AND		 D.ROW_STS_KEY			= 1
	LEFT JOIN SECUR_CTL				  E
	ON		 D.REG_CMPLN_CD			= E.REG_CMPLN_CD
	AND		 D.SECUR_CTL_CD			= E.SECUR_CTL_CD
	AND		 D.REG_CMPLN_VER		= E.REG_CMPLN_VER
	AND		 E.REG_CMPLN_CD			= ''HITRUST''
	WHERE    CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD+'''
--	AND		 SECUR_SRVC_CD			= CASE WHEN '''+@SECUR_SRVC_CD+'''='''' THEN SECUR_SRVC_CD ELSE '''+@SECUR_SRVC_CD+''' END
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
	AND		 B.VULN_IMP_CD			IN(''C'',''MJ'') 
	AND		 C.RMDTN_CST_EFFRT_CD IN(''H'',''M'')
	AND		 A.ROW_STS_KEY		  = 1
--	GROUP BY A.CLNT_ENGMT_CD,E.SECUR_OBJ_CD,E.SECUR_CTL_CD,E.SECUR_CTL_NM
	UNION
	SELECT   A.CLNT_ENGMT_CD,A.CLNT_VULN_INSTC_KEY,E.SECUR_OBJ_CD,E.SECUR_CTL_CD,E.SECUR_CTL_NM,''Quadrant3'' Quadrant
    FROM     '+ @schema+'.CLNT_VULN_INSTC		  A
	JOIN	 VULN_IMP				  B
	ON		 A.VULN_IMP_CD			= B.VULN_IMP_CD
	JOIN	 RMDTN_CST_EFFRT		  C
	ON		 A.RMDTN_CST_EFFRT_CD	= C.RMDTN_CST_EFFRT_CD
	LEFT JOIN '+ @schema+'.CLNT_VULN_SECUR_CTL	  D
	ON		 A.CLNT_VULN_INSTC_KEY	= D.CLNT_VULN_INSTC_KEY
	AND		 D.ROW_STS_KEY			= 1
	LEFT JOIN SECUR_CTL				  E
	ON		 D.REG_CMPLN_CD			= E.REG_CMPLN_CD
	AND		 D.SECUR_CTL_CD			= E.SECUR_CTL_CD
	AND		 D.REG_CMPLN_VER		= E.REG_CMPLN_VER
	AND		 E.REG_CMPLN_CD			= ''HITRUST''
	WHERE    CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD+'''
--	AND		 SECUR_SRVC_CD			= CASE WHEN '''+@SECUR_SRVC_CD+'''='''' THEN SECUR_SRVC_CD ELSE '''+@SECUR_SRVC_CD+''' END
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
	AND		 B.VULN_IMP_CD			IN(''I'',''MI'',''IF'',''MO'') 
	AND		 C.RMDTN_CST_EFFRT_CD	= ''L''
	AND		 A.ROW_STS_KEY		  = 1
--	GROUP BY A.CLNT_ENGMT_CD,E.SECUR_OBJ_CD,E.SECUR_CTL_CD,E.SECUR_CTL_NM
	UNION
	SELECT   A.CLNT_ENGMT_CD,A.CLNT_VULN_INSTC_KEY,E.SECUR_OBJ_CD,E.SECUR_CTL_CD,E.SECUR_CTL_NM,''Quadrant4'' Quadrant
    FROM     '+ @schema+'.CLNT_VULN_INSTC		  A
	JOIN	 VULN_IMP				  B
	ON		 A.VULN_IMP_CD			= B.VULN_IMP_CD
	JOIN	 RMDTN_CST_EFFRT		  C
	ON		 A.RMDTN_CST_EFFRT_CD	= C.RMDTN_CST_EFFRT_CD
	LEFT JOIN '+ @schema+'.CLNT_VULN_SECUR_CTL	  D
	ON		 A.CLNT_VULN_INSTC_KEY	= D.CLNT_VULN_INSTC_KEY
	AND		 D.ROW_STS_KEY			= 1
	LEFT JOIN SECUR_CTL				  E
	ON		 D.REG_CMPLN_CD			= E.REG_CMPLN_CD
	AND		 D.SECUR_CTL_CD			= E.SECUR_CTL_CD
	AND		 D.REG_CMPLN_VER		= E.REG_CMPLN_VER
	AND		 E.REG_CMPLN_CD			= ''HITRUST''
	WHERE    CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD+'''
--	AND		 SECUR_SRVC_CD			= CASE WHEN '''+@SECUR_SRVC_CD+ '='''' THEN SECUR_SRVC_CD ELSE '''+@SECUR_SRVC_CD+''' END
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
	AND		 B.VULN_IMP_CD IN(''I'',''MI'',''IF'',''MO'') 
	AND		 C.RMDTN_CST_EFFRT_CD IN(''H'',''M'')
	AND		 A.ROW_STS_KEY		  = 1
--	GROUP BY A.CLNT_ENGMT_CD,E.SECUR_OBJ_CD,E.SECUR_CTL_CD,E.SECUR_CTL_NM
)Z
	ORDER BY Quadrant '
EXECUTE (@Query)
--PRINT @Query

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_ProbabilityImapct]...';


GO
CREATE PROCEDURE [dbo].[Report_ProbabilityImapct]
(

	@CLNT_ENGMT_CD			VARCHAR(100),
	@SECUR_SRVC_CD			VARCHAR(200),
	@VULN_SEV_CD			VARCHAR(200),
	@VULN_CATGY_CD			VARCHAR(500),
	@schema					VARCHAR(50)  
		
	
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
DECLARE @Query  VARCHAR(max)
DECLARE @Query1 VARCHAR(max)
DECLARE @Query2 VARCHAR(max)
DECLARE @Query3 VARCHAR(max)

-- BEGIN TRANSACTION
		IF OBJECT_ID('dbo.#1', 'U') IS NOT NULL 
		 DROP TABLE dbo.#1; 
		 IF OBJECT_ID('dbo.#2', 'U') IS NOT NULL 
		 DROP TABLE dbo.#2; 
		 IF OBJECT_ID('dbo.#3', 'U') IS NOT NULL 
		 DROP TABLE dbo.#3; 
SET @Query='
IF OBJECT_ID(''dbo.#1'', ''U'') IS NOT NULL 
  DROP TABLE dbo.#1; 

SELECT	A.VULN_CATGY_CD,A.CLNT_ENGMT_CD,COUNT(DISTINCT A.CLNT_VULN_INSTC_KEY)FindingCount,
SUM(VULN_IMP_SUB_SCOR)/COUNT(DISTINCT A.CLNT_VULN_INSTC_KEY)ImpactAvg,B.VULN_CATGY_NM,
SUM(VULN_EXPLT_SUB_SCOR)/COUNT(DISTINCT A.CLNT_VULN_INSTC_KEY)RiskAvg INTO dbo.#1
FROM		'+ @schema+'.CLNT_VULN_INSTC		  A
JOIN		VULN_CATGY		  B
ON			A.VULN_CATGY_CD	= B.VULN_CATGY_CD
WHERE		A.CLNT_ENGMT_CD			=	'''+@CLNT_ENGMT_CD +'''
AND			A.ROW_STS_KEY			=   1
AND			1= CASE WHEN '''+ @SECUR_SRVC_CD +''' = '''' THEN 1	WHEN A.SECUR_SRVC_CD IN (SELECT Items FROM Dbo.FnSplit('''+ @SECUR_SRVC_CD+''','','')) THEN 1 END
AND			1= CASE WHEN '''+@VULN_SEV_CD+''' = ''''   THEN 1	WHEN A.VULN_SEV_CD IN (SELECT Items FROM Dbo.FnSplit('''+@VULN_SEV_CD+''','',''))		THEN 1 END
 AND		1= CASE WHEN '''+@VULN_CATGY_CD+'''  = ''''  THEN 1	WHEN LTRIM(RTRIM(A.VULN_CATGY_CD)) IN (SELECT Items FROM Dbo.FnSplit(LTRIM(RTRIM('''+@VULN_CATGY_CD+''')),'',''))	THEN 1 END
AND			A.RISK_PRBL_CD			IN	(''A'',''L'',''P'',''U'',''R'')
AND			A.VULN_IMP_CD			IN	(''MI'',''I'',''MO'',''C'',''MJ'',''IF'')
AND			A.VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
AND			A.VULN_SEV_CD			NOT IN(''I'')
AND			ISNULL(A.VULN_IMP_SUB_SCOR,0)<> 0
AND			ISNULL(VULN_EXPLT_SUB_SCOR,0)<>0
GROUP BY	A.VULN_CATGY_CD,A.CLNT_ENGMT_CD,B.VULN_CATGY_NM
--PRINT (@Query)



--SET @Query1=
IF OBJECT_ID(''dbo.#2'', ''U'') IS NOT NULL 
  DROP TABLE dbo.#2; 

SELECT		VULN_CATGY_CD,SUM(Impactsqrt)ImpactSum,SUM(RiskSqrt)RiskSum,VULN_CATGY_NM INTO dbo.#2 FROM(
SELECT		A.VULN_CATGY_CD ,B.VULN_CATGY_NM,
			(CONVERT(NUMERIC,ISNULL(B.ImpactAvg,0)) -CONVERT(NUMERIC,ISNULL(VULN_IMP_SUB_SCOR,0)))*
			(CONVERT(NUMERIC,ISNULL(B.ImpactAvg,0)) -CONVERT(NUMERIC,ISNULL(VULN_IMP_SUB_SCOR,0)))Impactsqrt,
			(ISNULL(B.RiskAvg,0)-ISNULL(VULN_EXPLT_SUB_SCOR,0))*(ISNULL(B.RiskAvg,0)-ISNULL(VULN_EXPLT_SUB_SCOR,0))RiskSqrt 
FROM		'+ @schema+'.CLNT_VULN_INSTC A
JOIN		dbo.#1			 B
ON			A.VULN_CATGY_CD = B.VULN_CATGY_CD
WHERE		A.CLNT_ENGMT_CD			=	'''+@CLNT_ENGMT_CD +'''
AND			A.ROW_STS_KEY			=   1
AND			1= CASE WHEN '''+ @SECUR_SRVC_CD +''' = '''' THEN 1	WHEN A.SECUR_SRVC_CD IN (SELECT Items FROM Dbo.FnSplit('''+ @SECUR_SRVC_CD+''','','')) THEN 1 END
AND			1= CASE WHEN '''+@VULN_SEV_CD+''' = ''''   THEN 1	WHEN A.VULN_SEV_CD IN (SELECT Items FROM Dbo.FnSplit('''+@VULN_SEV_CD+''','',''))		THEN 1 END
 AND		1= CASE WHEN '''+@VULN_CATGY_CD+'''  = ''''  THEN 1	WHEN LTRIM(RTRIM(A.VULN_CATGY_CD)) IN (SELECT Items FROM Dbo.FnSplit(LTRIM(RTRIM('''+@VULN_CATGY_CD+''')),'',''))	THEN 1 END
AND			A.RISK_PRBL_CD			IN	(''A'',''L'',''P'',''U'',''R'')
AND			A.VULN_IMP_CD			IN	(''MI'',''I'',''MO'',''C'',''MJ'',''IF'')
AND			A.VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
AND			A.VULN_SEV_CD			NOT IN(''I'')
AND			ISNULL(A.VULN_IMP_SUB_SCOR,0)<> 0
AND			ISNULL(VULN_EXPLT_SUB_SCOR,0)<>0
)Z
GROUP BY VULN_CATGY_CD,VULN_CATGY_NM

--EXECUTE(@Query1)
-- PRINT (@Query1)

IF OBJECT_ID(''dbo.#3'', ''U'') IS NOT NULL 
		 DROP TABLE dbo.#3; 

SELECT		A.VULN_CATGY_CD,A.CLNT_ENGMT_CD,
			MAX(VULN_IMP_SUB_SCOR)ImpactMax,
			MAX(VULN_EXPLT_SUB_SCOR)RiskMax INTO dbo.#3
FROM		'+ @schema+'.CLNT_VULN_INSTC			  A
JOIN		VULN_CATGY				  B
ON			A.VULN_CATGY_CD			= B.VULN_CATGY_CD
WHERE		A.CLNT_ENGMT_CD			='''+@CLNT_ENGMT_CD +'''
AND			A.ROW_STS_KEY			= 1
AND			1= CASE WHEN '''+ @SECUR_SRVC_CD +''' = '''' THEN 1	WHEN A.SECUR_SRVC_CD IN (SELECT Items FROM Dbo.FnSplit('''+ @SECUR_SRVC_CD+''','','')) THEN 1 END
AND			1= CASE WHEN '''+@VULN_SEV_CD+''' = ''''   THEN 1	WHEN A.VULN_SEV_CD IN (SELECT Items FROM Dbo.FnSplit('''+@VULN_SEV_CD+''','',''))		THEN 1 END
AND			1= CASE WHEN '''+@VULN_CATGY_CD+'''  = ''''  THEN 1	WHEN LTRIM(RTRIM(A.VULN_CATGY_CD)) IN (SELECT Items FROM Dbo.FnSplit(LTRIM(RTRIM('''+@VULN_CATGY_CD+''')),'',''))	THEN 1 END
AND			A.RISK_PRBL_CD			IN	(''A'',''L'',''P'',''U'',''R'')
AND			A.VULN_IMP_CD			IN	(''MI'',''I'',''MO'',''C'',''MJ'',''IF'')
AND			A.VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
AND			A.VULN_SEV_CD			NOT IN(''I'')
GROUP BY A.VULN_CATGY_CD,A.CLNT_ENGMT_CD
--EXECUTE(@Query2)
--PRINT(@Query2)

--SET @Query3=
SELECT		A.VULN_CATGY_CD,COUNT(A.CLNT_VULN_INSTC_KEY)FindingsCount,B.VULN_CATGY_NM,
			C.ImpactMax -(SQRT(B.ImpactSum/COUNT(DISTINCT A.CLNT_VULN_INSTC_KEY)))Impact,
			(C.RiskMax -(SQRT(B.RiskSum/COUNT(DISTINCT A.CLNT_VULN_INSTC_KEY)))) Risk
FROM		'+ @schema+'.CLNT_VULN_INSTC A
JOIN		#2 B
ON			A.VULN_CATGY_CD	= B.VULN_CATGY_CD
JOIN		#3 C
ON			A.VULN_CATGY_CD	= C.VULN_CATGY_CD
AND			C.VULN_CATGY_CD	= B.VULN_CATGY_CD
WHERE		A.CLNT_ENGMT_CD			='''+@CLNT_ENGMT_CD +'''
AND			A.ROW_STS_KEY			= 1
AND			1= CASE WHEN '''+ @SECUR_SRVC_CD +''' = '''' THEN 1	WHEN A.SECUR_SRVC_CD IN (SELECT Items FROM Dbo.FnSplit('''+ @SECUR_SRVC_CD+''','','')) THEN 1 END
AND			1= CASE WHEN '''+@VULN_SEV_CD+''' = ''''   THEN 1	WHEN A.VULN_SEV_CD IN (SELECT Items FROM Dbo.FnSplit('''+@VULN_SEV_CD+''','',''))		THEN 1 END
AND			1= CASE WHEN '''+@VULN_CATGY_CD+'''  = ''''  THEN 1	WHEN LTRIM(RTRIM(A.VULN_CATGY_CD)) IN (SELECT Items FROM Dbo.FnSplit(LTRIM(RTRIM('''+@VULN_CATGY_CD+''')),'',''))	THEN 1 END
AND			A.RISK_PRBL_CD			IN	(''A'',''L'',''P'',''U'',''R'')
AND			A.VULN_IMP_CD			IN	(''MI'',''I'',''MO'',''C'',''MJ'',''IF'')
AND			A.VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
AND			A.VULN_SEV_CD			NOT IN(''I'')
AND			ISNULL(A.VULN_IMP_SUB_SCOR,0)<> 0
AND			ISNULL(A.VULN_EXPLT_SUB_SCOR,0)<>0
GROUP BY A.VULN_CATGY_CD,B.ImpactSum,B.RiskSum,C.ImpactMax,C.RiskMax,B.VULN_CATGY_NM
ORDER BY A.VULN_CATGY_CD'
EXECUTE(@Query)
--PRINT(@Query)


-- COMMIT TRANSACTION
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_Remediation]...';


GO
CREATE PROCEDURE [dbo].[Report_Remediation]
(
       @CLNT_ENGMT_CD       VARCHAR(100),
       @SECUR_SRVC_CD       VARCHAR(10),
	   @schema				VARCHAR(50)  
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(max)
DECLARE @LiCOUNT INTEGER
	   SET		@Query ='       
       SELECT   CLNT_ENGMT_CD,SECUR_SRVC_CD,COUNT(CLNT_VULN_INSTC_KEY) ''Total'',
                     COUNT(CASE WHEN VULN_SEV_CD=''C'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Critical'',
                     COUNT(CASE WHEN VULN_SEV_CD=''H'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''High'',
                     COUNT(CASE WHEN VULN_SEV_CD=''M'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Medium'',
                     COUNT(CASE WHEN VULN_SEV_CD=''L'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Low'',
                     COUNT(CASE WHEN VULN_SEV_CD=''C'' AND VULN_INSTC_STS_CD=''O'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END) CriticalOpenCount,
                     COUNT(CASE WHEN VULN_SEV_CD=''H'' AND VULN_INSTC_STS_CD=''O'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END) HighOpenCount,
                     COUNT(CASE WHEN VULN_SEV_CD=''M'' AND VULN_INSTC_STS_CD=''O'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END) MediumOpenCount,
                     COUNT(CASE WHEN VULN_SEV_CD=''L'' AND VULN_INSTC_STS_CD=''O'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END) LowOpenCount,
                     dbo.fnGetServiceNameBycode(A.SECUR_SRVC_CD) ServiceName
	   FROM			 '+ @schema+'.CLNT_VULN_INSTC             A
       WHERE		 CLNT_ENGMT_CD                   = '''+@CLNT_ENGMT_CD + '''
       AND           VULN_INSTC_STS_CD  NOT IN(''D'',''FP'')
       AND           VULN_SEV_CD         NOT IN(''I'')
       AND           SECUR_SRVC_CD                    =      CASE WHEN '''+ @SECUR_SRVC_CD +''' = '''' THEN SECUR_SRVC_CD ELSE '''+ @SECUR_SRVC_CD +''' END
       AND           A.ROW_STS_KEY                    =      1
       GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD '
	   EXECUTE (@Query)
       END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_RemediationPriority]...';


GO
CREATE PROCEDURE [dbo].[Report_RemediationPriority]
(

       @CLNT_ENGMT_CD       VARCHAR(100),
       @SECUR_SRVC_CD       VARCHAR(100),
       @Flag                VARCHAR(2),-- AP - Application,SS-SSID,AL- ALL
       @APPNETCD            VARCHAR(500),
	   @schema				VARCHAR(50)    
       
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(max)
DECLARE @Query1 VARCHAR(max)
DECLARE @LiCOUNT VARCHAR(20)
DECLARE @CountResults TABLE (CountReturned INT)


       IF @Flag = 'AL'
       BEGIN     
	   SET		@Query ='
	   SELECT   COUNT(CLNT_VULN_INSTC_KEY) 
	   FROM     '+ @schema+'.CLNT_VULN_INSTC
       WHERE    CLNT_ENGMT_CD             = '''+@CLNT_ENGMT_CD +'''
       AND      SECUR_SRVC_CD             = '''+ @SECUR_SRVC_CD +'''
       AND      VULN_INSTC_STS_CD         NOT IN(''D'',''FP'')
       AND      VULN_SEV_CD               IN(''C'',''H'')
	   AND		ROW_STS_KEY				  = 1'
	   INSERT @CountResults
	   EXECUTE (@Query)
	   SET @LiCOUNT = (SELECT CountReturned FROM @CountResults)

	   SET		@Query1 ='
       SELECT   TOP 20 CLNT_ENGMT_CD,SECUR_SRVC_CD,VULN_NM,COUNT(CLNT_VULN_INSTC_KEY)VULCOUNT,'+@LiCOUNT+' FindingsCount
	   FROM     '+ @schema+'.CLNT_VULN_INSTC
       WHERE    CLNT_ENGMT_CD             = '''+@CLNT_ENGMT_CD +'''
       AND      SECUR_SRVC_CD             = '''+ @SECUR_SRVC_CD +'''
       AND      VULN_INSTC_STS_CD         NOT IN(''D'',''FP'')
       AND      VULN_SEV_CD               IN(''C'',''H'')
	   AND		ROW_STS_KEY				  = 1
	   GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,VULN_NM
       ORDER BY COUNT(VULN_NM) DESC'
	   EXECUTE (@Query1)
       END

       IF @Flag = 'AP'
       BEGIN     

	   SET		@Query ='
	   SELECT   COUNT(CLNT_VULN_INSTC_KEY)
       FROM     '+ @schema+'.CLNT_VULN_INSTC             A
       JOIN     dbo.FnSplit('''+@APPNETCD+''','','')  B
       ON       A.SFTW_NM                 = B.items
       WHERE    CLNT_ENGMT_CD             = '''+@CLNT_ENGMT_CD + '''
       AND      SECUR_SRVC_CD             = '''+ @SECUR_SRVC_CD + '''
       AND      VULN_INSTC_STS_CD         NOT IN(''D'',''FP'')
       AND      VULN_SEV_CD               IN(''C'',''H'')
	   AND		A.ROW_STS_KEY				  = 1'
	   INSERT @CountResults
	   EXECUTE (@Query)
	   SET @LiCOUNT = (SELECT CountReturned FROM @CountResults)


	   SET      @Query1='
       SELECT   TOP 20 CLNT_ENGMT_CD,SECUR_SRVC_CD,VULN_NM,COUNT(CLNT_VULN_INSTC_KEY)VULCOUNT,'+@LiCOUNT+' FindingsCount
       FROM     '+ @schema+'.CLNT_VULN_INSTC                    A
       JOIN     dbo.FnSplit('''+@APPNETCD+''','','')  B
       ON       A.SFTW_NM                 = B.items
       WHERE    CLNT_ENGMT_CD             = '''+@CLNT_ENGMT_CD +'''
       AND      SECUR_SRVC_CD             = '''+ @SECUR_SRVC_CD +'''
       AND      VULN_INSTC_STS_CD         NOT IN(''D'',''FP'')
       AND      VULN_SEV_CD               IN(''C'',''H'')
	   AND		A.ROW_STS_KEY				  = 1
       GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,VULN_NM
       ORDER BY COUNT(VULN_NM) DESC'
	 --  PRINT (@Query1)
	   EXECUTE (@Query1)
       END

       IF @Flag = 'SS'
       BEGIN     
	   SET		@Query ='
	   SELECT   COUNT(CLNT_VULN_INSTC_KEY) 
       FROM     '+ @schema+'.CLNT_VULN_INSTC             A
       JOIN     dbo.FnSplit('''+@APPNETCD+''','','')  B
       ON       A.NETBIOS_NM              = B.items
       WHERE    CLNT_ENGMT_CD             = '''+@CLNT_ENGMT_CD +'''
       AND      SECUR_SRVC_CD             = '''+ @SECUR_SRVC_CD +'''
       AND      VULN_INSTC_STS_CD         NOT IN(''D'',''FP'')
       AND      VULN_SEV_CD               IN(''C'',''H'')
	   AND		A.ROW_STS_KEY				  = 1'
	   INSERT @CountResults
	   EXECUTE (@Query)
	   SET @LiCOUNT = (SELECT CountReturned FROM @CountResults)

	   SET		@Query1 ='
       SELECT   TOP 20 CLNT_ENGMT_CD,SECUR_SRVC_CD,VULN_NM,COUNT(CLNT_VULN_INSTC_KEY)VULCOUNT,'+@LiCOUNT+' FindingsCount
       FROM     '+ @schema+'.CLNT_VULN_INSTC             A
       JOIN     dbo.FnSplit('''+@APPNETCD+''','','')  B
       ON       A.NETBIOS_NM              = B.items
       WHERE    CLNT_ENGMT_CD             = '''+@CLNT_ENGMT_CD +'''
       AND      SECUR_SRVC_CD             = '''+ @SECUR_SRVC_CD +'''
       AND      VULN_INSTC_STS_CD         NOT IN(''D'',''FP'')
       AND      VULN_SEV_CD               IN(''C'',''H'')
	   AND		A.ROW_STS_KEY				  = 1
       GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,VULN_NM
       ORDER BY COUNT(VULN_NM) DESC'
	   EXECUTE (@Query1)
       END

       IF @Flag = 'NW'
       BEGIN     

	   SET		@Query ='
	   SELECT   SUM(VULCOUNT) 
	   FROM(
       SELECT   CLNT_ENGMT_CD,SECUR_SRVC_CD,VULN_NM,COUNT(DISTINCT IPADR)VULCOUNT
       FROM     '+ @schema+'.CLNT_VULN_INSTC
       WHERE    CLNT_ENGMT_CD             = '''+@CLNT_ENGMT_CD +'''
       AND      SECUR_SRVC_CD             = '''+ @SECUR_SRVC_CD +'''
       AND      VULN_INSTC_STS_CD         NOT IN(''D'',''FP'')
       AND      VULN_SEV_CD               IN(''C'',''H'')
	   AND		ROW_STS_KEY				  = 1
	   AND		ISNULL(IPADR,'''')<>''''
       GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,VULN_NM)Z'
	--   Print (@Query)
	   INSERT @CountResults
	   EXECUTE (@Query)
	   SET @LiCOUNT = ISNULL((SELECT CountReturned FROM @CountResults),0)

	   SET		@Query1 ='
       SELECT   TOP 20 CLNT_ENGMT_CD,SECUR_SRVC_CD,VULN_NM,COUNT(DISTINCT IPADR)VULCOUNT,'+@LiCOUNT+' FindingsCount
       FROM     '+ @schema+'.CLNT_VULN_INSTC
       WHERE    CLNT_ENGMT_CD             = '''+@CLNT_ENGMT_CD +'''
       AND      SECUR_SRVC_CD             = '''+ @SECUR_SRVC_CD +'''
       AND      VULN_INSTC_STS_CD         NOT IN(''D'',''FP'')
       AND      VULN_SEV_CD               IN(''C'',''H'')
	   AND		ROW_STS_KEY				  = 1
	   AND		ISNULL(IPADR,'''')<>''''
       GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,VULN_NM
       ORDER BY COUNT(VULN_NM) DESC'
	   EXECUTE (@Query1)
	-- PRINT (@Query1)
       END
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_RemediationVulnerabilities]...';


GO
CREATE PROCEDURE [dbo].[Report_RemediationVulnerabilities]
(

       @CLNT_ENGMT_CD       VARCHAR(100),
       @SECUR_SRVC_CD		VARCHAR(10),
	   @schema				VARCHAR(50)   
       
)
AS
BEGIN
DECLARE @Query VARCHAR(max)
BEGIN TRY
SET NOCOUNT ON

	   SET			 @Query ='	       
	   SELECT		 A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,A.VULN_NM,B.VULN_SEV_CD,B.VULN_SEV_NM,C.VULN_INSTC_STS_NM
	   FROM			 '+ @schema+'.CLNT_VULN_INSTC       A
       JOIN			 VULN_SEV                           B
       ON            A.VULN_SEV_CD                    = B.VULN_SEV_CD
       JOIN			 VULN_INSTC_STS                     C
       ON            C.VULN_INSTC_STS_CD = A.VULN_INSTC_STS_CD
       WHERE		 CLNT_ENGMT_CD                   = '''+@CLNT_ENGMT_CD + '''
--     AND           A.VULN_INSTC_STS_CD       IN(''O'',''C'')
       AND           A.VULN_INSTC_STS_CD NOT IN(''D'',''FP'')
       AND           A.VULN_SEV_CD                    NOT IN(''I'')
       AND           A.SECUR_SRVC_CD           =      CASE WHEN '''+ @SECUR_SRVC_CD + ''' = '''' THEN A.SECUR_SRVC_CD ELSE '''+ @SECUR_SRVC_CD + ''' END
       AND           A.ROW_STS_KEY                    =      1 '
	   EXECUTE (@Query)


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_RouteCauseAnalysis]...';


GO
CREATE PROCEDURE [dbo].[Report_RouteCauseAnalysis]
(

       @CLNT_ENGMT_CD       VARCHAR(100),
       @SECUR_SRVC_CD       VARCHAR(100),
       @Flag                VARCHAR(2),-- AP - Application,SS-SSID,AL- ALL
       @APPNETCD            VARCHAR(500),
	   @schema				VARCHAR(50)  
       
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(max)
DECLARE @LiCOUNT INTEGER

IF @Flag = 'AL'
BEGIN 
SET		  @Query ='	 
SELECT   B.VULN_CATGY_CD,B.VULN_CATGY_NM,A.CLNT_ENGMT_CD,
        COUNT(A.CLNT_VULN_INSTC_KEY) Percentage
FROM    '+ @schema+'.CLNT_VULN_INSTC                   A
JOIN    VULN_CATGY                   B
ON      A.VULN_CATGY_CD            = B.VULN_CATGY_CD
WHERE   CLNT_ENGMT_CD                   = '''+@CLNT_ENGMT_CD +'''
AND     SECUR_SRVC_CD                   = CASE WHEN '''+@SECUR_SRVC_CD+'''='''' THEN SECUR_SRVC_CD ELSE '''+@SECUR_SRVC_CD+''' END
AND     A.VULN_INSTC_STS_CD             NOT IN(''D'',''FP'')
AND     A.VULN_SEV_CD                   NOT IN(''I'')
AND     A.ROW_STS_KEY                    =  1
-- AND     B.ROOT_CAUS_ANLYS_CD            <> ''OTH''
-- AND   B.ROOT_CAUS_ANLYS_CD            LIKE ''OWSAP%''
GROUP BY B.VULN_CATGY_CD,B.VULN_CATGY_NM,A.CLNT_ENGMT_CD
ORDER BY Percentage DESC'
EXECUTE (@Query)
END

  IF @Flag = 'AP'
BEGIN 
 SET	@Query ='	
 SELECT B.VULN_CATGY_CD,B.VULN_CATGY_NM,A.CLNT_ENGMT_CD,
        COUNT(A.CLNT_VULN_INSTC_KEY) Percentage
FROM    '+ @schema+'.CLNT_VULN_INSTC                   A
JOIN    VULN_CATGY                   B
ON      A.VULN_CATGY_CD            = B.VULN_CATGY_CD
JOIN    dbo.FnSplit('''+@APPNETCD+''','','')		  C
ON      A.SFTW_NM                       = C.items
WHERE   CLNT_ENGMT_CD                   = '''+@CLNT_ENGMT_CD+'''
AND     SECUR_SRVC_CD                   = CASE WHEN '''+@SECUR_SRVC_CD+'''='''' THEN SECUR_SRVC_CD ELSE '''+@SECUR_SRVC_CD+''' END
AND     A.VULN_INSTC_STS_CD             NOT IN(''D'',''FP'')
AND     A.VULN_SEV_CD                   NOT IN(''I'')
AND     A.ROW_STS_KEY                   =  1
-- AND   B.ROOT_CAUS_ANLYS_CD            LIKE ''OWSAP%''
GROUP BY B.VULN_CATGY_CD,B.VULN_CATGY_NM,A.CLNT_ENGMT_CD
ORDER BY Percentage DESC '
EXECUTE (@Query)
END

  IF @Flag = 'SS'
BEGIN 
 SET	@Query ='
SELECT  B.VULN_CATGY_CD,B.VULN_CATGY_NM,A.CLNT_ENGMT_CD,
        COUNT(A.CLNT_VULN_INSTC_KEY) Percentage
FROM    '+ @schema+'.CLNT_VULN_INSTC                   A
JOIN    VULN_CATGY                   B
ON      A.VULN_CATGY_CD            = B.VULN_CATGY_CD
JOIN    dbo.FnSplit('''+@APPNETCD+''','','')		  C
ON      A.NETBIOS_NM                    = C.items
WHERE   CLNT_ENGMT_CD                   = '''+@CLNT_ENGMT_CD+'''
AND     SECUR_SRVC_CD                   = CASE WHEN '''+@SECUR_SRVC_CD+'''='''' THEN SECUR_SRVC_CD ELSE '''+@SECUR_SRVC_CD+''' END
AND     A.VULN_INSTC_STS_CD             NOT IN(''D'',''FP'')
AND     A.VULN_SEV_CD                   NOT IN(''I'')
AND     A.ROW_STS_KEY                   =  1
-- AND     B.ROOT_CAUS_ANLYS_CD            <> ''OTH''
-- AND   B.ROOT_CAUS_ANLYS_CD            LIKE ''OWSAP%''
GROUP BY B.VULN_CATGY_CD,B.VULN_CATGY_NM,A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD
ORDER BY Percentage DESC '
EXECUTE (@Query)
END
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_Severity]...';


GO

CREATE PROCEDURE [dbo].[Report_Severity]
(
	
	@CLNT_ENGMT_CD	VARCHAR(100),
	@SECUR_SRVC_CD	VARCHAR(100),	
	@Flag			VARCHAR(2),-- AP - Application,SS-SSID,AL- ALL
	@APPNETCD		VARCHAR(500),
    @schema			 VARCHAR(50)	
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
 DECLARE @Query VARCHAR(max)
 CREATE TABLE #TempTable(
 CRITICAL INTEGER,
 HIGH	  INTEGER,
 MEDIUM	  INTEGER,
 LOW	  INTEGER
 )

 IF @Flag = 'AL'
 BEGIN	 
 SET		  @Query ='	 
 INSERT INTO #TempTable
 SELECT   COUNT(CASE WHEN VULN_SEV_CD=''C'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Critical'',
		  COUNT(CASE WHEN VULN_SEV_CD=''H'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''High'',
		  COUNT(CASE WHEN VULN_SEV_CD=''M'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Medium'',
		  COUNT(CASE WHEN VULN_SEV_CD=''L'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Low''
 FROM	  '+ @schema+'.CLNT_VULN_INSTC A
 JOIN	  SECUR_SRVC	B
 ON		  A.SECUR_SRVC_CD = B.SECUR_SRVC_CD
 WHERE    CLNT_ENGMT_CD = '''+@CLNT_ENGMT_CD + '''
 AND	  A.SECUR_SRVC_CD = CASE WHEN '''+ @SECUR_SRVC_CD + ''' = '''' THEN A.SECUR_SRVC_CD ELSE '''+ @SECUR_SRVC_CD + ''' END
 AND	  VULN_INSTC_STS_CD NOT IN(''D'',''FP'')
 AND	  VULN_SEV_CD		NOT IN(''I'')
 AND	  A.ROW_STS_KEY				=  1
 GROUP BY CLNT_ENGMT_CD,A.SECUR_SRVC_CD,B.SECUR_SRVC_NM '
 EXECUTE (@Query)

 SELECT Header,SeverityCount FROM(
 SELECT 'Critical'Header,CRITICAL SeverityCount
 FROM	#TempTable 
 UNION
 SELECT 'High'Header,HIGH SeverityCount
 FROM	#TempTable 
 UNION
  SELECT 'Medium'Header,MEDIUM SeverityCount
 FROM	#TempTable 
 UNION
 SELECT 'Low'Header,LOW SeverityCount
 FROM	#TempTable )A
 ORDER BY CASE Header  WHEN 'Critical' THEN 1 WHEN 'High' THEN 2 WHEN 'Medium' THEN 3 WHEN 'Low' THEN 4 END
 END

  IF @Flag = 'AP'
 BEGIN
 SET		  @Query ='	 	 
 INSERT INTO #TempTable
 SELECT   COUNT(CASE WHEN VULN_SEV_CD=''C'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Critical'',
		  COUNT(CASE WHEN VULN_SEV_CD=''H'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''High'',
		  COUNT(CASE WHEN VULN_SEV_CD=''M'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Medium'',
		  COUNT(CASE WHEN VULN_SEV_CD=''L'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Low''
 FROM	  '+ @schema+'.CLNT_VULN_INSTC A
 JOIN	  SECUR_SRVC	B
 ON		  A.SECUR_SRVC_CD = B.SECUR_SRVC_CD
 JOIN	  dbo.FnSplit('+@APPNETCD+','','')  C
 ON		  A.SFTW_NM		= C.items
 WHERE    CLNT_ENGMT_CD = '''+@CLNT_ENGMT_CD + '''
 AND	  A.SECUR_SRVC_CD = CASE WHEN '''+ @SECUR_SRVC_CD + ''' = '''' THEN A.SECUR_SRVC_CD ELSE '''+ @SECUR_SRVC_CD + ''' END
 AND	  VULN_INSTC_STS_CD NOT IN(''D'',''FP'')
 AND	  VULN_SEV_CD		NOT IN(''I'')
 AND	  A.ROW_STS_KEY				=  1
 GROUP BY CLNT_ENGMT_CD,A.SECUR_SRVC_CD,B.SECUR_SRVC_NM '
 EXECUTE (@Query)

 SELECT Header,SeverityCount FROM(
 SELECT 'Critical'Header,CRITICAL SeverityCount
 FROM	#TempTable 
 UNION
 SELECT 'High'Header,HIGH SeverityCount
 FROM	#TempTable 
 UNION
  SELECT 'Medium'Header,MEDIUM SeverityCount
 FROM	#TempTable 
 UNION
 SELECT 'Low'Header,LOW SeverityCount
 FROM	#TempTable )A
 ORDER BY CASE Header  WHEN 'Critical' THEN 1 WHEN 'High' THEN 2 WHEN 'Medium' THEN 3 WHEN 'Low' THEN 4 END
 END

  IF @Flag = 'SS'
 BEGIN	 
 SET		  @Query ='	 
 INSERT INTO #TempTable
 SELECT   COUNT(CASE WHEN VULN_SEV_CD=''C'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Critical'',
		  COUNT(CASE WHEN VULN_SEV_CD=''H'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''High'',
		  COUNT(CASE WHEN VULN_SEV_CD=''M'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Medium'',
		  COUNT(CASE WHEN VULN_SEV_CD=''L'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Low''
 FROM	  '+ @schema+'.CLNT_VULN_INSTC A
 JOIN	  SECUR_SRVC	B
 ON		  A.SECUR_SRVC_CD = B.SECUR_SRVC_CD
 JOIN	  dbo.FnSplit('''+@APPNETCD+''','''','''')  C
 ON		  A.NETBIOS_NM				= C.items
 WHERE    CLNT_ENGMT_CD = '''+@CLNT_ENGMT_CD + '''
 AND	  A.SECUR_SRVC_CD = CASE WHEN '''+ @SECUR_SRVC_CD + ''' = '''' THEN A.SECUR_SRVC_CD ELSE '''+ @SECUR_SRVC_CD + ''' END
 AND	  VULN_INSTC_STS_CD NOT IN(''D'',''FP'')
 AND	  VULN_SEV_CD		NOT IN(''I'')
 AND	  A.ROW_STS_KEY				=  1
 GROUP BY CLNT_ENGMT_CD,A.SECUR_SRVC_CD,B.SECUR_SRVC_NM '
 EXECUTE (@Query)

 SELECT Header,SeverityCount FROM(
 SELECT 'Critical'Header,CRITICAL SeverityCount
 FROM	#TempTable 
 UNION
 SELECT 'High'Header,HIGH SeverityCount
 FROM	#TempTable 
 UNION
  SELECT 'Medium'Header,MEDIUM SeverityCount
 FROM	#TempTable 
 UNION
 SELECT 'Low'Header,LOW SeverityCount
 FROM	#TempTable )A
 ORDER BY CASE Header  WHEN 'Critical' THEN 1 WHEN 'High' THEN 2 WHEN 'Medium' THEN 3 WHEN 'Low' THEN 4 END
 END
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_TopApplications]...';


GO
CREATE PROCEDURE [dbo].[Report_TopApplications]
(

	@CLNT_ENGMT_CD	VARCHAR(100),
	@SECUR_SRVC_CD	VARCHAR(100),
	@Flag			VARCHAR(2),-- AP - Application,SS-SSID,AL- ALL
	@APPNETCD		VARCHAR(500),
    @schema			 VARCHAR(50)		
		
	
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
 DECLARE @Query VARCHAR(max)
 DECLARE @LiCOUNT INTEGER
	
	IF @Flag = 'AL'
	BEGIN	
	SET		  @Query ='	  
    SELECT   CLNT_ENGMT_CD,SECUR_SRVC_CD,SFTW_NM,COUNT(CLNT_VULN_INSTC_KEY)VULCOUNT
    FROM     '+ @schema+'.CLNT_VULN_INSTC
	WHERE    CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD +'''
	AND		 SECUR_SRVC_CD			= '''+ @SECUR_SRVC_CD +'''
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
	AND		 ROW_STS_KEY					= 1
    GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,SFTW_NM
    ORDER BY COUNT(SFTW_NM) DESC '
--	PRINT (@Query)
	EXECUTE (@Query)
	END

	IF @Flag = 'AP'
	BEGIN	  
	SET		  @Query ='	
    SELECT   CLNT_ENGMT_CD,SECUR_SRVC_CD,SFTW_NM,COUNT(CLNT_VULN_INSTC_KEY)VULCOUNT
    FROM     '+ @schema+'.CLNT_VULN_INSTC			 A
	JOIN	 dbo.FnSplit('''+ @APPNETCD +''','','')  B
	ON		 A.SFTW_NM			= B.items
	WHERE    CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD +'''
	AND		 SECUR_SRVC_CD			= '''+ @SECUR_SRVC_CD + '''
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
	AND		 A.ROW_STS_KEY					= 1
    GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,SFTW_NM
    ORDER BY COUNT(SFTW_NM) DESC'
	EXECUTE (@Query)
	END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_TopApplicationSeverity]...';


GO
CREATE PROCEDURE [dbo].[Report_TopApplicationSeverity]
(

	@CLNT_ENGMT_CD	VARCHAR(100),
	@SECUR_SRVC_CD	VARCHAR(100),
	@Flag			VARCHAR(2),-- AP - Application,SS-SSID,AL- ALL
	@APPNETCD		VARCHAR(500),
	@schema			 VARCHAR(50)			
	
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
 DECLARE @Query VARCHAR(max)
 DECLARE @LiCOUNT INTEGER
	 
	IF @Flag = 'AL'
	BEGIN
	SET		  @Query ='	   	   
    SELECT   TOP 5 CLNT_ENGMT_CD,SECUR_SRVC_CD,SFTW_NM,SUM(VULN_OVALL_SCOR),
			 COUNT(CASE WHEN VULN_SEV_CD=''C'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Critical'',
			 COUNT(CASE WHEN VULN_SEV_CD=''H'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''High'',
			 COUNT(CASE WHEN VULN_SEV_CD=''M'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Medium'',
			 COUNT(CASE WHEN VULN_SEV_CD=''L'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Low''
    FROM     '+ @schema+'.CLNT_VULN_INSTC			 
	WHERE    CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD + '''
	AND		 SECUR_SRVC_CD			= '''+ @SECUR_SRVC_CD + '''
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
	AND		 ISNULL(SFTW_NM,'''')	<> ''''
    AND		 ROW_STS_KEY					= 1
    GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,SFTW_NM
    ORDER BY SUM(VULN_OVALL_SCOR) DESC '
	EXECUTE (@Query)
	END

	IF @Flag = 'AP'
	BEGIN
	SET		  @Query ='	  	   
    SELECT   TOP 5 CLNT_ENGMT_CD,SECUR_SRVC_CD,SFTW_NM,SUM(VULN_OVALL_SCOR),
			 COUNT(CASE WHEN VULN_SEV_CD=''C'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Critical'',
			 COUNT(CASE WHEN VULN_SEV_CD=''H'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''High'',
			 COUNT(CASE WHEN VULN_SEV_CD=''M'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Medium'',
			 COUNT(CASE WHEN VULN_SEV_CD=''L'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Low''
    FROM     '+ @schema+'.CLNT_VULN_INSTC			 A
	JOIN	 dbo.FnSplit('''+@APPNETCD+''','','')  B
	ON		 A.SFTW_NM				= B.items
	WHERE    CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD +'''
	AND		 SECUR_SRVC_CD			= '''+@SECUR_SRVC_CD +'''
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
    AND		 ISNULL(SFTW_NM,'''')	<> ''''
	AND		 A.ROW_STS_KEY					= 1
	GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,SFTW_NM
    ORDER BY SUM(VULN_OVALL_SCOR) DESC'
	EXECUTE (@Query)
	END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_TopApplicationVULN]...';


GO
CREATE PROCEDURE [dbo].[Report_TopApplicationVULN]
(

	@CLNT_ENGMT_CD	VARCHAR(100),
	@SECUR_SRVC_CD	VARCHAR(100),
	@Flag			VARCHAR(2),-- AP - Application,SS-SSID,AL- ALL
	@APPNETCD		VARCHAR(500),
    @schema			 VARCHAR(50)	
	
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
 DECLARE @Query VARCHAR(max)
 DECLARE @LiCOUNT INTEGER

	IF @Flag = 'AL'
	BEGIN	   
	SET		  @Query ='	  
    SELECT   TOP 5 CLNT_ENGMT_CD,SECUR_SRVC_CD,SFTW_NM,COUNT(CLNT_VULN_INSTC_KEY),
			 COUNT(CASE WHEN VULN_SEV_CD=''C'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Critical'',
			 COUNT(CASE WHEN VULN_SEV_CD=''H'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''High'',
			 COUNT(CASE WHEN VULN_SEV_CD=''M'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Medium'',
			 COUNT(CASE WHEN VULN_SEV_CD=''L'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Low''
    FROM     '+ @schema+'.CLNT_VULN_INSTC
	WHERE    CLNT_ENGMT_CD			= '+@CLNT_ENGMT_CD + '
	AND		 SECUR_SRVC_CD			= '+ @SECUR_SRVC_CD + '
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
    GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,SFTW_NM
    ORDER BY COUNT(SFTW_NM) DESC '
	EXECUTE (@Query)

	END

	IF @Flag = 'AP'
	BEGIN	 
	SET		  @Query ='	    
    SELECT   TOP 5 CLNT_ENGMT_CD,SECUR_SRVC_CD,SFTW_NM,COUNT(CLNT_VULN_INSTC_KEY),
			 COUNT(CASE WHEN VULN_SEV_CD=''C'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Critical'',
			 COUNT(CASE WHEN VULN_SEV_CD=''H'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''High'',
			 COUNT(CASE WHEN VULN_SEV_CD=''M'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Medium'',
			 COUNT(CASE WHEN VULN_SEV_CD=''L'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Low''
    FROM     '+ @schema+'.CLNT_VULN_INSTC			 A
	JOIN	 dbo.FnSplit('+@APPNETCD+','','')  B
	ON		 A.SFTW_NM				= B.items
	WHERE    CLNT_ENGMT_CD			= '+@CLNT_ENGMT_CD + '
	AND		 SECUR_SRVC_CD			= '+ @SECUR_SRVC_CD + '
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
    GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,SFTW_NM
    ORDER BY COUNT(SFTW_NM) DESC '
	EXECUTE (@Query)
	END


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_TopHitrust]...';


GO
CREATE PROCEDURE [dbo].[Report_TopHitrust]
(
       @CLNT_ENGMT_CD    VARCHAR(50),
	   @SECUR_SRVC_CD	 VARCHAR(50),	
	   @schema			 VARCHAR(50)		
)
AS
BEGIN

DECLARE @Query VARCHAR(max)
BEGIN TRY
SET NOCOUNT ON
			  SET		  @Query ='	              
              SELECT	  A.SECUR_CTL_CD SECUR_OBJ_CD,A.SECUR_CTL_NM SECUR_OBJ_NM,COUNT(C.CLNT_VULN_INSTC_KEY)FindingCount
              FROM		  SECUR_CTL							A
              JOIN		  '+ @schema+'.CLNT_VULN_SECUR_CTL				B
			  ON		  A.SECUR_CTL_CD				=	B.SECUR_CTL_CD
			  JOIN		  '+ @schema+'.CLNT_VULN_INSTC					C
			  ON		  B.CLNT_VULN_INSTC_KEY			=	C.CLNT_VULN_INSTC_KEY
              WHERE		  C.CLNT_ENGMT_CD			    =	'''+@CLNT_ENGMT_CD + '''
			  AND		  C.SECUR_SRVC_CD				=   '''+ @SECUR_SRVC_CD + '''
			  AND		  C.VULN_INSTC_STS_CD			NOT IN(''D'',''FP'')
			  AND		  C.VULN_SEV_CD					NOT IN(''I'')
			  AND		  A.REG_CMPLN_CD				=   ''HITRUST''
			  AND		  C.ROW_STS_KEY					= 1
			  GROUP BY	  A.SECUR_CTL_CD,A.SECUR_CTL_NM
			  ORDER BY	  COUNT(C.CLNT_VULN_INSTC_KEY) DESC'
			  EXECUTE (@Query)
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_TopHost]...';


GO
CREATE PROCEDURE [dbo].[Report_TopHost]
(

	@CLNT_ENGMT_CD	VARCHAR(100),
	@SECUR_SRVC_CD	VARCHAR(100),	
	@schema			VARCHAR(50)		
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
 DECLARE @Query VARCHAR(max)
 DECLARE @LiCOUNT INTEGER
	SET		@Query ='		 
    SELECT   TOP 5 CLNT_ENGMT_CD,SECUR_SRVC_CD,IPADR HST_NM,SUM(VULN_OVALL_SCOR),
			 COUNT(CASE WHEN VULN_SEV_CD=''C'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Critical'',
			 COUNT(CASE WHEN VULN_SEV_CD=''H'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''High'',
			 COUNT(CASE WHEN VULN_SEV_CD=''M'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Medium'',
			 COUNT(CASE WHEN VULN_SEV_CD=''L'' THEN CLNT_VULN_INSTC_KEY ELSE NULL END)''Low''
    FROM     '+ @schema+'.CLNT_VULN_INSTC
	WHERE    CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD +'''
	AND		 SECUR_SRVC_CD			= '''+ @SECUR_SRVC_CD +'''
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
	AND		 ISNULL(IPADR,'''')		<> ''''
	AND	     ROW_STS_KEY				=  1
    GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,IPADR
    ORDER BY SUM(VULN_OVALL_SCOR) DESC'
	EXECUTE (@Query)

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_TopOSCategories]...';


GO
CREATE PROCEDURE [dbo].[Report_TopOSCategories]
(

	@CLNT_ENGMT_CD	VARCHAR(100),
	@SECUR_SRVC_CD	VARCHAR(100),
	@schema			VARCHAR(50)		
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
 DECLARE @Query VARCHAR(max)
 DECLARE @LiCOUNT INTEGER
 SET		@Query ='		 
 SELECT   A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,C.OS_CATGY_KEY,C.OS_CATGY_NM,COUNT(A.CLNT_VULN_INSTC_KEY)VULN_COUNT
 FROM	  '+ @schema+'.CLNT_VULN_INSTC			  A
 JOIN	  OS						  B
 ON		  A.OS_KEY					= B.OS_KEY
 JOIN	  OS_CATGY					  C
 ON		  B.OS_CATGY_KEY			= C.OS_CATGY_KEY
 WHERE    A.CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD + '''
 AND	  A.SECUR_SRVC_CD			= '''+ @SECUR_SRVC_CD + '''
 AND	  A.VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
 AND	  A.VULN_SEV_CD				NOT IN(''I'')
 AND	  A.ROW_STS_KEY				=  1
 GROUP BY A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,C.OS_CATGY_KEY,OS_CATGY_NM'
 EXECUTE (@Query)

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_TopOWASP]...';


GO
CREATE PROCEDURE [dbo].[Report_TopOWASP]
(

	@CLNT_ENGMT_CD	VARCHAR(100),
	@SECUR_SRVC_CD	VARCHAR(100),
	@Flag			VARCHAR(2),-- AP - Application,SS-SSID,AL- ALL
	@APPNETCD		VARCHAR(500),
	@schema			VARCHAR(50)		
	
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
 DECLARE @Query VARCHAR(max)
 DECLARE @LiCOUNT INTEGER

	IF @Flag = 'AL'
	BEGIN
	SET		@Query ='	   
    SELECT   CLNT_ENGMT_CD,SECUR_SRVC_CD,B.OWASP_NM,COUNT(B.OWASP_TOP_10_KEY)OWASPCOUNT
    FROM     '+ @schema+'.CLNT_VULN_INSTC			  A
	JOIN	 OWASP_TOP_10				  B
	ON		 A.OWASP_TOP_10_KEY		=	  B.OWASP_TOP_10_KEY
	WHERE    CLNT_ENGMT_CD			=	  '''+@CLNT_ENGMT_CD + '''
	AND		 SECUR_SRVC_CD			=	  CASE WHEN '''+@SECUR_SRVC_CD+''' = '''' THEN SECUR_SRVC_CD ELSE '''+@SECUR_SRVC_CD +''' END
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
	AND		 ROW_STS_KEY		= 1
    GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,B.OWASP_NM'
	EXECUTE (@Query)
	END

	IF @Flag = 'AP'
	BEGIN	   
	SET		@Query ='
	SELECT   CLNT_ENGMT_CD,SECUR_SRVC_CD,B.OWASP_NM,COUNT(B.OWASP_TOP_10_KEY)OWASPCOUNT
    FROM     '+ @schema+'.CLNT_VULN_INSTC			  A
	JOIN	 OWASP_TOP_10				  B
	ON		 A.OWASP_TOP_10_KEY		=	  B.OWASP_TOP_10_KEY
	JOIN	 dbo.FnSplit('''+@APPNETCD+''','','')   C
	ON		 A.SFTW_NM				=	  C.items
	WHERE    CLNT_ENGMT_CD			=	  '''+@CLNT_ENGMT_CD+'''
	AND		 SECUR_SRVC_CD			=	  CASE WHEN '''+ @SECUR_SRVC_CD + ''' = '''' THEN SECUR_SRVC_CD ELSE '''+ @SECUR_SRVC_CD+''' END
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
	AND		 ROW_STS_KEY			= 1
    GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,B.OWASP_NM'
	EXECUTE (@Query)
	END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_TopSSID]...';


GO
CREATE PROCEDURE [dbo].[Report_TopSSID]
(

	@CLNT_ENGMT_CD	VARCHAR(100),
	@SECUR_SRVC_CD	VARCHAR(100),
	@Flag			VARCHAR(2),-- AP - Application,SS-SSID,AL- ALL
	@APPNETCD		VARCHAR(500),
	@schema			VARCHAR(50)			
	
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
 DECLARE @Query VARCHAR(max)
 DECLARE @LiCOUNT INTEGER
	IF @Flag = 'AL'
	BEGIN	  
	SET		@Query ='
    SELECT   CLNT_ENGMT_CD,SECUR_SRVC_CD,NETBIOS_NM,COUNT(CLNT_VULN_INSTC_KEY)VULCOUNT
    FROM     '+ @schema+'.CLNT_VULN_INSTC
	WHERE    CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD + '''
	AND		 SECUR_SRVC_CD			= '''+@SECUR_SRVC_CD + '''
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
	AND		 ROW_STS_KEY			= 1
    GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,NETBIOS_NM
    ORDER BY COUNT(SFTW_NM) DESC'
	EXECUTE (@Query)
	END

	IF @Flag = 'SS'
	BEGIN	  
	SET		@Query ='
    SELECT   A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,A.NETBIOS_NM,COUNT(A.CLNT_VULN_INSTC_KEY)VULCOUNT
    FROM     '+ @schema+'.CLNT_VULN_INSTC			 A
	JOIN	 dbo.FnSplit('''+@APPNETCD+''','','')  B
	ON		 A.NETBIOS_NM			= B.items
	WHERE    A.CLNT_ENGMT_CD		= '''+@CLNT_ENGMT_CD + '''
	AND		 A.SECUR_SRVC_CD		= '''+@SECUR_SRVC_CD + '''
	AND		 A.VULN_INSTC_STS_CD	NOT IN(''D'',''FP'')
	AND		 A.VULN_SEV_CD			NOT IN(''I'')
	AND		 A.ROW_STS_KEY		= 1
    GROUP BY A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,A.NETBIOS_NM
    ORDER BY COUNT(A.NETBIOS_NM) DESC'
	EXECUTE (@Query)
	END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_TopVulnerabilities]...';


GO
CREATE PROCEDURE [dbo].[Report_TopVulnerabilities]
(

	@CLNT_ENGMT_CD	VARCHAR(100),
	@SECUR_SRVC_CD	VARCHAR(100),
	@Flag			VARCHAR(2),-- AP - Application,SS-SSID,AL- ALL
	@APPNETCD		VARCHAR(500),
	@schema			VARCHAR(50)	
	
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
 DECLARE @Query VARCHAR(max)
 DECLARE @LiCOUNT INTEGER

	IF @Flag = 'AL'
	BEGIN	   


	SET		@Query ='
    SELECT   TOP 5 CLNT_ENGMT_CD,SECUR_SRVC_CD,VULN_NM,COUNT(CLNT_VULN_INSTC_KEY)VULCOUNT
    FROM	 '+ @schema+'.CLNT_VULN_INSTC
	WHERE    CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD+'''
	AND		 SECUR_SRVC_CD			= '''+@SECUR_SRVC_CD+'''
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
	AND		 ROW_STS_KEY		= 1
    GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,VULN_NM
    ORDER BY COUNT(VULN_NM) DESC'
	EXECUTE (@Query)
	END

	IF @Flag = 'AP'
	BEGIN	   
	SET		@Query ='
    SELECT   TOP 5 CLNT_ENGMT_CD,SECUR_SRVC_CD,VULN_NM,COUNT(CLNT_VULN_INSTC_KEY)VULCOUNT
    FROM     '+ @schema+'.CLNT_VULN_INSTC			 A
	JOIN	 dbo.FnSplit('''+ @APPNETCD +''','','')  B
	ON		 A.SFTW_NM				= B.items
	WHERE    CLNT_ENGMT_CD			= '''+@CLNT_ENGMT_CD +'''
	AND		 SECUR_SRVC_CD			= '''+@SECUR_SRVC_CD + '''
	AND		 VULN_INSTC_STS_CD		NOT IN(''D'',''FP'')
	AND		 VULN_SEV_CD			NOT IN(''I'')
	AND		 A.ROW_STS_KEY		= 1
    GROUP BY CLNT_ENGMT_CD,SECUR_SRVC_CD,VULN_NM
    ORDER BY COUNT(VULN_NM) DESC'	
	EXECUTE (@Query)

	END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_UpdateFileStatus]...';


GO

CREATE PROCEDURE  [dbo].[Report_UpdateFileStatus]
(
       @RPT_FL_UPLOAD_LOG_KEY	INTEGER,
	   @RPT_STS_KEY				INTEGER
	      
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON
              
			  UPDATE	RPT_FL_UPLOAD_LOG
			  SET		RPT_STS_KEY		=	@RPT_STS_KEY,
						UPDT_DT			=	GETDATE()			  
			  WHERE		RPT_FL_UPLOAD_LOG_KEY	=	@RPT_FL_UPLOAD_LOG_KEY                   
END TRY
BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_UpdateVlunarabilityStatus]...';


GO
CREATE PROCEDURE [dbo].[Report_UpdateVlunarabilityStatus]
(
       
	   @VULN_INSTC_KEY		 VARCHAR(30),
	   @VULN_INSTC_STS_CD	 VARCHAR(2),
	   @schema				 VARCHAR(50)
	   			

)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON

DECLARE @Query VARCHAR(max)

		SET		@Query ='UPDATE	'+ @schema+'.CLNT_VULN_INSTC
		SET		VULN_INSTC_STS_CD	=	@VULN_INSTC_STS_CD,
				UPDT_DT				=	GETDATE()
		WHERE	CLNT_VULN_INSTC_KEY	=   '+@VULN_INSTC_KEY
		EXECUTE (@Query)
	   
	   SELECT @@ROWCOUNT AS RETVAL
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Report_VULNCATGY]...';


GO
CREATE PROCEDURE [dbo].[Report_VULNCATGY]
(

       @CLNT_ENGMT_CD       VARCHAR(100),
       @SECUR_SRVC_CD       VARCHAR(100),
       @Flag                VARCHAR(2),-- AP - Application,SS-SSID,AL- ALL
       @APPNETCD            VARCHAR(500),
	   @schema				VARCHAR(50)  
       
)
AS
BEGIN

BEGIN TRY
SET NOCOUNT ON
DECLARE @Query VARCHAR(max)
DECLARE @LiCOUNT INTEGER

IF @Flag = 'AL'
BEGIN 
SET		  @Query ='	 
SELECT   B.VULN_CATGY_CD,B.VULN_CATGY_NM,A.CLNT_ENGMT_CD,
        COUNT(A.CLNT_VULN_INSTC_KEY) Percentage
FROM    '+ @schema+'.CLNT_VULN_INSTC                   A
JOIN    VULN_CATGY                   B
ON      A.VULN_CATGY_CD            = B.VULN_CATGY_CD
WHERE   CLNT_ENGMT_CD                   = '''+@CLNT_ENGMT_CD +'''
AND     SECUR_SRVC_CD                   = CASE WHEN '''+@SECUR_SRVC_CD+'''='''' THEN SECUR_SRVC_CD ELSE '''+ @SECUR_SRVC_CD +''' END
AND     A.VULN_INSTC_STS_CD             NOT IN(''D'',''FP'')
AND     A.VULN_SEV_CD                   NOT IN(''I'')
AND     A.ROW_STS_KEY                    =  1
GROUP BY B.VULN_CATGY_CD,B.VULN_CATGY_NM,A.CLNT_ENGMT_CD
ORDER BY Percentage DESC'
EXECUTE (@Query)
END

  IF @Flag = 'AP'
BEGIN 
 SET	@Query ='	
SELECT   B.VULN_CATGY_CD,B.VULN_CATGY_NM,A.CLNT_ENGMT_CD,
        COUNT(A.CLNT_VULN_INSTC_KEY) Percentage
FROM    '+ @schema+'.CLNT_VULN_INSTC                   A
JOIN    VULN_CATGY                   B
ON      A.VULN_CATGY_CD            = B.VULN_CATGY_CD
JOIN    dbo.FnSplit('+@APPNETCD+','','')		  C
ON      A.SFTW_NM                       = C.items
WHERE   CLNT_ENGMT_CD                   = '+@CLNT_ENGMT_CD + '
AND     SECUR_SRVC_CD                   = CASE WHEN' + @SECUR_SRVC_CD + '='' THEN SECUR_SRVC_CD ELSE '+ @SECUR_SRVC_CD + ' END
AND     A.VULN_INSTC_STS_CD             NOT IN(''D'',''FP'')
AND     A.VULN_SEV_CD                   NOT IN(''I'')
AND     A.ROW_STS_KEY                   =  1
GROUP BY B.VULN_CATGY_CD,B.VULN_CATGY_NM,A.CLNT_ENGMT_CD
ORDER BY Percentage DESC '
EXECUTE (@Query)
END

  IF @Flag = 'SS'
BEGIN 
 SET	@Query ='
SELECT   B.VULN_CATGY_CD,B.VULN_CATGY_NM,A.CLNT_ENGMT_CD,
        COUNT(A.CLNT_VULN_INSTC_KEY) Percentage
FROM    '+ @schema+'.CLNT_VULN_INSTC                   A
JOIN    VULN_CATGY                   B
ON      A.VULN_CATGY_CD            = B.VULN_CATGY_CD
JOIN    dbo.FnSplit('+@APPNETCD+','','')		  C
ON      A.NETBIOS_NM                    = C.items
WHERE   CLNT_ENGMT_CD                   = '+@CLNT_ENGMT_CD + '
AND     SECUR_SRVC_CD                   = CASE WHEN ' + @SECUR_SRVC_CD + '='''' THEN SECUR_SRVC_CD ELSE ' + @SECUR_SRVC_CD + ' END
AND     A.VULN_INSTC_STS_CD             NOT IN(''D'',''FP'')
AND     A.VULN_SEV_CD                   NOT IN(''I'')
AND     A.ROW_STS_KEY                   =  1
GROUP BY B.VULN_CATGY_CD,B.VULN_CATGY_NM,A.CLNT_ENGMT_CD,A.SECUR_SRVC_CD
ORDER BY Percentage DESC '
EXECUTE (@Query)
END
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[Reports_INSReportFileUploadLog]...';


GO
CREATE PROCEDURE [dbo].[Reports_INSReportFileUploadLog](
	@ROW_STS_KEY          INTEGER,
	@ORG_KEY              INTEGER,
	@CLNT_ENGMT_CD        VARCHAR(30),
	@RPT_NM_KEY           INTEGER,
	@RPT_STS_KEY		  INTEGER,  
	@FL_NM				  VARCHAR(150),
	@FL_FLDR_PTH		  VARCHAR(500),
	@USER_ID			  INTEGER,
	@FL_SZ				  VARCHAR(100)
	

	)
	AS
	BEGIN
		BEGIN TRY

		SET NOCOUNT ON


			INSERT RPT_FL_UPLOAD_LOG(ROW_STS_KEY,ORG_KEY,CLNT_ENGMT_CD,RPT_NM_KEY,RPT_STS_KEY,FL_NM,FL_FLDR_PTH,CREAT_USER_ID,CREAT_DT,FL_SZ ) VALUES
			(@ROW_STS_KEY,@ORG_KEY,@CLNT_ENGMT_CD,@RPT_NM_KEY,@RPT_STS_KEY,@FL_NM,@FL_FLDR_PTH,@USER_ID,GETDATE(),@FL_SZ)

			SELECT SCOPE_IDENTITY() AS RETVAL

		END TRY

		BEGIN CATCH
			

			DECLARE @ErrorNumber INT = ERROR_NUMBER();
			DECLARE @ErrorLine INT = ERROR_LINE();
			DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
			DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
			DECLARE @ErrorState INT = ERROR_STATE();

			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

			RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
		  END CATCH
		
	END;
GO
PRINT N'Creating [dbo].[Reports_UpdateReportFileUploadLog]...';


GO
	CREATE PROCEDURE  [dbo].[Reports_UpdateReportFileUploadLog](
	@RPT_FL_UPLOAD_LOG_KEY INTEGER,
	@ROW_STS_KEY          INTEGER,
	@RPT_STS_KEY		  INTEGER,  
	@USER_ID			  INTEGER,
	@Flag				  VARCHAR(1)


	)
	AS
	BEGIN
		BEGIN TRY
			
		SET NOCOUNT ON

			IF @Flag = 'U'
			BEGIN
		
			UPDATE	RPT_FL_UPLOAD_LOG
			SET		ROW_STS_KEY		=		@ROW_STS_KEY,
					RPT_STS_KEY		=		@RPT_STS_KEY,
					UPDT_USER_ID	=		@USER_ID,
					UPDT_DT			=		GETDATE(),
					RPT_PUBL_DT		=		GETDATE()
			WHERE	RPT_FL_UPLOAD_LOG_KEY	=	@RPT_FL_UPLOAD_LOG_KEY

			SELECT @@ROWCOUNT AS RETVAL
			
			END
			IF @Flag = 'D'
			BEGIN
			DELETE	FROM RPT_FL_UPLOAD_LOG
			WHERE	RPT_FL_UPLOAD_LOG_KEY	=	@RPT_FL_UPLOAD_LOG_KEY

			END

			SELECT @@ROWCOUNT AS RETVAL

		END TRY

		BEGIN CATCH
			

			DECLARE @ErrorNumber INT = ERROR_NUMBER();
			DECLARE @ErrorLine INT = ERROR_LINE();
			DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
			DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
			DECLARE @ErrorState INT = ERROR_STATE();

			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

			RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
		  END CATCH
		
	END;
GO
PRINT N'Creating [dbo].[SEARCH_UserClntSrvcAssn]...';


GO

CREATE PROCEDURE [dbo].[SEARCH_UserClntSrvcAssn]
(
	@USERTYPEID 	INTEGER,
	@CLNT_ENGMT_CD  VARCHAR(30),
	@USER_ID		INTEGER,
	@USER_TYP_KEY	INTEGER,
	@USERNAME		VARCHAR(300),
	@USER_STRT_DT	VARCHAR(10),
	@USER_END_DT	VARCHAR(10)


		
)
AS
BEGIN

DECLARE @LISERVICE VARCHAR(100) = ''
BEGIN TRY
SET NOCOUNT ON

IF @USERTYPEID = 16
BEGIN
SELECT		C.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,A.SECUR_SRVC_NM,B.SRVC_EST_STRT_DT ,B.SRVC_EST_END_DT,
			[dbo].[fnGetMasterLkpNameByID](G.USER_TYP_KEY) UserType,D.ORG_TYP_KEY,D.ORG_NM,D.ORG_KEY,
			ISNULL(E.USER_CLNT_SRVC_ASGN_KEY,0)USER_CLNT_SRVC_ASGN_KEY,ISNULL(G.FST_NM+' '+G.LST_NM,'') USERNAME,
			ISNULL(G.USER_ID,0) USER_ID,ISNULL(E.ROW_STS_KEY,0) ROW_STS_KEY,
			E.USER_STRT_DT,E.USER_END_DT,G.USER_TYP_KEY
FROM		SECUR_SRVC				  A
JOIN		CLNT_SECUR_SRVC_ENGMT	  B
ON			A.SECUR_SRVC_CD			= B.SECUR_SRVC_CD
JOIN		CLNT_ENGMT				  C
ON			B.CLNT_ENGMT_CD			= C.CLNT_ENGMT_CD
JOIN		CLNT_ENGMT_USER_ASGN	  F
ON			C.CLNT_ENGMT_CD			= F.CLNT_ENGMT_CD
JOIN		USER_CLNT_SRVC_ASGN		  E
ON			C.CLNT_ENGMT_CD			= E.CLNT_ENGMT_CD
AND			A.SECUR_SRVC_CD			= E.SECUR_SRVC_CD
JOIN		USER_PRFL				  G
ON			E.USER_ID				= G.USER_ID
JOIN		ORG						  D
ON			G.ORG_KEY				= D.ORG_KEY
AND			CONVERT(VARCHAR(20),E.USER_STRT_DT,101)  = CASE WHEN @USER_STRT_DT = '' THEN CONVERT(VARCHAR(20),E.USER_STRT_DT,101) ELSE @USER_STRT_DT END
AND			CONVERT(VARCHAR(20),E.USER_END_DT,101)	 = CASE WHEN @USER_END_DT  = '' THEN CONVERT(VARCHAR(20),E.USER_END_DT,101)  ELSE @USER_END_DT END
AND         G.USER_TYP_KEY			= CASE WHEN @USER_TYP_KEY = 0 THEN G.USER_TYP_KEY ELSE @USER_TYP_KEY END
AND			ISNULL(G.FST_NM+' '+G.LST_NM,'')  LIKE CASE WHEN ISNULL(@USERNAME,'') = '' THEN ISNULL(G.FST_NM+' '+G.LST_NM,'') ELSE '%' + @USERNAME + '%' END
WHERE		C.CLNT_ENGMT_CD			= @CLNT_ENGMT_CD
AND			F.USER_ID				= @USER_ID

END

IF @USERTYPEID = 18
BEGIN

SELECT		@LISERVICE = SECUR_SRVC_LIST_CD 
FROM		dbo.CLNT_ENGMT_USER_ASGN  A
JOIN		dbo.USER_PRFL			  B 
ON			A.USER_ID				= B.USER_ID
WHERE		CLNT_ENGMT_CD			= @CLNT_ENGMT_CD 
AND			B.USER_TYP_KEY			= 18
AND			A.USER_ID				= @USER_ID

SELECT		C.CLNT_ENGMT_CD,A.SECUR_SRVC_CD,A.SECUR_SRVC_NM,B.SRVC_EST_STRT_DT ,B.SRVC_EST_END_DT,
			[dbo].[fnGetMasterLkpNameByID](G.USER_TYP_KEY) UserType,D.ORG_TYP_KEY,D.ORG_NM,D.ORG_KEY,
			ISNULL(E.USER_CLNT_SRVC_ASGN_KEY,0)USER_CLNT_SRVC_ASGN_KEY,ISNULL(G.FST_NM+' '+G.LST_NM,'') USERNAME,
			ISNULL(G.USER_ID,0) USER_ID,ISNULL(E.ROW_STS_KEY,0) ROW_STS_KEY,
			E.USER_STRT_DT,E.USER_END_DT,G.USER_TYP_KEY
FROM		SECUR_SRVC				  A
JOIN		CLNT_SECUR_SRVC_ENGMT	  B
ON			A.SECUR_SRVC_CD			= B.SECUR_SRVC_CD
JOIN		CLNT_ENGMT				  C
ON			B.CLNT_ENGMT_CD			= C.CLNT_ENGMT_CD
JOIN		CLNT_ENGMT_USER_ASGN	  F
ON			C.CLNT_ENGMT_CD			= F.CLNT_ENGMT_CD
JOIN	    dbo.FnSplit(@LISERVICE,',')		  H
ON		    A.SECUR_SRVC_CD			= H.items
JOIN		USER_CLNT_SRVC_ASGN		  E
ON			A.SECUR_SRVC_CD			= E.SECUR_SRVC_CD
AND			C.CLNT_ENGMT_CD			= E.CLNT_ENGMT_CD
AND			E.SECUR_SRVC_CD			= H.items
JOIN		USER_PRFL				  G
ON			E.USER_ID				= G.USER_ID
AND			G.USER_TYP_KEY			= 18
JOIN		ORG						  D
ON			G.ORG_KEY				= D.ORG_KEY
AND			CONVERT(VARCHAR(20),E.USER_STRT_DT,101)  = CASE WHEN @USER_STRT_DT = '' THEN CONVERT(VARCHAR(20),E.USER_STRT_DT,101) ELSE @USER_STRT_DT END
AND			CONVERT(VARCHAR(20),E.USER_END_DT,101)	 = CASE WHEN @USER_END_DT  = '' THEN CONVERT(VARCHAR(20),E.USER_END_DT,101)  ELSE @USER_END_DT END
AND         G.USER_TYP_KEY			= CASE WHEN @USER_TYP_KEY = 0 THEN G.USER_TYP_KEY ELSE @USER_TYP_KEY END
AND			ISNULL(G.FST_NM+' '+G.LST_NM,'')  LIKE CASE WHEN ISNULL(@USERNAME,'') = '' THEN ISNULL(G.FST_NM+' '+G.LST_NM,'') ELSE '%' + @USERNAME + '%' END
WHERE		C.CLNT_ENGMT_CD			= @CLNT_ENGMT_CD
AND			F.USER_ID				= @USER_ID


END


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[UPDATE_AppRoleByID]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_AppRoleByID]
(
	@APPL_ROLE_KEY		  INTEGER,
	@ROW_STS_KEY          INTEGER,
	@APPL_ROLE_NM         VARCHAR(100),
	@APPL_ROLE_DESC       VARCHAR(1000),
	@UPDT_USER_ID         INTEGER,
	@STS_COMMT_TXT        TEXT  
				  

)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


BEGIN 
      UPDATE dbo.APPL_ROLE 
      SET    ROW_STS_KEY		 =   @ROW_STS_KEY,
			 APPL_ROLE_NM        =   @APPL_ROLE_NM,
	         APPL_ROLE_DESC      =   @APPL_ROLE_DESC,
	         UPDT_DT			 =	 GETDATE(),
	         UPDT_USER_ID		 =   @UPDT_USER_ID,
			 STS_COMMT_TXT       =   @STS_COMMT_TXT

      WHERE  APPL_ROLE_KEY       =   @APPL_ROLE_KEY
      
	  SELECT @@ROWCOUNT AS RETVAL
END 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[UPDATE_AppRolePermsnGrpStatusByID]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_AppRolePermsnGrpStatusByID]

(   
	@APPL_ROLE_KEY               INTEGER
)

AS  
BEGIN
BEGIN TRY
SET NOCOUNT ON
BEGIN 

            UPDATE dbo.APPL_ROLE
            SET    ROW_STS_KEY                =   3
	        WHERE  APPL_ROLE_KEY              =   @APPL_ROLE_KEY

            UPDATE dbo.APPL_ROLE_PERMSN_GRP
            SET    ROW_STS_KEY                =   3
	        WHERE  APPL_ROLE_KEY              =   @APPL_ROLE_KEY

			UPDATE dbo.USER_APPL_ROLE
            SET    ROW_STS_KEY                =   3
	        WHERE  APPL_ROLE_KEY              =   @APPL_ROLE_KEY
     

			SELECT @@ROWCOUNT AS RETVAL

END 

END TRY
BEGIN CATCH
    DECLARE @ErrorNumber INT = ERROR_NUMBER();

    DECLARE @ErrorLine INT = ERROR_LINE();

    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();

    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();

    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));

    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));



    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);

  END CATCH

-- COMMIT TRANSACTION

END;
GO
PRINT N'Creating [dbo].[UPDATE_CLNT_ENGMT]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_CLNT_ENGMT](
	   @CLNT_ENGMT_CD       VARCHAR(30),	
       @ENGMT_STS_KEY       INTEGER,
       @ROW_STS_KEY			INTEGER,		 
       @CLNT_ENGMT_NM       VARCHAR(150), 
       @ENGMT_STRT_DT       DATETIME, 
       @ENGMT_EST_END_DT    DATETIME, 
       @CLNT_ENGMT_DESC     VARCHAR(1000), 
       @ENGMT_COMMT         TEXT,
       @UPDT_USER_ID        INTEGER
       
       )

       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON

					UPDATE  CLNT_ENGMT
					SET	--	ENGMT_STS_KEY     =  @ENGMT_STS_KEY,
							CLNT_ENGMT_CD     =  @CLNT_ENGMT_CD,
							ROW_STS_KEY		  =  @ROW_STS_KEY,
							CLNT_ENGMT_NM     =  @CLNT_ENGMT_NM,
							ENGMT_STRT_DT	  =  @ENGMT_STRT_DT,
							ENGMT_EST_END_DT  =  @ENGMT_EST_END_DT,
							CLNT_ENGMT_DESC   =  @CLNT_ENGMT_DESC,
							ENGMT_COMMT		  =  @ENGMT_COMMT,
							UPDT_DT			  =  GETDATE(),
							UPDT_USER_ID	  =  @UPDT_USER_ID
					WHERE   CLNT_ENGMT_CD	  =  @CLNT_ENGMT_CD

                    SELECT @@ROWCOUNT AS RETVAL

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[UPDATE_CLNTENGMTUSERASGN]...';


GO

CREATE PROCEDURE [dbo].[UPDATE_CLNTENGMTUSERASGN](
	   
	   @CLNT_ENGMT_USER_ASGN_KEY INTEGER,
	   @ROW_STS_KEY				 INTEGER,
	   @CLNT_ENGMT_CD			 VARCHAR(30),
	   @USER_ID					 INTEGER,
	   @SRV_LST_CD				 VARCHAR(150),
	   @UPDT_DT					 DATETIME,
	   @UPDT_USER_ID			 INTEGER
       
       )

       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON

					UPDATE  CLNT_ENGMT_USER_ASGN
					SET		CLNT_ENGMT_CD			 =  @CLNT_ENGMT_CD,
							ROW_STS_KEY				 =  @ROW_STS_KEY,
							[USER_ID]				 =  @USER_ID,
							SECUR_SRVC_LIST_CD   	 =  @SRV_LST_CD,
							UPDT_DT					 =  GETDATE(),
							UPDT_USER_ID			 =  @UPDT_USER_ID

					WHERE   CLNT_ENGMT_USER_ASGN_KEY =	@CLNT_ENGMT_USER_ASGN_KEY

                    SELECT @@ROWCOUNT AS RETVAL

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[UPDATE_CLNTRELENGMTINDENTIFIER]...';


GO

CREATE PROCEDURE [dbo].[UPDATE_CLNTRELENGMTINDENTIFIER](
	   
	   @CLNT_REL_ENGMT_ID_KEY	INTEGER,
	   @ROW_STS_KEY				INTEGER,
	   @CLNT_ENGMT_CD			VARCHAR(30),
	   @SRC_KEY					INTEGER,
	   @SRC_REL_ENGMT_ID		VARCHAR(150),
	   @UPDT_USER_ID			INTEGER
       
       )

       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON

					UPDATE  CLNT_REL_ENGMT_ID
					SET		CLNT_ENGMT_CD			=  @CLNT_ENGMT_CD,
							ROW_STS_KEY				=  @ROW_STS_KEY,
							SRC_KEY					=  @SRC_KEY,
							SRC_REL_ENGMT_ID		=  @SRC_REL_ENGMT_ID,
							UPDT_DT					=  GETDATE(),
							UPDT_USER_ID			=  @UPDT_USER_ID

					WHERE   CLNT_REL_ENGMT_ID_KEY	=  @CLNT_REL_ENGMT_ID_KEY

                    SELECT @@ROWCOUNT AS RETVAL

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[UPDATE_CLNTSECURSRVCENGMT]...';


GO

CREATE PROCEDURE [dbo].[UPDATE_CLNTSECURSRVCENGMT](
	   
	   @CLNT_ENGMT_CD				VARCHAR(30),
	   @SECUR_SRVC_CD           	VARCHAR(30),
	   @SRVC_ENGMT_STS_KEY			INTEGER,
	   @ROW_STS_KEY					INTEGER,
	   @SRVC_EST_STRT_DT			DATETIME,
	   @SRVC_EST_END_DT				DATETIME,
	   @UPDT_USER_ID				INTEGER
       
       )

       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON

					UPDATE  CLNT_SECUR_SRVC_ENGMT
					SET		CLNT_ENGMT_CD				=  @CLNT_ENGMT_CD,
							SECUR_SRVC_CD				=  @SECUR_SRVC_CD,
							SRVC_ENGMT_STS_KEY			=  @SRVC_ENGMT_STS_KEY,
							ROW_STS_KEY					=  @ROW_STS_KEY,
							SRVC_EST_STRT_DT			=  @SRVC_EST_STRT_DT,
							SRVC_EST_END_DT				=  @SRVC_EST_END_DT,
							UPDT_DT						=  GETDATE(),
							UPDT_USER_ID				=  @UPDT_USER_ID

					WHERE   CLNT_ENGMT_CD	=  @CLNT_ENGMT_CD AND SECUR_SRVC_CD = @SECUR_SRVC_CD

                    SELECT @@ROWCOUNT AS RETVAL

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[UPDATE_EngagementDeactive]...';


GO

CREATE PROCEDURE [dbo].[UPDATE_EngagementDeactive](
	   @CLNT_ENGMT_CD       VARCHAR(30)
       
       )

       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON

					UPDATE  CLNT_ENGMT
					SET		ROW_STS_KEY       = 3
					WHERE   CLNT_ENGMT_CD	  =  @CLNT_ENGMT_CD

					UPDATE  CLNT_ENGMT_USER_ASGN
					SET		ROW_STS_KEY		  =  3 
					WHERE  CLNT_ENGMT_CD  	  =  @CLNT_ENGMT_CD

					UPDATE  CLNT_SECUR_SRVC_ENGMT
					SET		ROW_STS_KEY       = 3
					WHERE	CLNT_ENGMT_CD	  =  @CLNT_ENGMT_CD

                    SELECT @@ROWCOUNT AS RETVAL

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[UPDATE_EngagementPublishStatus]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_EngagementPublishStatus]
(
	   @CLNT_ENGMT_CD       VARCHAR(30),
	   @ENGMT_STS_KEY		INTEGER
       
       )

       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON

					UPDATE  CLNT_ENGMT
					SET		ENGMT_STS_KEY     =  @ENGMT_STS_KEY,
							CLNT_PUBL_DT	  =  GETDATE()
					WHERE   CLNT_ENGMT_CD	  =  @CLNT_ENGMT_CD

					SELECT @@ROWCOUNT AS RETVAL

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[UPDATE_EngagementServicedatebyEngservcode]...';


GO


CREATE PROCEDURE [dbo].[UPDATE_EngagementServicedatebyEngservcode](
	   @CLNT_ENGMT_CD       VARCHAR(30),
	   @SECUR_SRVC_CD		VARCHAR(10),
	   @SRVC_EST_STRT_DT	DATETIME,
	   @SRVC_EST_END_DT		DATETIME
       
       )

       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON

					UPDATE  CLNT_SECUR_SRVC_ENGMT
					SET		SRVC_EST_STRT_DT	= @SRVC_EST_STRT_DT,
							SRVC_EST_END_DT 	= @SRVC_EST_END_DT
					WHERE   CLNT_ENGMT_CD	  =  @CLNT_ENGMT_CD
					AND	    SECUR_SRVC_CD	  =  @SECUR_SRVC_CD
				

                    SELECT @@ROWCOUNT AS RETVAL

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[UPDATE_EngagementStatus]...';


GO

CREATE PROCEDURE [dbo].[UPDATE_EngagementStatus](
	   @CLNT_ENGMT_CD       VARCHAR(30),
	   @ROW_STS_KEY			INTEGER
       
       )

       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON

					UPDATE  CLNT_ENGMT
					SET		ROW_STS_KEY       = @ROW_STS_KEY
					WHERE   CLNT_ENGMT_CD	  =  @CLNT_ENGMT_CD

					UPDATE  CLNT_ENGMT_USER_ASGN
					SET		ROW_STS_KEY		  =  @ROW_STS_KEY 
					WHERE  CLNT_ENGMT_CD  	  =  @CLNT_ENGMT_CD

					UPDATE  CLNT_SECUR_SRVC_ENGMT
					SET		ROW_STS_KEY       = @ROW_STS_KEY
					WHERE	CLNT_ENGMT_CD	  =  @CLNT_ENGMT_CD

                    SELECT @@ROWCOUNT AS RETVAL

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[UPDATE_ETL_AUD_LOG]...';


GO

/******************************
	** Desc: 
	** Auth: GM
	** Date: 06/07/2014
	**************************
	** Change History
	**************************
	**  Date	        Author                  Description	
	**  --------        GM                ------------------------------------
	**************************************/
/*
EXEC [dbo].[UPDATE_ETL_AUD_LOG]    
@ETL_AUD_LOG_KEY = '1359'
 ,@JOB_END_DT         = NULL
 ,@JOB_STS       = 'IN PROGRESS'
 ,@SRC_ROW_CNT     =  4
 ,@TGT_INSRT_ROW_CNT = 4
 ,@TGT_UPDT_ROW_CNT = 1 
 ,@TGT_REJ_ROW_CNT  = 2

*/
	
CREATE PROCEDURE [dbo].[UPDATE_ETL_AUD_LOG]
(
	@ETL_AUD_LOG_KEY         INT
	,@JOB_END_DT         DATETIME
	,@JOB_STS       VARCHAR(100)
	,@SRC_ROW_CNT     INT
	,@TGT_INSRT_ROW_CNT     INT
	,@TGT_UPDT_ROW_CNT    INT
	,@TGT_REJ_ROW_CNT    INT
)
AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRY
		
		IF (@JOB_END_DT IS NULL) SELECT @JOB_END_DT = GETDATE();

		UPDATE [dbo].[ETL_AUD_LOG]
			   SET [JOB_END_DT] = @JOB_END_DT
			   ,[JOB_STS] = @JOB_STS
			   ,[SRC_ROW_CNT] = @SRC_ROW_CNT
			   ,[TGT_INSRT_ROW_CNT] = @TGT_INSRT_ROW_CNT
			   ,[TGT_UPDT_ROW_CNT] = @TGT_UPDT_ROW_CNT
			   ,[TGT_REJ_ROW_CNT] = @TGT_REJ_ROW_CNT
		WHERE ETL_AUD_LOG_KEY = @ETL_AUD_LOG_KEY

	END TRY

	BEGIN CATCH
			
		DECLARE @ErrorNumber INT = ERROR_NUMBER();
		DECLARE @ErrorLine INT = ERROR_LINE();
		DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();

		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH

END
GO
PRINT N'Creating [dbo].[UPDATE_LastloginbyUserid]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_LastloginbyUserid]
(

@UserID         INTEGER,
@Lstlogindate   DATETIME, 
@Sysmacid       VARCHAR(100) 

)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


BEGIN 
      UPDATE USER_PRFL 
      SET    LST_LOGIN_DT        =   GETDATE(),
             MAC_ADR_NM          =   @Sysmacid,
             LOGIN_ATMPT_CNT	 =	0
      WHERE  [USER_ID]           =   @UserID
END 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[UPDATE_LastLogindtbyUserid]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_LastLogindtbyUserid]
(

@UserID         INTEGER


)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


BEGIN 
      UPDATE USER_PRFL 
      SET    LST_LOGIN_DT        =   GETDATE() 
      WHERE  [USER_ID]      =   @UserID
END 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[UPDATE_LockedIndicatorInUserProfile]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_LockedIndicatorInUserProfile]
(

@UserID  INTEGER,
@LockIndicator	INTEGER -- 0 for unlock /1 for lock

)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


BEGIN 
      UPDATE USER_PRFL 
      SET    LCK_IND             =   @LockIndicator
      WHERE  [USER_ID]           =   @UserID
END 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[UPDATE_LockUnlockService]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_LockUnlockService]
(
      @CLNT_ENGMT_CD	VARCHAR(30),
      @SECUR_SRVC_CD	VARCHAR(10),
	  @FL_LCK_IND		INTEGER
 
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

		UPDATE CLNT_SECUR_SRVC_ENGMT
		SET    FL_LCK_IND = @FL_LCK_IND
		WHERE	CLNT_ENGMT_CD = @CLNT_ENGMT_CD
		AND		SECUR_SRVC_CD = @SECUR_SRVC_CD   

		SELECT	@FL_LCK_IND AS RETVAL
		

	IF @FL_LCK_IND = 1
	BEGIN
		UPDATE A		
		SET		A.FL_STS_KEY = dbo.fnGetMasterLkpID('File Status','To Be Processed')
		FROM	APPL_FL_UPLOAD_LOG		A
		JOIN	MSTR_LKP				B 
		ON		A.FL_STS_KEY			= B.MSTR_LKP_KEY
		AND		B.LKP_ENTY_NM			='New'
		AND		B.LKP_ENTY_TYP_NM		='File Status'
		WHERE	A.CLNT_ENGMT_CD			= @CLNT_ENGMT_CD
		AND		A.SECUR_SRVC_CD			= @SECUR_SRVC_CD 
		AND		A.ROW_STS_KEY			= 1 
		  
		
    END

	IF @FL_LCK_IND = 0
	BEGIN
		UPDATE A		
		SET		A.FL_STS_KEY = dbo.fnGetMasterLkpID('File Status','New')
		FROM	APPL_FL_UPLOAD_LOG		A
		JOIN	MSTR_LKP				B 
		ON		A.FL_STS_KEY			= B.MSTR_LKP_KEY
		AND		B.LKP_ENTY_NM			='To Be Processed'
		AND		B.LKP_ENTY_TYP_NM		='File Status'
		WHERE	A.CLNT_ENGMT_CD			= @CLNT_ENGMT_CD
		AND		A.SECUR_SRVC_CD			= @SECUR_SRVC_CD 
		AND		A.ROW_STS_KEY			= 1 
	
    END
	
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[UPDATE_LoginAttemptsinUserProfile]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_LoginAttemptsinUserProfile]
(

@UserID  INTEGER

)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

DECLARE @COUNT INT
      SELECT @COUNT = LOGIN_ATMPT_CNT 
      FROM   USER_PRFL
      WHERE  [USER_ID]           =   @UserID 

IF @COUNT < 2 
BEGIN
	UPDATE USER_PRFL 
	SET    LOGIN_ATMPT_CNT     =   LOGIN_ATMPT_CNT + 1
	WHERE  [USER_ID]           =   @UserID
END
	
ELSE
BEGIN
	UPDATE USER_PRFL 
      SET    LCK_IND             =   1,
			 LOGIN_ATMPT_CNT	 =	 0
      WHERE  [USER_ID]           =   @UserID
END

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[UPDATE_NtfMsgByID]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_NtfMsgByID]
(
	@NTF_MSG_KEY				INTEGER,
	@ROW_STS_KEY				INTEGER,
	@NTF_TYP_KEY				VARCHAR(255),
	@MSG_SBJ_TXT				VARCHAR(255),
	@MSG_CNTN_TXT				TEXT,
	@UPDT_USER_ID				INTEGER  
				  

)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


BEGIN 
      UPDATE dbo.NTF_MSG
      SET    ROW_STS_KEY				=   @ROW_STS_KEY,
			 NTF_TYP_NM				    =   @NTF_TYP_KEY,
			 MSG_SBJ_TXT				=	@MSG_SBJ_TXT,
			 MSG_CNTN_TXT				=   @MSG_CNTN_TXT,
			 UPDT_DT					=	GETDATE(),
	         UPDT_USER_ID				=   @UPDT_USER_ID
      WHERE  NTF_MSG_KEY				=   @NTF_MSG_KEY
END 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[UPDATE_NTFMSGBYTYPE]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_NTFMSGBYTYPE]  
(   @ROW_STS_KEY	INTEGER,
	@NTF_TYP_KEY	VARCHAR(255),
	@MSG_SBJ_TXT	VARCHAR(255),
	@MSG_CNTN_TXT	TEXT,
	@UPDT_USER_ID	INTEGER      
)  
  
AS  
BEGIN  
BEGIN TRY  
SET NOCOUNT ON  
  
BEGIN   
      UPDATE dbo.NTF_MSG  
      SET    ROW_STS_KEY	=  @ROW_STS_KEY,
			 MSG_SBJ_TXT	=  @MSG_SBJ_TXT,
			 MSG_CNTN_TXT	=  @MSG_CNTN_TXT,
			 UPDT_DT		=  GETDATE(),  
			 UPDT_USER_ID   =  @UPDT_USER_ID  
            
      WHERE  NTF_TYP_NM	=  @NTF_TYP_KEY  
        
      SELECT @@ROWCOUNT AS RETVAL  
  
END   
  
END TRY  
  
BEGIN CATCH  
  
    DECLARE @ErrorNumber INT = ERROR_NUMBER();  
    DECLARE @ErrorLine INT = ERROR_LINE();  
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
    DECLARE @ErrorState INT = ERROR_STATE();  
  
    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
  END CATCH  
-- COMMIT TRANSACTION  
END
GO
PRINT N'Creating [dbo].[UPDATE_OrgByID]...';


GO
 
 CREATE PROCEDURE [dbo].[UPDATE_OrgByID]  
( @ORG_KEY     INTEGER,  
 @ROW_STS_KEY    INTEGER,  
 @PAR_ORG_KEY     INTEGER,  
 @ORG_TYP_KEY    INTEGER,  
 @ORG_INDUS_KEY    INTEGER,  
 @ORG_NM      VARCHAR(150),  
 @STR_ADR_1     VARCHAR(255),  
 @STR_ADR_2     VARCHAR(255),  
 @CTY_NM      VARCHAR(255),  
 @ST_NM      VARCHAR(255),  
 @CNTRY_NM     VARCHAR(255),  
 @PST_CD      VARCHAR(20),  
 @ORG_DESC_TXT    TEXT,  
 @UPDT_USER_ID    INTEGER,    
 @STS_COMMT_TXT    TEXT       
)  
  
AS  
BEGIN  
BEGIN TRY  
SET NOCOUNT ON  
  
BEGIN   
      UPDATE dbo.ORG  
      SET    ROW_STS_KEY    =   @ROW_STS_KEY,  
			 PAR_ORG_KEY    =   CASE WHEN @PAR_ORG_KEY=0 THEN NULL ELSE @PAR_ORG_KEY END,  
			 ORG_TYP_KEY    =   @ORG_TYP_KEY,  
			 ORG_INDUS_KEY  =   @ORG_INDUS_KEY,  
			 ORG_NM			=   @ORG_NM,  
			 STR_ADR_1      =   @STR_ADR_1,  
			 STR_ADR_2      =   @STR_ADR_2,  
			 CTY_NM			=   @CTY_NM,  
			 ST_NM			=   @ST_NM,  
			 CNTRY_NM       =   @CNTRY_NM,  
			 PST_CD			=   @PST_CD,  
			 ORG_DESC       =   @ORG_DESC_TXT,  
			 UPDT_DT		=   GETDATE(),  
			 UPDT_USER_ID   =   @UPDT_USER_ID,
			 STS_COMMT_TXT  =	@STS_COMMT_TXT
            
      WHERE  ORG_KEY		=   @ORG_KEY  
        
      SELECT @@ROWCOUNT AS RETVAL  
  
END   
  
END TRY  
  
BEGIN CATCH  
  
    DECLARE @ErrorNumber INT = ERROR_NUMBER();  
    DECLARE @ErrorLine INT = ERROR_LINE();  
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
    DECLARE @ErrorState INT = ERROR_STATE();  
  
    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
  END CATCH  
-- COMMIT TRANSACTION  
END
GO
PRINT N'Creating [dbo].[UPDATE_OrgRelIDByID]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_OrgRelIDByID]
(	
	@ORG_REL_ID_KEY				INTEGER,
	@ORG_KEY					INTEGER,
	@SRC_KEY					INTEGER,
	@SRC_CLNT_ID				VARCHAR(150),
	@UPDT_USER_ID				INTEGER,  
	@ROW_STS_KEY				INTEGER		  
)

AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

BEGIN 
      UPDATE dbo.ORG_REL_ID
      SET    ORG_KEY				=   @ORG_KEY,
			 SRC_KEY				=   @SRC_KEY,
			 SRC_CLNT_ID			=	@SRC_CLNT_ID,
			 UPDT_DT				=	GETDATE(),
	         UPDT_USER_ID			=   @UPDT_USER_ID,
			 ROW_STS_KEY			=   @ROW_STS_KEY
	         
      WHERE  ORG_REL_ID_KEY			=   @ORG_REL_ID_KEY
	  SELECT @@ROWCOUNT AS RETVAL
END 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[UPDATE_PermsnDescriptionByID]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_PermsnDescriptionByID]
(	
	@PERMSN_KEY				INTEGER,
	@PERMSN_DESC			VARCHAR(1000),
	@UPDT_USER_ID			INTEGER  
			  
)

AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

BEGIN 
      UPDATE dbo.PERMSN
      SET    PERMSN_DESC		=	@PERMSN_DESC,
			 UPDT_DT			=	GETDATE(),
	         UPDT_USER_ID		=   @UPDT_USER_ID
      WHERE  PERMSN_KEY			=   @PERMSN_KEY
      
      SELECT @@ROWCOUNT AS RETVAL

END 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[UPDATE_PermsnGrpByID]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_PermsnGrpByID]
(	
	@PERMSN_GRP_KEY			INTEGER,
	@ROW_STS_KEY			INTEGER,
	@PERMSN_GRP_NM			VARCHAR(100),
	@PERMSN_GRP_DESC		VARCHAR(1000),
	@UPDT_USER_ID			INTEGER,
	@STS_COMMT_TXT			TEXT  
			  
)

AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

BEGIN 
      UPDATE dbo.PERMSN_GRP
      SET    ROW_STS_KEY			=   @ROW_STS_KEY,
			 PERMSN_GRP_NM			=   @PERMSN_GRP_NM,
			 PERMSN_GRP_DESC		=	@PERMSN_GRP_DESC,
			 UPDT_DT				=	GETDATE(),
	         UPDT_USER_ID			=   @UPDT_USER_ID,
			 STS_COMMT_TXT          =   @STS_COMMT_TXT 

      WHERE  PERMSN_GRP_KEY			=   @PERMSN_GRP_KEY
      
      SELECT @@ROWCOUNT AS RETVAL

END 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[UPDATE_PermsnGrpStatusByID]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_PermsnGrpStatusByID]
(     
      @FLAG                         VARCHAR(2),
      @PERMSN_GRP_KEY               INTEGER
              
)

AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

BEGIN 
     
     IF @FLAG = 'IA' -- InActive
      BEGIN
     
      UPDATE  dbo.PERMSN_GRP_ASSOC 
      SET    ROW_STS_KEY                  =   2
      WHERE  PERMSN_GRP_KEY             =   @PERMSN_GRP_KEY

      UPDATE dbo.PERMSN_GRP
      SET    ROW_STS_KEY                  =   2
      WHERE  PERMSN_GRP_KEY             =   @PERMSN_GRP_KEY

        
      SELECT @@ROWCOUNT AS RETVAL
      END
        
        
       IF @FLAG = 'D'	-- Delete
        BEGIN 
             
UPDATE  dbo.PERMSN_GRP_ASSOC 
      SET    ROW_STS_KEY                  =   3
        WHERE  PERMSN_GRP_KEY             =   @PERMSN_GRP_KEY

      UPDATE dbo.PERMSN_GRP
      SET    ROW_STS_KEY                  =   3
        WHERE  PERMSN_GRP_KEY             =   @PERMSN_GRP_KEY
      
        SELECT @@ROWCOUNT AS RETVAL
        
        END
      
      

END 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[UPDATE_ScanFailedStatus]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_ScanFailedStatus]
(
       @PvcFlag      VARCHAR(1),
       @PiHours      INTEGER,
       @ConFlag      VARCHAR(1)

)
       
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


BEGIN 
              IF @ConFlag = 'D' --Data
              BEGIN
      UPDATE  A 
      SET     FL_STS_KEY                                =      66,    -- [dbo].[fnGetMasterLkpID]('FL_STS_KEY','Scan Failure'),
              UPDT_USER_ID                     =   1,
              UPDT_DT                              =  GETDATE()
         FROM dbo.APPL_FL_UPLOAD_LOG                            A
         JOIN MSTR_LKP                                B
         ON   B.MSTR_LKP_KEY                          =      A.FL_STS_KEY
         AND  B.LKP_ENTY_NM                           =      'Scan in Progress'      
   --   JOIN  MSTR_LKP                                D
         --ON D.MSTR_LKP_KEY                          =      A.DOC_TYP_KEY
       --  AND       D.LKP_ENTY_NM                           =      'Data' 
WHERE   CASE WHEN @PvcFlag = 'M' THEN DATEDIFF(MINUTE, FL_UPLOAD_DT, GETDATE())
                     WHEN @PvcFlag = 'H' THEN DATEDIFF(HOUR, FL_UPLOAD_DT, GETDATE()) END   > @PiHours
              END


              IF @ConFlag = 'R' --Report
              BEGIN
      UPDATE  A 
      SET     RPT_STS_KEY                                =      70,    -- [dbo].[fnGetMasterLkpID]('FL_STS_KEY','Scan Failure'),
              UPDT_USER_ID                     =   1,
              UPDT_DT                              =  GETDATE()
         FROM dbo.RPT_FL_UPLOAD_LOG                             A
         JOIN MSTR_LKP                                B
         ON   B.MSTR_LKP_KEY                          =      A.RPT_STS_KEY
         AND  B.LKP_ENTY_NM                           =      'Scan in Progress'      
   --   JOIN  MSTR_LKP                                D
         --ON D.MSTR_LKP_KEY                          =      A.DOC_TYP_KEY
       --  AND       D.LKP_ENTY_NM                           =      'Data' 
WHERE   CASE WHEN @PvcFlag = 'M' THEN DATEDIFF(MINUTE, A.CREAT_DT, GETDATE())
                     WHEN @PvcFlag = 'H' THEN DATEDIFF(HOUR, A.CREAT_DT, GETDATE()) END   > @PiHours
              END
END 

END TRY

BEGIN CATCH   

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[UPDATE_UnlockUser]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_UnlockUser]
(
      @UserID			INT,
      @LockIndicator	INT,
      @RowStatusKey		INT
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

      UPDATE USER_PRFL
      SET    LCK_IND         	= @LockIndicator,
			 LOGIN_ATMPT_CNT 	= 0,
             ROW_STS_KEY	 	= @RowStatusKey,
			 USER_VERF_IND		= 0
      WHERE  [USER_ID]		 	= @UserID
      
      SELECT @@ROWCOUNT Retval
      
 
      
END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[UPDATE_USER_PRFL]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_USER_PRFL](
       @USER_ID            INTEGER,
       @ORG_KEY            INTEGER,
       @USER_TYP_KEY       INTEGER,
       @ROW_STS_KEY        INTEGER, 
       @FST_NM             VARCHAR(150), 
       @LST_NM             VARCHAR(150), 
       @MIDL_NM            VARCHAR(150), 
       @JOB_TITL_NM        VARCHAR(150), 
       @TEL_NBR            VARCHAR(20),
       @UPDAT_USER_ID      INTEGER,
	   @STS_COMMT_TXT		TEXT 
       
       )

       AS
       BEGIN



              BEGIN TRY
			  DECLARE @liRowStatus INTEGER = 0
			  SET NOCOUNT ON

			      SELECT    @liRowStatus = ROW_STS_KEY FROM USER_PRFL WHERE  USER_ID =   @USER_ID

                  UPDATE	USER_PRFL
                  SET		ORG_KEY			=	@ORG_KEY,
							USER_TYP_KEY	=	@USER_TYP_KEY,
							ROW_STS_KEY		=	@ROW_STS_KEY,
							FST_NM			=	@FST_NM,
							LST_NM			=	@LST_NM,
							MIDL_NM			=	@MIDL_NM,
							JOB_TITL_NM		=	@JOB_TITL_NM,
							TEL_NBR			=	@TEL_NBR,
							UPDT_DT			=	GETDATE(),
							UPDT_USER_ID	=	@UPDAT_USER_ID,
							STS_COMMT_TXT   =   @STS_COMMT_TXT,
							USER_VERF_IND	=   CASE WHEN @liRowStatus = 2 AND @ROW_STS_KEY = 1 THEN 0 ELSE USER_VERF_IND END
							
					 WHERE  USER_ID			=   @USER_ID

                     SELECT 1 AS RETVAL

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END




/****** Object:  StoredProcedure [dbo].[UPDATE_UnlockUser]    Script Date: 5/11/2016 7:10:52 PM ******/
SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[UPDATE_USER_SESS_LOG]...';


GO
/******************************
       ** File: IRMaaSAdmin.SQL   
       ** Name: UPDATE_USER_SESS_LOG
       ** Desc: This procedure UPDATE data into USER_SESS_LOG table
       ** Auth: Prasad varma
       ** Date: 22/4/2016
       **************************
       ** Change History
       **************************
       ** PR   Date          Author                  Description     
       ** --   --------        -------                ------------------------------------
       ** 1    00/00/1999      xxxxx          
       *******************************/

CREATE PROCEDURE [dbo].[UPDATE_USER_SESS_LOG](
	   @FLAG			   VARCHAR(1),	
       @USER_ID            INTEGER,
       @LST_ACT_DT         DATETIME,
	   @SESS_ID            VARCHAR(150)
       )

       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON

		IF @FLAG = 'U'

		BEGIN
			     UPDATE  USER_SESS_LOG
                  SET     LST_ACT_DT =     GETDATE()
                  WHERE   USER_ID    =   @USER_ID

                 
		END
		
		IF @FLAG = 'D'

		BEGIN 
		 
			DELETE FROM USER_SESS_LOG WHERE [USER_ID] = @USER_ID 
		    -- AND SESS_ID =@SESS_ID

			
			
		END

		IF @FLAG = 'L'

		BEGIN 
		 
			DELETE FROM USER_SESS_LOG WHERE [USER_ID] = @USER_ID 
		    AND SESS_ID =@SESS_ID

			
			
		END
                  

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[UPDATE_UserApplRoleByID]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_UserApplRoleByID]
(
	@USER_APPL_ROLE_KEY		INTEGER,
	@ROW_STS_KEY            INTEGER,
	@APPL_ROLE_KEY          INTEGER,
	@USER_ID				INTEGER,
	@UPDT_USER_ID			INTEGER  
				  

)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


BEGIN 
      UPDATE dbo.USER_APPL_ROLE 
      SET    ROW_STS_KEY		 =   @ROW_STS_KEY,
			 APPL_ROLE_KEY       =   @APPL_ROLE_KEY,
	         USER_ID			 =   @USER_ID,
	         UPDT_DT			 =	 GETDATE(),
	         UPDT_USER_ID		 =   @UPDT_USER_ID
      WHERE  USER_APPL_ROLE_KEY  =   @USER_APPL_ROLE_KEY
END 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[UPDATE_USERCLNTSRVCASGN]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_USERCLNTSRVCASGN](
	   
	   @USER_CLNT_SRVC_ASGN_KEY		INTEGER,
	   @USER_ID						INTEGER,
	   @USER_STRT_DT				DATETIME,
	   @USER_END_DT					DATETIME,
	   @SECUR_SRVC_CD				VARCHAR(30),
	   @CLNT_ENGMT_CD				VARCHAR(30),
	   @ROW_STS_KEY					INTEGER,
	   @UPDT_USER_ID				INTEGER
       
       )

       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON

					UPDATE  USER_CLNT_SRVC_ASGN
					SET		[USER_ID]				  =  @USER_ID,
							USER_STRT_DT			  =  @USER_STRT_DT,
							USER_END_DT				  =  @USER_END_DT,
							SECUR_SRVC_CD             =  @SECUR_SRVC_CD,
							CLNT_ENGMT_CD			  =  @CLNT_ENGMT_CD,
							ROW_STS_KEY				  =  @ROW_STS_KEY,
							UPDT_DT					  =  GETDATE(),
							UPDT_USER_ID			  =  @UPDT_USER_ID

					WHERE   USER_CLNT_SRVC_ASGN_KEY   =	 @USER_CLNT_SRVC_ASGN_KEY

                    SELECT @@ROWCOUNT AS RETVAL

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[UPDATE_UserEmailLogByKey]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_UserEmailLogByKey]
(
	@SND_SUC_IND				INTEGER,
	@RESND_CNT				    INTEGER,
	@USER_EMAIL_LOG				INTEGER,
	@EMAIL_SND_DT				DATETIME			  

)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


BEGIN 
      UPDATE dbo.USER_EMAIL_LOG
      SET    SND_SUC_IND	=   @SND_SUC_IND,
			 RESND_CNT		=   @RESND_CNT,
			 EMAIL_SND_DT	=   @EMAIL_SND_DT
      WHERE  USER_EMAIL_LOG =   @USER_EMAIL_LOG
END 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[UPDATE_UserPasswordDetailsbyUID]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_UserPasswordDetailsbyUID](
       @USER_ID            INTEGER
       
       )

       AS
       BEGIN
              BEGIN TRY

              SET NOCOUNT ON

                  UPDATE	USER_PRFL
                  SET		PSWD_RSET_DT	=   GETDATE(),
							UPDT_DT			=	GETDATE(),
							UPDT_USER_ID	=	@USER_ID,
							LST_LOGIN_DT    =   GETDATE(),
							USER_VERF_IND	=   1
							
				  WHERE		USER_ID			=   @USER_ID

                  SELECT @@ROWCOUNT AS RETVAL

              END TRY

              BEGIN CATCH
                     
                     DECLARE @ErrorNumber INT = ERROR_NUMBER();
                     DECLARE @ErrorLine INT = ERROR_LINE();
                     DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
                     DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
                     DECLARE @ErrorState INT = ERROR_STATE();

                     PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
                     PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

                     RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
                END CATCH
              
       END
GO
PRINT N'Creating [dbo].[UPDATE_UserSecurDtlByID]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_UserSecurDtlByID]
(
	@USER_SECUR_DTL_KEY	INTEGER,
	@ROW_STS_KEY		INTEGER,
	@USER_ID			INTEGER,
	@SECUR_QUES_KEY		INTEGER,
	@ANS_TXT			VARCHAR(1000),
	@SEQ_ORDR_NBR		INTEGER,
	@UPDT_USER_ID		INTEGER
				  

)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


BEGIN 
      UPDATE dbo.USER_SECUR_DTL 
      SET    ROW_STS_KEY		 =   @ROW_STS_KEY,
			 SECUR_QUES_KEY		 =   @SECUR_QUES_KEY,
			 ANS_TXT	         =   @ANS_TXT,
			 SEQ_ORDR_NBR	     =   @SEQ_ORDR_NBR,
			 UPDT_DT			 =	 GETDATE(),
	         UPDT_USER_ID		 =   @UPDT_USER_ID
      WHERE  USER_SECUR_DTL_KEY	 =   @USER_SECUR_DTL_KEY
      AND	 USER_ID			 =   @USER_ID
      
	  SELECT @@ROWCOUNT AS RETVAL
END 

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[UPDATE_VERIFICATIONINDICATORBYUSERID]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_VERIFICATIONINDICATORBYUSERID]
(
      @UserID			INT
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON

      UPDATE USER_PRFL
      SET    USER_VERF_IND	=  1,PSWD_RSET_DT=GETDATE()
      WHERE  [USER_ID]      = @UserID
      
      SELECT @@ROWCOUNT Retval

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END
GO
PRINT N'Creating [dbo].[UpdateFileStatus]...';


GO
CREATE PROCEDURE [dbo].[UpdateFileStatus]
(
	  @APPL_FL_UPLOAD_LOG_KEY	INTEGER,
	  @FL_STS_KEY				INTEGER
     
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON


	UPDATE	APPL_FL_UPLOAD_LOG
	SET		FL_STS_KEY				=		@FL_STS_KEY
	WHERE   APPL_FL_UPLOAD_LOG_KEY	=		@APPL_FL_UPLOAD_LOG_KEY
	

	SELECT @@ROWCOUNT AS RETVAL


END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[UpdateFileStatusETLFailure]...';


GO

CREATE PROCEDURE [dbo].[UpdateFileStatusETLFailure]
(
      @Hours			VARCHAR(10)
	       
)
AS
BEGIN
BEGIN TRY
SET NOCOUNT ON
	
	
	SELECT CLNT_ENGMT_CD,FL_NM  INTO #Upload FROM APPL_FL_UPLOAD_LOG
	WHERE   DATEDIFF(hour,FL_UPLOAD_DT, GETDATE()) >= @Hours
	AND		FL_STS_KEY   	=	38
	AND		ROW_STS_KEY		=	1
	
	
	UPDATE	APPL_FL_UPLOAD_LOG
	SET		FL_STS_KEY		=	40	
	WHERE   DATEDIFF(hour,FL_UPLOAD_DT, GETDATE()) >= @Hours
	AND		FL_STS_KEY   	=	38
	AND		ROW_STS_KEY		=	1

	SELECT * FROM #Upload

	DROP TABLE #Upload

END TRY

BEGIN CATCH

    DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();

    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));

    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
-- COMMIT TRANSACTION
END;
GO
PRINT N'Creating [dbo].[UPDOrgSchmaInd]...';


GO
CREATE PROCEDURE [dbo].[UPDOrgSchmaInd]  
( 
	@ORG_KEY				INTEGER,  
	@UPDT_USER_ID			INTEGER,
	@CREAT_ORG_SCHM_IND		CHAR  
)  
  
AS  
BEGIN  
BEGIN TRY  
SET NOCOUNT ON  
  
BEGIN   
      UPDATE dbo.ORG  
      SET    CREAT_ORG_SCHM_IND  =  @CREAT_ORG_SCHM_IND,
			 UPDT_DT			 =  GETDATE(),  
			 UPDT_USER_ID		 =  @UPDT_USER_ID
      WHERE  ORG_KEY			 =  @ORG_KEY  
        
      SELECT @@ROWCOUNT AS RETVAL  
  
END   
  
END TRY  
  
BEGIN CATCH  
  
    DECLARE @ErrorNumber INT = ERROR_NUMBER();  
    DECLARE @ErrorLine INT = ERROR_LINE();  
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  
    DECLARE @ErrorState INT = ERROR_STATE();  
  
    PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));  
    PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));  
  
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);  
  END CATCH  
-- COMMIT TRANSACTION  
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

--Reference tables


SET IDENTITY_INSERT [dbo].[MSTR_LKP] ON 

INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (1, N'Row Status', N'Active', N'Row Level Status', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (2, N'Row Status', N'Deactive', N'Row Level Status', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (3, N'Row Status', N'Delete', N'Row Level Status', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (4, N'Permission Type', N'Module', N'Module Level Permission', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (5, N'Permission Type', N'Menu', N'Menu Level Permission', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (6, N'Permission Type', N'Submenu', N'Submenu Level Permission', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (7, N'Permission Type', N'Permission', N'Last Level Permission', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (8, N'Organization Type', N'Internal', N'Organization Type Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (9, N'Organization Type', N'Client', N'Organization Type Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (10, N'Organization Type', N'Partner', N'Organization Type Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (11, N'Organization Industry', N'Life Sciences', N'Organization Industry Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (12, N'Organization Industry', N'Payer', N'Organization Industry Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (13, N'Organization Industry', N'Provider', N'Organization Industry Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (14, N'User Activation', N'Lock', N'User Activation information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (15, N'User Activation', N'Unlock', N'User Activation information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (16, N'User Type', N'Internal', N'User Type Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (17, N'User Type', N'Client', N'User Type Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (18, N'User Type', N'Partner', N'User Type Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (19, N'User Type', N'Administrator', N'User Type Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (20, N'Security Question', N'What is your mother''s maiden name?', N'Security Questions Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (21, N'Security Question', N'What city were you born in?', N'Security Questions Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (22, N'Security Question', N'What was your first pet''s name?', N'Security Questions Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (23, N'Security Question', N'What was the name of your high school?', N'Security Questions Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (24, N'Security Question', N'What was your childhood nickname?', N'Security Questions Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (25, N'Security Question', N'What is the name of your favorite childhood friend?', N'Security Questions Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (26, N'Security Question', N'What is the middle name of your youngest child?', N'Security Questions Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (27, N'Security Question', N'In what city did you meet your spouse/significant other?', N'Security Questions Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (28, N'Security Question', N'What school did you attend for sixth grade?', N'Security Questions Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (29, N'Security Question', N'What is your maternal grandmother''s maiden name?', N'Security Questions Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (30, N'Security Question', N'What is your paternal grandfather''s maiden name?', N'Security Questions Information', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (31, N'Source', N'Tripwire IP360', N'The tool used for Network Vulnerability Scans as a part of the Network Vulnerability Assessment.', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (32, N'Source', N'CISCO', N'CISCO Partner', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (33, N'Source', N'WebInspect', N'The tool used for Application Vulnerability Scans as a part of the Application Vulnerability Assessment.', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (34, N'Source', N'PPMO', N'Project & Portfolio Management Optics', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (35, N'Source', N'Manual', N'User created data', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (36, N'File Status', N'New', N'Whenever user uploads a file it wil be in new status', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (37, N'File Status', N'To Be Processed', N'Once a service locked it will be in To be Processed status', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (38, N'File Status', N'ETL in Process', N'Once ETL picks the file it will be in ETL in Processs status', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (39, N'File Status', N'ETL Success', N'Once the file successfully processed by ETL it will in Success status', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (40, N'File Status', N'ETL Failure', N'If any error occured during the ETL process it will be in Failure status', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (41, N'File Status', N'Archive', N'Once the file moved to archive it will be in Archive status', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (42, N'Document Type', N'Data', N'Document Type to upload a file', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (43, N'Document Type', N'Reports', N'Document Type to upload a file', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (44, N'Document Type', N'Evidence', N'Document Type to upload a file', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (45, N'Service Status', N'Not Reviewed', N'Default Status for a service in analyst module', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (46, N'Service Status', N'Reviewed', N'Once a service reviewed it will be in Reviewed status', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (47, N'Report Status', N'Published', N'Status will be updated to Published after reports are reviewed', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (48, N'Report Status', N'Not Published', N'Default status for files uploaded in Reporter module', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (49, N'CVE_FILE', N'Modified', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-Modified.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (50, N'CVE_FILE', N'2002', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2002.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (51, N'CVE_FILE', N'2003', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2003.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (52, N'CVE_FILE', N'2004', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2004.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (53, N'CVE_FILE', N'2005', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2005.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (54, N'CVE_FILE', N'2006', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2006.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (55, N'CVE_FILE', N'2007', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2007.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (56, N'CVE_FILE', N'2008', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2008.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (57, N'CVE_FILE', N'2009', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2009.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (58, N'CVE_FILE', N'2010', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2010.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (59, N'CVE_FILE', N'2011', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2011.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (60, N'CVE_FILE', N'2012', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2012.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (61, N'CVE_FILE', N'2013', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2013.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (62, N'CVE_FILE', N'2014', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2014.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (63, N'CVE_FILE', N'2015', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2015.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (64, N'CVE_FILE', N'2016', N'https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2016.xml.zip', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (65, N'File Status', N'Scan in Progress', N'If any error occured during the ETL process it will be in Failure status', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (66, N'File Status', N'Scan Failure', N'Once the file moved to archive it will be in Archive status', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (67, N'Engagement Status', N'Open', N'Once an Engagement created it will be in Open status', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (68, N'Engagement Status', N'Published', N'Once after publshing the dashboard to client it will be in published status', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (69, 'Report Status', 'Scan in Progress', 'Once a report is uploaded it will be in Scan inprogress status', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (70, N'Report Status', N'Scan Failure', N'If ECG Scan failed status will be updated to Scan Failure', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[MSTR_LKP] ([MSTR_LKP_KEY], [LKP_ENTY_TYP_NM], [LKP_ENTY_NM], [LKP_ENTY_DESC], [ACTV_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (71, N'Source', N'Common Format v1.0', N'For ingesting data into the Intelligent Hub in a common structure and format', 1, GETDATE(), 2, NULL, NULL)
SET IDENTITY_INSERT [dbo].[MSTR_LKP] OFF




SET IDENTITY_INSERT [dbo].[ORG] ON 

INSERT [dbo].[ORG] ([ORG_KEY], [ROW_STS_KEY], [PAR_ORG_KEY], [ORG_TYP_KEY], [ORG_INDUS_KEY], [ORG_NM], [STR_ADR_1], [STR_ADR_2], [CTY_NM], [ST_NM], [CNTRY_NM], [PST_CD], [ORG_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (1, 1, NULL, 8, NULL, N'OPTUM', N'Address1', N'Address2', N'City', N'State', N'US', N'11111', N'Description', NULL, GETDATE(), '2', NULL, NULL)
SET IDENTITY_INSERT [dbo].[ORG] OFF


INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ABW', N'Aruba', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'AFG', N'Afghanistan', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'AGO', N'Angola', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'AIA', N'Anguilla', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ALA', N'Aland Islands', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ALB', N'Albania', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'AND', N'Andorra', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ANT', N'Netherlands Antilles', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ARE', N'United Arab Emirates', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ARG', N'Argentina', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ARM', N'Armenia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ASM', N'American Samoa', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ATG', N'Antigua and Barbuda', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'AUS', N'Australia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'AUT', N'Austria', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'AZE', N'Azerbaijan', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BDI', N'Burundi', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BEL', N'Belgium', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BEN', N'Benin', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BFA', N'Burkina Faso', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BGD', N'Bangladesh', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BGR', N'Bulgaria', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BHR', N'Bahrain', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BHS', N'Bahamas', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BIH', N'Bosnia and Herzegovina', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BLM', N'Saint-BarthTlemy', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BLR', N'Belarus', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BLZ', N'Belize', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BMU', N'Bermuda', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BOL', N'Bolivia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BRA', N'Brazil', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BRB', N'Barbados', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BRN', N'Brunei Darussalam', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BTN', N'Bhutan', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'BWA', N'Botswana', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'CAF', N'Central African Republic', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'CAN', N'Canada', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'CHE', N'Switzerland', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'CHL', N'Chile', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'CHN', N'China', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'CIV', N'C(te d''Ivoire', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'CMR', N'Cameroon', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'COD', N'Democratic Republic of the Congo', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'COG', N'Congo', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'COK', N'Cook Islands', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'COL', N'Colombia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'COM', N'Comoros', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'CPV', N'Cape Verde', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'CRI', N'Costa Rica', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'CUB', N'Cuba', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'CYM', N'Cayman Islands', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'CYP', N'Cyprus', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'CZE', N'Czech Republic', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'DEU', N'Germany', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'DJI', N'Djibouti', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'DMA', N'Dominica', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'DNK', N'Denmark', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'DOM', N'Dominican Republic', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'DZA', N'Algeria', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ECU', N'Ecuador', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'EGY', N'Egypt', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ERI', N'Eritrea', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ESH', N'Western Sahara', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ESP', N'Spain', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'EST', N'Estonia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ETH', N'Ethiopia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'FIN', N'Finland', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'FJI', N'Fiji', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'FLK', N'Falkland Islands (Malvinas)', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'FRA', N'France', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'FRO', N'Faeroe Islands', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'FSM', N'Micronesia, Federated States of', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GAB', N'Gabon', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GBR', N'United Kingdom of Great Britain and Northern Ireland', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GEO', N'Georgia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GGY', N'Guernsey', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GHA', N'Ghana', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GIB', N'Gibraltar', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GIN', N'Guinea', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GLP', N'Guadeloupe', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GMB', N'Gambia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GNB', N'Guinea-Bissau', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GNQ', N'Equatorial Guinea', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GRC', N'Greece', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GRD', N'Grenada', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GRL', N'Greenland', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GTM', N'Guatemala', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GUF', N'French Guiana', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GUM', N'Guam', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'GUY', N'Guyana', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'HKG', N'Hong Kong Special Administrative Region of China', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'HND', N'Honduras', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'HRV', N'Croatia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'HTI', N'Haiti', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'HUN', N'Hungary', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'IDN', N'Indonesia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'IMN', N'Isle of Man', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'IND', N'India', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'IRL', N'Ireland', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'IRN', N'Iran, Islamic Republic of', GETDATE(), 1, NULL, NULL)
GO
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'IRQ', N'Iraq', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ISL', N'Iceland', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ISR', N'Israel', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ITA', N'Italy', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'JAM', N'Jamaica', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'JEY', N'Jersey', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'JOR', N'Jordan', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'JPN', N'Japan', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'KAZ', N'Kazakhstan', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'KEN', N'Kenya', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'KGZ', N'Kyrgyzstan', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'KHM', N'Cambodia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'KIR', N'Kiribati', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'KNA', N'Saint Kitts and Nevis', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'KOR', N'Republic of Korea', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'KWT', N'Kuwait', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'LAO', N'Lao People''s Democratic Republic', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'LBN', N'Lebanon', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'LBR', N'Liberia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'LBY', N'Libyan Arab Jamahiriya', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'LCA', N'Saint Lucia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'LIE', N'Liechtenstein', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'LKA', N'Sri Lanka', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'LSO', N'Lesotho', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'LTU', N'Lithuania', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'LUX', N'Luxembourg', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'LVA', N'Latvia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MAC', N'Macao Special Administrative Region of China', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MAF', N'Saint-Martin (French part)', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MAR', N'Morocco', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MCO', N'Monaco', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MDA', N'Moldova', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MDG', N'Madagascar', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MDV', N'Maldives', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MEX', N'Mexico', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MHL', N'Marshall Islands', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MKD', N'The former Yugoslav Republic of Macedonia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MLI', N'Mali', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MLT', N'Malta', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MMR', N'Myanmar', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MNE', N'Montenegro', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MNG', N'Mongolia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MNP', N'Northern Mariana Islands', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MOZ', N'Mozambique', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MRT', N'Mauritania', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MSR', N'Montserrat', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MTQ', N'Martinique', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MUS', N'Mauritius', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MWI', N'Malawi', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MYS', N'Malaysia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MYT', N'Mayotte', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'NAM', N'Namibia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'NCL', N'New Caledonia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'NER', N'Niger', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'NFK', N'Norfolk Island', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'NGA', N'Nigeria', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'NIC', N'Nicaragua', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'NIU', N'Niue', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'NLD', N'Netherlands', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'NOR', N'Norway', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'NPL', N'Nepal', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'NRU', N'Nauru', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'NZL', N'New Zealand', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'OMN', N'Oman', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'PAK', N'Pakistan', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'PAN', N'Panama', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'PCN', N'Pitcairn', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'PER', N'Peru', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'PHL', N'Philippines', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'PLW', N'Palau', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'PNG', N'Papua New Guinea', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'POL', N'Poland', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'PRI', N'Puerto Rico', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'PRK', N'Democratic People''s Republic of Korea', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'PRT', N'Portugal', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'PRY', N'Paraguay', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'PSE', N'Occupied Palestinian Territory', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'PYF', N'French Polynesia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'QAT', N'Qatar', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'REU', N'R_union', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ROU', N'Romania', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RUS', N'Russian Federation', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RWA', N'Rwanda', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SAU', N'Saudi Arabia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SDN', N'Sudan', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SEN', N'Senegal', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SGP', N'Singapore', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SHN', N'Saint Helena', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SJM', N'Svalbard and Jan Mayen Islands', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SLB', N'Solomon Islands', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SLE', N'Sierra Leone', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SLV', N'El Salvador', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SMR', N'San Marino', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SOM', N'Somalia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SPM', N'Saint Pierre and Miquelon', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SRB', N'Serbia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'STP', N'Sao Tome and Principe', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SUR', N'Suriname', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SVK', N'Slovakia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SVN', N'Slovenia', GETDATE(), 1, NULL, NULL)
GO
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SWE', N'Sweden', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SWZ', N'Swaziland', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SYC', N'Seychelles', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SYR', N'Syrian Arab Republic', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TCA', N'Turks and Caicos Islands', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TCD', N'Chad', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TGO', N'Togo', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'THA', N'Thailand', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TJK', N'Tajikistan', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TKL', N'Tokelau', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TKM', N'Turkmenistan', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TLS', N'Timor-Leste', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TON', N'Tonga', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TTO', N'Trinidad and Tobago', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TUN', N'Tunisia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TUR', N'Turkey', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TUV', N'Tuvalu', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TZA', N'United Republic of Tanzania', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'UGA', N'Uganda', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'UKR', N'Ukraine', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'URY', N'Uruguay', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'USA', N'United States of America', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'UZB', N'Uzbekistan', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'VAT', N'Holy See', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'VCT', N'Saint Vincent and the Grenadines', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'VEN', N'Venezuela (Bolivarian Republic of)', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'VGB', N'British Virgin Islands', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'VIR', N'United States Virgin Islands', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'VNM', N'Viet Nam', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'VUT', N'Vanuatu', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'WLF', N'Wallis and Futuna Islands', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'WSM', N'Samoa', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'YEM', N'Yemen', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ZAF', N'South Africa', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ZMB', N'Zambia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[CNTRY_CD] ([CNTRY_CD], [CNTRY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'ZWE', N'Zimbabwe', GETDATE(), 1, NULL, NULL)



SET IDENTITY_INSERT [dbo].[ST_CD] ON 

INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (1, N'AL', N'USA', N'Alabama', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (2, N'AK', N'USA', N'Alaska', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (3, N'AZ', N'USA', N'Arizona', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (4, N'AR', N'USA', N'Arkansas', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (5, N'CA', N'USA', N'California', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (6, N'CO', N'USA', N'Colorado', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (7, N'CT', N'USA', N'Connecticut', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (8, N'DE', N'USA', N'Delaware', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (9, N'DC', N'USA', N'District of Columbia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (10, N'FL', N'USA', N'Florida', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (11, N'GA', N'USA', N'Georgia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (12, N'HI', N'USA', N'Hawaii', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (13, N'ID', N'USA', N'Idaho', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (14, N'IL', N'USA', N'Illinois', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (15, N'IN', N'USA', N'Indiana', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (16, N'IA', N'USA', N'Iowa', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (17, N'KS', N'USA', N'Kansas', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (18, N'KY', N'USA', N'Kentucky', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (19, N'LA', N'USA', N'Louisiana', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (20, N'ME', N'USA', N'Maine', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (21, N'MD', N'USA', N'Maryland', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (22, N'MA', N'USA', N'Massachusetts', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (23, N'MI', N'USA', N'Michigan', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (24, N'MN', N'USA', N'Minnesota', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (25, N'MS', N'USA', N'Mississippi', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (26, N'MO', N'USA', N'Missouri', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (27, N'MT', N'USA', N'Montana', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (28, N'NE', N'USA', N'Nebraska', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (29, N'NV', N'USA', N'Nevada', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (30, N'NH', N'USA', N'New Hampshire', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (31, N'NJ', N'USA', N'New Jersey', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (32, N'NM', N'USA', N'New Mexico', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (33, N'NY', N'USA', N'New York', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (34, N'NC', N'USA', N'North Carolina', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (35, N'ND', N'USA', N'North Dakota', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (36, N'OH', N'USA', N'Ohio', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (37, N'OK', N'USA', N'Oklahoma', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (38, N'OR', N'USA', N'Oregon', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (39, N'PA', N'USA', N'Pennsylvania', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (40, N'RI', N'USA', N'Rhode Island', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (41, N'SC', N'USA', N'South Carolina', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (42, N'SD', N'USA', N'South Dakota', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (43, N'TN', N'USA', N'Tennessee', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (44, N'TX', N'USA', N'Texas', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (45, N'UT', N'USA', N'Utah', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (46, N'VT', N'USA', N'Vermont', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (47, N'VA', N'USA', N'Virginia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (48, N'WA', N'USA', N'Washington', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (49, N'WV', N'USA', N'West Virginia', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (50, N'WI', N'USA', N'Wisconsin', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (51, N'WY', N'USA', N'Wyoming', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (52, N'AS', N'USA', N'American Samoa', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (53, N'GU', N'USA', N'Guam', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (54, N'MP', N'USA', N'Northern Mariana Islands', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (55, N'PR', N'USA', N'Puerto Rico', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (56, N'UM', N'USA', N'U.S. Minor Outlying Islands', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[ST_CD] ([ST_CD_KEY], [ST_CD], [CNTRY_CD], [ST_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (57, N'VI', N'USA', N'U.S. Virgin Islands', GETDATE(), 1, NULL, NULL)
SET IDENTITY_INSERT [dbo].[ST_CD] OFF


SET IDENTITY_INSERT [dbo].[PERMSN] ON 

INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (1, 1, NULL, 4, N'Administration', N'Administration Module', N'Administration', 1, 1, CAST(0x0000A64900D65BDA AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (2, 1, NULL, 4, N'Client Engagement', N'Client Engagement Module', N'Client Engagement', 1, 1, CAST(0x0000A64900D65BDA AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (3, 1, NULL, 4, N'Engagement Data Upload', N'Engagement Data Upload Module', N'Engagement Data Upload', 1, 1, CAST(0x0000A64900D65BDB AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (4, 1, NULL, 4, N'Analyst', N'Analyst Module', N'Analyst', 1, 1, CAST(0x0000A64900D65BDB AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (5, 1, NULL, 4, N'Reporting', N'Reporting Module', N'Reporting', 1, 1, CAST(0x0000A64900D65BDB AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (6, 1, 1, 5, N'Manage Roles & Permissions', N'Manage Roles & Permissions Menu', N'Manage Roles & Permissions', 1, 1, CAST(0x0000A64900D65BDB AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (7, 1, 1, 5, N'Manage Organizations', N'Manage Client Information Menu', N'Manage Client Information', 0, 2, CAST(0x0000A64900D65BDB AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (8, 1, 1, 5, N'Manage Users', N'Manage Partner Information Menu', N'Manage Partner Information', 0, 3, CAST(0x0000A64900D65BDB AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (9, 1, 1, 5, N'User Activation', N'User Activation Menu', N'User Activation', 0, 3, CAST(0x0000A64900D65BDC AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (10, 1, 6, 6, N'Manage Roles', N'Manage Roles Sub Menu', N'Manage Roles', 0, 1, CAST(0x0000A64900D65BDC AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (11, 1, 6, 6, N'Manage Permission Groups', N'Manage Permission Groups Sub Menu', N'Manage Permission Groups', 0, 2, CAST(0x0000A64900D65BDC AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (12, 1, 6, 6, N'View Detailed Permissions', N'View Detailed Permissions Sub Menu', N'View Detailed Permissions', 0, 3, CAST(0x0000A64900D65BDC AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (13, 1, 10, 7, N'Add Role', N'Role for add role Google India', N'Add Role', 0, 1, CAST(0x0000A64900D65BDC AS DateTime), 1, CAST(0x0000A6B8010116DF AS DateTime), 0)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (14, 1, 10, 7, N'Update Role', N'Roles Permission
manage permisson/ view detailed permisson', N'Update Role', 0, 2, CAST(0x0000A64900D65BDC AS DateTime), 1, CAST(0x0000A6B801021A85 AS DateTime), 0)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (15, 1, 10, 7, N'View Role', N'Roles Permissionss', N'View Role', 0, 3, CAST(0x0000A64900D65BDC AS DateTime), 1, CAST(0x0000A6B201210C03 AS DateTime), 0)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (16, 1, 10, 7, N'Delete Role', N'Roles Permissions', N'Delete Role', 0, 4, CAST(0x0000A64900D65BDD AS DateTime), 1, CAST(0x0000A6AD00D226C1 AS DateTime), 0)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (17, 1, 11, 7, N'Add Permission Group', N'Add Permission Group Permissions', N'Add Permission Group', 0, 1, CAST(0x0000A64900D65BDD AS DateTime), 1, CAST(0x0000A6AB012C63CF AS DateTime), 0)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (18, 1, 11, 7, N'Update Permission Group', N'Update Permission Group Permission', N'Update Permission Group', 0, 2, CAST(0x0000A64900D65BDD AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (19, 1, 11, 7, N'View Permission Group', N'View Permission Group Permission
view detailed permisson', N'View Permission Group', 0, 3, CAST(0x0000A64900D65BDD AS DateTime), 1, CAST(0x0000A6B801010E63 AS DateTime), 0)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (20, 1, 12, 7, N'View Detailed Permissions', N'View Detailed Permissions', N'View Detailed Permissions Permission', 0, 1, CAST(0x0000A64900D65BDD AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (21, 1, 7, 6, N'Manage Organizations Sub Menu', N'Manage Organizations Sub Menu', N'Manage Organizations Sub Menu', 0, 1, CAST(0x0000A64900D65BDD AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (22, 1, 21, 7, N'Add Organization', N'Add Organization Permission', N'Add Organization', 0, 1, CAST(0x0000A64900D65BDE AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (23, 1, 21, 7, N'Update Organization', N'Update Organization Permission', N'Update Organization', 0, 2, CAST(0x0000A64900D65BDE AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (24, 1, 21, 7, N'View Organization', N'View Organization Permission', N'View Organization', 0, 3, CAST(0x0000A64900D65BDE AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (25, 1, 8, 6, N'Manage Users Sub menu', N'Manage Users Sub Menu', N'Manage Users Sub menu', 0, 1, CAST(0x0000A64900D65BDE AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (26, 1, 25, 7, N'Add User', N'Add User Permission', N'Add User', 0, 1, CAST(0x0000A64900D65BDE AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (27, 1, 25, 7, N'Update User', N'Update User Permission', N'Update User', 0, 2, CAST(0x0000A64900D65BDF AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (28, 1, 25, 7, N'View User', N'View User Permission', N'View User', 0, 3, CAST(0x0000A64900D65BDF AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (29, 1, 9, 6, N'User Activation Sub menu', N'User Activation Sub Menu', N'User Activation Sub menu', 0, 1, CAST(0x0000A64900D65BDF AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (30, 1, 29, 7, N'Update User Activation', N'Update User Activation Permission', N'Update User Activation', 0, 1, CAST(0x0000A64900D65BDF AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (31, 1, 29, 7, N'View User Activation', N'View User Activation Permission', N'View User Activation', 0, 2, CAST(0x0000A64900D65BDF AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (32, 1, 11, 7, N'Delete Permission Group', N'Delete Permission Group Permission', N'Delete Permission Group', 0, 3, CAST(0x0000A64900D65BDF AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (33, 1, 12, 7, N'Edit Detailed Permission Description', N'Edit Detailed Permissions Description', N'Edit Detailed Permission Description', 0, 1, CAST(0x0000A64900D65BDF AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (34, 1, 2, 5, N'Client Engagement', N'Client Engagement Menu', N'Client Engagement', 1, 1, CAST(0x0000A64900D65BDF AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (35, 1, 34, 6, N'Manage Engagements', N'Manage Engagements Submenu', N'Manage Engagements', 0, 1, CAST(0x0000A64900D65BDF AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (36, 1, 35, 7, N'Add Engagement', N'Add Engagement permission', N'Add Engagement', 0, 1, CAST(0x0000A64900D65BE0 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (37, 1, 35, 7, N'Edit Engagement', N'Edit Engagement permission', N'Edit Engagement', 0, 2, CAST(0x0000A64900D65BE0 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (38, 1, 35, 7, N'View Engagement', N'View Engagement permission', N'View Engagement', 0, 3, CAST(0x0000A64900D65BE0 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (39, 1, 35, 7, N'Delete Engagement', N'Delete Engagement permission', N'Delete Engagement', 0, 4, CAST(0x0000A64900D65BE0 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (40, 1, 35, 7, N'Add User to Service', N'Add User to Service permission', N'Add User to Service', 0, 5, CAST(0x0000A64900D65BE0 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (41, 1, 35, 7, N'Edit User to Service', N'Edit User to Service permission', N'Edit User to Service', 0, 6, CAST(0x0000A64900D65BE0 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (42, 1, 35, 7, N'View User to Service', N'View User to Service permission', N'View User to Service', 0, 7, CAST(0x0000A64900D65BE1 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (43, 1, 35, 7, N'Delete User to Service', N'Delete User to Service permission', N'Delete User to Service', 0, 8, CAST(0x0000A64900D65BE1 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (45, 1, 3, 5, N'Engagement Data Upload', N'Engagement Data Upload Menu', N'Engagement Data Upload', 0, 1, CAST(0x0000A64900D65BE1 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (46, 1, 45, 6, N'Engagement Data Upload', N'Engagement Data Upload Submenu', N'Engagement Data Upload', 0, 1, CAST(0x0000A64900D65BE1 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (47, 1, 46, 7, N'Add Document upload', N'Add Engagement Data upload permission', N'Add Engagement Data upload', 0, 1, CAST(0x0000A64900D65BE1 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (48, 1, 46, 7, N'Edit Document upload', N'Edit Engagement Data upload permission', N'Edit Engagement Data upload', 0, 2, CAST(0x0000A64900D65BE1 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (49, 1, 46, 7, N'View Document upload', N'View Engagement Data upload permission', N'View Engagement Data upload', 0, 3, CAST(0x0000A64900D65BE2 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (50, 1, 46, 7, N'Delete Document upload', N'Delete Engagement Data upload permission', N'Delete Engagement Data upload', 0, 4, CAST(0x0000A64900D65BE2 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (51, 1, 46, 7, N'Lock Service Data', N'Lock Service Data', N'Lock Service Data', 0, 5, CAST(0x0000A64900D65BE2 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (52, 1, 4, 5, N'Analyst Validation Module', N'Manage Users Menu', N'Analyst Validation Module menu', 0, 1, CAST(0x0000A64900D65BE2 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (53, 1, 52, 6, N'Analyst Validation Module Sub menu', N'Analyst Validation Module Sub Menu', N'Analyst Validation Module Sub menu', 0, 1, CAST(0x0000A64900D65BE2 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (54, 1, 53, 7, N'View Vulnerabilities', N'View Vulnerabilities', N'Analyst Validation View Vulnerability', 0, 1, CAST(0x0000A64900D65BE2 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (55, 1, 53, 7, N'Review Vulnerabilities', N'Review Vulnerabilities', N'Analyst Validation Review Vulnerability', 0, 1, CAST(0x0000A64900D65BE2 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (56, 1, 5, 5, N'Client Reports Upload', N'Client Reports Upload Menu', N'Client Reports Upload', 0, 1, CAST(0x0000A64900D65BE2 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (57, 1, 56, 6, N'Client Reports Upload', N'Client Reports Upload Submenu', N'Client Reports Upload', 0, 1, CAST(0x0000A64900D65BE2 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (58, 1, 57, 7, N'Upload Client Reports', N'Upload Client Reports permission', N'Upload Client Reports', 0, 1, CAST(0x0000A64900D65BE3 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (59, 1, 57, 7, N'View Client Reports', N'View Client Reports permission', N'View Client Reports', 0, 1, CAST(0x0000A64900D65BE3 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (60, 1, 57, 7, N'Publish or Unpublish Reports', N'Publish or Unpublish Reports permission', N'Publish or Unpublish Reports', 0, 1, CAST(0x0000A64900D65BE3 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (61, 1, 57, 7, N'View Dashboard', N'View Dashboard permission', N'View Dashboard', 0, 1, CAST(0x0000A64900D65BE3 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (62, 1, 57, 7, N'Publish Dashboard', N'Publish Dashboard permission', N'Publish Dashboard', 0, 1, CAST(0x0000A64900D65BE3 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (63, 1, 5, 5, N'Remediation Tracking', N'Remediation Tracking Menu', N'Remediation Tracking', 0, 1, CAST(0x0000A64900D65BE3 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (64, 1, 63, 6, N'Remediation Tracking', N'Remediation Tracking Submenu', N'Remediation Tracking', 0, 1, CAST(0x0000A64900D65BE4 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (65, 1, 64, 7, N'Remediate', N'Remediate permission', N'Remediate', 0, 1, CAST(0x0000A64900D65BE4 AS DateTime), 1, CAST(0x0000A65000357C6C AS DateTime), 0)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (66, 1, 64, 7, N'View Remediation', N'View Remediation permission', N'View Remediation', 0, 1, CAST(0x0000A64900D65BE4 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (67, 1, 5, 5, N'Dashboard', N'Dashboard', N'Dashboard Menu', 0, 1, CAST(0x0000A6C100FFD145 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (68, 1, 67, 6, N'Dashboard', N'Dashboard', N'Dashboard Submenu', 1, 1, CAST(0x0000A6C100FFD551 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (69, 1, 68, 7, N'Dashboard', N'Dashboard', N'Dashboard Permission', 0, 1, CAST(0x0000A6C100FFD948 AS DateTime), 1, NULL, NULL)
INSERT [dbo].[PERMSN] ([PERMSN_KEY], [ROW_STS_KEY], [PAR_PERMSN_KEY], [PERMSN_TYP_KEY], [PERMSN_NM], [PERMSN_DESC], [DSPL_TXT], [CHLD_XST_IND], [SEQ_ORDR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (44, 1, 46, 7, N'Unlock Service Data', N'Unlock Service Data permission', N'Unlock Service Data', 0, 9, CAST(0x0000A64900D65BE1 AS DateTime), 1, NULL, NULL)
SET IDENTITY_INSERT [dbo].[PERMSN] OFF
SET IDENTITY_INSERT [dbo].[PERMSN_GRP] ON 

INSERT [dbo].[PERMSN_GRP] ([PERMSN_GRP_KEY], [ROW_STS_KEY], [PERMSN_GRP_NM], [PERMSN_GRP_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (1, 1, N'Security Admin - Manage Organization and User', N'Allows the user to manage the Organizations and Users. (i.e. Add, Edit, and View). Also, allows the user to manage the User Activation. (i.e. Unlock the locked accounts and Activate the Inactive accounts)', NULL, CAST(0x0000A6BB00B690F5 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP] ([PERMSN_GRP_KEY], [ROW_STS_KEY], [PERMSN_GRP_NM], [PERMSN_GRP_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (2, 1, N'Manage Roles & Permissions', N'Allows the user to manage the Roles and Permissions. (i.e. Add, Edit, and View Roles)', NULL, CAST(0x0000A6BB010635CF AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP] ([PERMSN_GRP_KEY], [ROW_STS_KEY], [PERMSN_GRP_NM], [PERMSN_GRP_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (3, 1, N'Client Engagement - Manage Engagements', N'Allows users to Manage Engagements. (i.e. Create, Update, View, and Delete)', NULL, CAST(0x0000A6BE00F5CE96 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP] ([PERMSN_GRP_KEY], [ROW_STS_KEY], [PERMSN_GRP_NM], [PERMSN_GRP_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (4, 1, N'Client Engagement - Manage Engagement User', N'Allows the users to Manage users to the services (i.e. Add, Update, and View)', NULL, CAST(0x0000A6BE00F622FA AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP] ([PERMSN_GRP_KEY], [ROW_STS_KEY], [PERMSN_GRP_NM], [PERMSN_GRP_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (5, 1, N'Engagement Data Upload - Upload', N'Allows the user to respond to the Services (i.e. Allows the user to Add, Update, View, and Delete the documents for the services) and  Lock the service data.', NULL, CAST(0x0000A6BE00F67299 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP] ([PERMSN_GRP_KEY], [ROW_STS_KEY], [PERMSN_GRP_NM], [PERMSN_GRP_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (6, 1, N'Engagement Data Upload - Unlock', N'Allows the user to Unlock the service data', NULL, CAST(0x0000A6BE00F6E910 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP] ([PERMSN_GRP_KEY], [ROW_STS_KEY], [PERMSN_GRP_NM], [PERMSN_GRP_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (7, 1, N'Vulnerabilities - Review', N'Allows to ''Add, Edit, Remove'' the ''Vulnerabilities'' in the engagement, and as well allows to do the ''Review Complete'' action.  Also, allows the user to ''View, and Edit'' the remediation status', NULL, CAST(0x0000A6BE00F744A1 AS DateTime), 3, CAST(0x0000A6C1011E91F6 AS DateTime), 3)
INSERT [dbo].[PERMSN_GRP] ([PERMSN_GRP_KEY], [ROW_STS_KEY], [PERMSN_GRP_NM], [PERMSN_GRP_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (8, 1, N'Report and Dashboards - RW', N'Allows the user to ''Add, View, Delete, and Publish'' the reports, and allows the user to View and Publish the Dashboard to client', NULL, CAST(0x0000A6BE00F7BBA1 AS DateTime), 3, CAST(0x0000A6C1011FE973 AS DateTime), 3)
INSERT [dbo].[PERMSN_GRP] ([PERMSN_GRP_KEY], [ROW_STS_KEY], [PERMSN_GRP_NM], [PERMSN_GRP_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (9, 1, N'Report and Dashboards - RO', N'View Reports and Dashboards', NULL, CAST(0x0000A6BE00F84C1C AS DateTime), 3, CAST(0x0000A6C101168B38 AS DateTime), 3)
INSERT [dbo].[PERMSN_GRP] ([PERMSN_GRP_KEY], [ROW_STS_KEY], [PERMSN_GRP_NM], [PERMSN_GRP_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (10, 1, N'Report and Dashboards - Remediate', N'Report and Dashboards - Remediate', NULL, CAST(0x0000A6BE00FB4E2E AS DateTime), 3, CAST(0x0000A6C101162D55 AS DateTime), 3)
SET IDENTITY_INSERT [dbo].[PERMSN_GRP] OFF
SET IDENTITY_INSERT [dbo].[PERMSN_GRP_ASSOC] ON 

INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (1, 1, 1, 22, 1, 7, 21, CAST(0x0000A6BB00B69916 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (2, 1, 1, 23, 1, 7, 21, CAST(0x0000A6BB00B69916 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (3, 1, 1, 24, 1, 7, 21, CAST(0x0000A6BB00B69916 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (4, 1, 1, 26, 1, 8, 25, CAST(0x0000A6BB00B69916 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (5, 1, 1, 27, 1, 8, 25, CAST(0x0000A6BB00B69916 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (6, 1, 1, 28, 1, 8, 25, CAST(0x0000A6BB00B69916 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (7, 1, 1, 30, 1, 9, 29, CAST(0x0000A6BB00B69916 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (8, 1, 1, 31, 1, 9, 29, CAST(0x0000A6BB00B69916 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (9, 1, 2, 13, 1, 6, 10, CAST(0x0000A6BB01064360 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (10, 1, 2, 14, 1, 6, 10, CAST(0x0000A6BB01064360 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (11, 1, 2, 15, 1, 6, 10, CAST(0x0000A6BB01064360 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (12, 1, 2, 16, 1, 6, 10, CAST(0x0000A6BB01064360 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (13, 1, 2, 17, 1, 6, 11, CAST(0x0000A6BB01064360 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (14, 1, 2, 18, 1, 6, 11, CAST(0x0000A6BB01064360 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (15, 1, 2, 19, 1, 6, 11, CAST(0x0000A6BB01064360 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (16, 1, 2, 20, 1, 6, 12, CAST(0x0000A6BB01064360 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (17, 1, 3, 36, 2, 34, 35, CAST(0x0000A6BE00F5CE97 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (18, 1, 3, 37, 2, 34, 35, CAST(0x0000A6BE00F5CE98 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (19, 1, 3, 38, 2, 34, 35, CAST(0x0000A6BE00F5CE98 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (20, 1, 3, 39, 2, 34, 35, CAST(0x0000A6BE00F5CE99 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (21, 1, 4, 40, 2, 34, 35, CAST(0x0000A6BE00F622FA AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (22, 1, 4, 41, 2, 34, 35, CAST(0x0000A6BE00F622FB AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (23, 1, 4, 42, 2, 34, 35, CAST(0x0000A6BE00F622FB AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (24, 1, 4, 43, 2, 34, 35, CAST(0x0000A6BE00F622FB AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (25, 1, 5, 47, 3, 45, 46, CAST(0x0000A6BE00F67299 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (26, 1, 5, 48, 3, 45, 46, CAST(0x0000A6BE00F67299 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (27, 1, 5, 49, 3, 45, 46, CAST(0x0000A6BE00F6729A AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (28, 1, 5, 50, 3, 45, 46, CAST(0x0000A6BE00F6729A AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (29, 1, 5, 51, 3, 45, 46, CAST(0x0000A6BE00F6729A AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (30, 1, 6, 44, 3, 45, 46, CAST(0x0000A6BE00F6E911 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (48, 1, 10, 65, 5, 63, 64, CAST(0x0000A6C101162D65 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (49, 1, 10, 69, 5, 67, 68, CAST(0x0000A6C101162D65 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (50, 1, 9, 59, 5, 56, 57, CAST(0x0000A6C101168B39 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (51, 1, 9, 69, 5, 67, 68, CAST(0x0000A6C101168B3A AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (68, 1, 7, 54, 4, 52, 53, CAST(0x0000A6C1011E91F8 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (69, 1, 7, 55, 4, 52, 53, CAST(0x0000A6C1011E91F8 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (72, 1, 8, 58, 5, 56, 57, CAST(0x0000A6C1011FE975 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (73, 1, 8, 59, 5, 56, 57, CAST(0x0000A6C1011FE976 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (74, 1, 8, 60, 5, 56, 57, CAST(0x0000A6C1011FE976 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (75, 1, 8, 61, 5, 56, 57, CAST(0x0000A6C1011FE976 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (76, 1, 8, 62, 5, 56, 57, CAST(0x0000A6C1011FE977 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[PERMSN_GRP_ASSOC] ([PERMSN_GRP_ASSOC_KEY], [ROW_STS_KEY], [PERMSN_GRP_KEY], [PERMSN_KEY], [MDUL_ID], [MNU_ID], [SUB_MNU_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (77, 1, 8, 69, 5, 67, 68, CAST(0x0000A6C1011FE977 AS DateTime), 3, NULL, NULL)
SET IDENTITY_INSERT [dbo].[PERMSN_GRP_ASSOC] OFF
SET IDENTITY_INSERT [dbo].[APPL_ROLE] ON 

INSERT [dbo].[APPL_ROLE] ([APPL_ROLE_KEY], [ROW_STS_KEY], [APPL_ROLE_NM], [APPL_ROLE_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID], [USER_TYP_KEY]) VALUES (1, 1, N'Web App Admin', N'Allows the user to manage entire Web App Admin functionalities', NULL, CAST(0x0000A6BB00B70408 AS DateTime), 3, NULL, NULL, 16)
INSERT [dbo].[APPL_ROLE] ([APPL_ROLE_KEY], [ROW_STS_KEY], [APPL_ROLE_NM], [APPL_ROLE_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID], [USER_TYP_KEY]) VALUES (2, 2, N'Manage Roles', N'Allows the user to manage roles', NULL, CAST(0x0000A6BB01067582 AS DateTime), 3, NULL, NULL, 16)
INSERT [dbo].[APPL_ROLE] ([APPL_ROLE_KEY], [ROW_STS_KEY], [APPL_ROLE_NM], [APPL_ROLE_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID], [USER_TYP_KEY]) VALUES (3, 1, N'Engagement Coordinator', N'Allows the user to Add, View, Update and Delete the engagement', NULL, CAST(0x0000A6BE00FB9A87 AS DateTime), 3, CAST(0x0000A6BE00FB9A87 AS DateTime), 3, 16)
INSERT [dbo].[APPL_ROLE] ([APPL_ROLE_KEY], [ROW_STS_KEY], [APPL_ROLE_NM], [APPL_ROLE_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID], [USER_TYP_KEY]) VALUES (4, 1, N'Optum Engagement Lead', N'Allows the user to Manage Users to services, and Lock/ Unlock the service data', NULL, CAST(0x0000A6BE00FBE776 AS DateTime), 3, CAST(0x0000A6BE00FBE776 AS DateTime), 3, 16)
INSERT [dbo].[APPL_ROLE] ([APPL_ROLE_KEY], [ROW_STS_KEY], [APPL_ROLE_NM], [APPL_ROLE_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID], [USER_TYP_KEY]) VALUES (5, 1, N'Partner Engagement Lead', N'Allows the user to Manage Users (Add, View, Update and Delete) to services, and Lock the service data', NULL, CAST(0x0000A6BE00FC2845 AS DateTime), 3, CAST(0x0000A6BE00FC2845 AS DateTime), 3, 18)
INSERT [dbo].[APPL_ROLE] ([APPL_ROLE_KEY], [ROW_STS_KEY], [APPL_ROLE_NM], [APPL_ROLE_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID], [USER_TYP_KEY]) VALUES (6, 1, N'Partner Engagement Analyst', N'Allows the user to Manage documents to services, and allows the user to Lock the services data', NULL, CAST(0x0000A6BE00FD0DF7 AS DateTime), 3, CAST(0x0000A6BE00FD0DF7 AS DateTime), 3, 18)
INSERT [dbo].[APPL_ROLE] ([APPL_ROLE_KEY], [ROW_STS_KEY], [APPL_ROLE_NM], [APPL_ROLE_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID], [USER_TYP_KEY]) VALUES (7, 1, N'Optum Engagement Analyst', N'Allows the user to Manage documents to services, and allows the user to Lock the services data', NULL, CAST(0x0000A6BE00FD457A AS DateTime), 3, CAST(0x0000A6BE00FD457A AS DateTime), 3, 16)
INSERT [dbo].[APPL_ROLE] ([APPL_ROLE_KEY], [ROW_STS_KEY], [APPL_ROLE_NM], [APPL_ROLE_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID], [USER_TYP_KEY]) VALUES (8, 1, N'Client Engagement User', N'Allows the user to view the Engagement data', NULL, CAST(0x0000A6BE00FD839E AS DateTime), 3, CAST(0x0000A6BE00FD839E AS DateTime), 3, 17)
INSERT [dbo].[APPL_ROLE] ([APPL_ROLE_KEY], [ROW_STS_KEY], [APPL_ROLE_NM], [APPL_ROLE_DESC], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID], [USER_TYP_KEY]) VALUES (9, 1, N'Remediation Coordinator', N'Remediation Coordinator', NULL, CAST(0x0000A6BE00FDD51E AS DateTime), 3, CAST(0x0000A6BE00FDD51E AS DateTime), 3, 16)

SET IDENTITY_INSERT [dbo].[APPL_ROLE] OFF
SET IDENTITY_INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ON 

INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (1, 1, 1, 1, CAST(0x0000A6BB00B71869 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (2, 1, 2, 2, CAST(0x0000A6BB0106AFDF AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (3, 1, 3, 3, CAST(0x0000A6BE00FB9A88 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (4, 1, 4, 7, CAST(0x0000A6BE00FBE776 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (5, 1, 4, 8, CAST(0x0000A6BE00FBE776 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (6, 1, 4, 6, CAST(0x0000A6BE00FBE777 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (7, 1, 4, 5, CAST(0x0000A6BE00FBE777 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (8, 1, 4, 4, CAST(0x0000A6BE00FBE777 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (9, 1, 5, 9, CAST(0x0000A6BE00FC2845 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (10, 1, 5, 5, CAST(0x0000A6BE00FC2846 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (11, 1, 5, 4, CAST(0x0000A6BE00FC2846 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (12, 1, 6, 9, CAST(0x0000A6BE00FD0DF7 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (13, 1, 6, 5, CAST(0x0000A6BE00FD0DF8 AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (14, 1, 7, 7, CAST(0x0000A6BE00FD457A AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (15, 1, 7, 8, CAST(0x0000A6BE00FD457A AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (16, 1, 7, 6, CAST(0x0000A6BE00FD457B AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (17, 1, 7, 5, CAST(0x0000A6BE00FD457C AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (18, 1, 8, 9, CAST(0x0000A6BE00FD839E AS DateTime), 3, NULL, NULL)
INSERT [dbo].[APPL_ROLE_PERMSN_GRP] ([USER_ROLE_PERMSN_GRP_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [PERMSN_GRP_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (19, 1, 9, 10, CAST(0x0000A6BE00FDD51E AS DateTime), 3, NULL, NULL)
SET IDENTITY_INSERT [dbo].[APPL_ROLE_PERMSN_GRP] OFF



SET IDENTITY_INSERT [dbo].[USER_PRFL] ON 

INSERT [dbo].[USER_PRFL] ([USER_ID], [ROW_STS_KEY], [ORG_KEY], [USER_TYP_KEY], [FST_NM], [LST_NM], [MIDL_NM], [JOB_TITL_NM], [EMAIL_ID], [TEL_NBR], [MAC_ADR_NM], [USER_VERF_IND], [LCK_IND], [LOGIN_ATMPT_CNT], [LST_LOGIN_DT], [PSWD_RSET_DT], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (1, 1, 1, 16, N'Super', N'Ten', N'', N'', N'ossadmin@healthitplus.net', N'', NULL, 1, 0, 0, GETDATE(), GETDATE(), NULL, GETDATE(), '2', NULL, NULL)
INSERT [dbo].[USER_PRFL] ([USER_ID], [ROW_STS_KEY], [ORG_KEY], [USER_TYP_KEY], [FST_NM], [LST_NM], [MIDL_NM], [JOB_TITL_NM], [EMAIL_ID], [TEL_NBR], [MAC_ADR_NM], [USER_VERF_IND], [LCK_IND], [LOGIN_ATMPT_CNT], [LST_LOGIN_DT], [PSWD_RSET_DT], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (2, 1, 1, 16, N'ETL', N'Admin', N'', N'', N'odsdevadmin@healthitplus.net', N'', NULL, 1, 0, 0, GETDATE(), GETDATE(), NULL, GETDATE(), '2', NULL, NULL)
INSERT [dbo].[USER_PRFL] ([USER_ID], [ROW_STS_KEY], [ORG_KEY], [USER_TYP_KEY], [FST_NM], [LST_NM], [MIDL_NM], [JOB_TITL_NM], [EMAIL_ID], [TEL_NBR], [MAC_ADR_NM], [USER_VERF_IND], [LCK_IND], [LOGIN_ATMPT_CNT], [LST_LOGIN_DT], [PSWD_RSET_DT], [STS_COMMT_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (3, 1, 1, 16, N'CStest', N'10', N'', N'', N'ossdevadmin@healthitplus.net', N'', NULL, 1, 0, 0, GETDATE(), GETDATE(), NULL, GETDATE(), '2', NULL, NULL)
SET IDENTITY_INSERT [dbo].[USER_PRFL] OFF

SET IDENTITY_INSERT [dbo].[USER_APPL_ROLE] ON 

INSERT [dbo].[USER_APPL_ROLE] ([USER_APPL_ROLE_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [USER_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (1, 1, 1, 1, CAST(0x0000A6BB00B8735F AS DateTime), 1, NULL, NULL)
INSERT [dbo].[USER_APPL_ROLE] ([USER_APPL_ROLE_KEY], [ROW_STS_KEY], [APPL_ROLE_KEY], [USER_ID], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (2, 1, 2, 3, CAST(0x0000A6BB00D4AD85 AS DateTime), 1, NULL, NULL)

SET IDENTITY_INSERT [dbo].[USER_APPL_ROLE] OFF
SET IDENTITY_INSERT [USER_SECUR_DTL] ON
INSERT [dbo].[USER_SECUR_DTL] ([USER_SECUR_DTL_KEY], [ROW_STS_KEY], [USER_ID], [SECUR_QUES_KEY], [ANS_TXT], [SEQ_ORDR_NBR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) 
VALUES (1, 1, 1, 20, N'Optum', 0, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[USER_SECUR_DTL] ([USER_SECUR_DTL_KEY], [ROW_STS_KEY], [USER_ID], [SECUR_QUES_KEY], [ANS_TXT], [SEQ_ORDR_NBR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) 
VALUES (2, 1, 1, 21, N'Optum', 0, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[USER_SECUR_DTL] ([USER_SECUR_DTL_KEY], [ROW_STS_KEY], [USER_ID], [SECUR_QUES_KEY], [ANS_TXT], [SEQ_ORDR_NBR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) 
VALUES (3, 1, 1, 22, N'Optum', 0, GETDATE(), 1, NULL, NULL)
SET IDENTITY_INSERT [USER_SECUR_DTL] OFF


GO
SET IDENTITY_INSERT [dbo].[NTF_MSG] ON 

INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (1, 1, N'MAIL_USER_ACCOUNT_CREATION', N'Your Optum Security Web Portal account has been created', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/><br/>
Thank you for enrolling and welcome to the Optum Security Web Portal.
<br/><br/>
Your Optum Security Web Portal account with username $$USER_EMAIL$$ has been successfully created.  A notification email containing your account password will be sent shortly.
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.430' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (2, 1, N'MAIL_USER_PASSWORD_CREATION', N'Your Optum Security Web Portal account password', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/><br/>
Your Optum Security Web Portal one-time use password is  $$USER_PASSWORD$$
<br/><br/>
Log in to the Optum Security Web Portal with your username and this password. Once you log in successfully, you will be required to change this password.
<br/><br/>
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.430' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (3, 1, N'MAIL_USER_PROFILE_PASSWORD_CHANGED', N'Your Optum Security Web Portal password has been changed', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/><br/>
The password for your Optum Security Web Portal account with username "$$USER_NAME$$" was successfully changed. You may log in to Optum Security Web Portal with your new password.
<br/><br/>
If you did not make this change, please contact the portal administrator.
<br/>
<br/>
<br/><br/>
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.440' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (4, 1, N'MAIL_TO_ADMIN_IF_USER_CHANGES_PASSWORD_FIRST_TIME', N'Password for Optum Security Web Portal account with username “$$USER_NAME$$” has been changed', N'$$IMG$$<br/><br/>
Dear $$ADMIN_NAME$$,
<br/><br/>
The password for Optum Security Web Portal account with username "$$USER_NAME$$" has been successfully changed. 
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.437' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (5, 1, N'MAIL_USER_PROFILE_PASSWORD_UPDATE', N'Your Optum Security Web Portal profile has been updated', N'$$IMG$$<br/><br/>
Dear $$USER_NAME_1$$,
<br/><br/>
Your Optum Security Web Portal profile "$$USER_NAME_2$$" was successfully updated. You may log in to Optum Security Web Portal to access your account. 
<br/><br/>
If you did not make changes to your account profile, please contact the portal administrator.
<br/>
<br/>
<br/><br/>
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.430' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (6, 1, N'MAIL_USER_ACCOUNT_DEACTIVATED', N'Your Optum Security Web Portal account has been deactivated', N'$$IMG$$<br/><br/>
Dear $$USER_NAME_1$$,
<br/><br/>
Your Optum Security Web Portal account with username "$$USER_NAME_2$$" was deactivated. 
<br/><br/>
Please contact the portal administrator.
<br/><br/>
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.430' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (7, 1, N'MAIL_USER_ACCOUNT_REACTIVATED', N'Your Optum Security Web Portal account has been reactivated', N'$$IMG$$<br/><br/>
Dear $$USER_NAME_1$$,
<br/><br/>
Your Optum Security Web Portal account with username "$$USER_NAME_2$$" was reactivated. A temporary password will be sent in a separate email.
<br/><br/>
If you did not request the account reactivation, please contact the portal administrator.
<br/>
<br/><br/>
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.430' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (8, 1, N'MAIL_ON_NOTIFY_ACCOUNT_PASSWORD_EXPIRATION', N'Your Optum Security Web Portal account password is about to expire', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/>
Your Optum Security Web Portal account password is about to expire. You must log in and change the password before “$$DATE_OF_EXPIRATION$$” to prevent your account from being locked. 
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-09-08 08:05:22.220' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (9, 1, N'MAIL_USER_ACCOUNT_LOCKED', N'Your Optum Security Web Portal account has been locked', N'$$IMG$$<br/><br/>
Dear $$USER_NAME_1$$,
<br/>
Your Optum Security Web Portal account with username "$$USER_NAME_1$$" was locked because the maximum number of incorrect login attempts was exceeded/of account inactivity for the past 60 days/you failed to provide correct answers to the security questions. 
<br/><br/>
Please contact the portal administrator for assistance.
<br/><br/>
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.430' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (10, 1, N'MAIL_TO_ADMIN_USER_ACCOUNT_LOCKED', N'Optum Security Web Portal account with username “$$USER_NAME_1$$” has been locked', N'$$IMG$$<br/><br/>
Dear $$USER_NAME_1$$,
<br/>
The Optum Security Web Portal account with username "$$LOCKED_USER_NAME$$" was locked because the maximum number of incorrect login attempts was exceeded/of inactivity for the past 60 days/the user failed to provide correct answers to the security questions. 
<br/><br/>
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.430' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (11, 1, N'MAIL_USER_ACCOUNT_UNLOCKED', N'Your Optum Security Web Portal account has been unlocked', N'$$IMG$$<br/><br/> 
Dear $$USER_NAME_1$$,
<br/><br/>
Your Optum Security Web Portal account with username "$$USER_NAME_2$$" was unlocked and the one-time use Password is $$PASSWORD$$ <br/>
<br/><br/>
You may login to the Optum Security Web Portal with your username and this password. 
<br/>
Once you log in successfully, you will be required to change this password.
<br/>
<br/><br/>
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>
', CAST(N'2016-07-20 13:00:27.430' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (12, 1, N'EMAIL_USER_LOGGEING_FROM_DIFFERENT_BROWSER', N'New log in from < browser/device >', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/><br/>
Your Optum Security Web Portal account with username "$$USER_NAME$$" was recently accessed from a new <device/browser>.
<br/>
If you did not initiate this activity, please contact the portal administrator.
<br/><br/>
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.433' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (13, 1, N'MAIL_ENGMNT_CREATION', N'Engagement "$$ENG_CODE$$" has been created', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/><br/>
The engagement “$$ENG_CODE$$” was successfully created with the following engagement details:
<br/><br/>
Engagement Code: $$ENG_CODE$$<br/>
Client Name: $$CLNT_ORG_NAME$$<br/>
Engagement Package Name: $$PKG_NAME$$<br/>
Projected Engagement Start Date: $$ENG_STRT_DATE$$<br/>
<br/><br/>
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.433' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (14, 1, N'MAIL_ENGMNT_UPDATION', N'Engagement details for the “$$ENG_CODE$$” have been updated', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/><br/>
The engagement details for the “$$ENG_CODE$$” were successfully updated by $$UPDATED_USER_NAME$$ as follows:
<br/><br/>
Engagement Code: $$ENG_CODE$$<br/>
Client Name: $$CLNT_ORG_NAME$$<br/>
Engagement Package Name: $$PKG_NAME$$<br/>
Projected Engagement Start Date: $$ENG_STRT_DATE$$<br/>
<br/><br/>
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.433' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (15, 1, N'MAIL_ASSIGN_CLIENT_ENGMNT_LEAD', N'Point of Contact for Engagement “$$ENG_CODE$$” ', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/><br/>
You have been assigned as the Engagement Lead for the engagement “$$ENG_CODE$$”. <br/>
If you believe this assignment is in error, please contact the portal administrator immediately.
<br/><br/>
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.433' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (16, 1, N'MAIL_ASSIGN_PARTNER_ENGMNT_LEAD', N'Engagement “$$ENG_CODE$$” is assigned', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/><br/>
You have been assigned as the Engagement Lead for the engagement “$$ENG_CODE$$”. 
<br/>
If you believe this assignment is in error, please contact the portal administrator immediately.
<br/><br/>
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.433' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (17, 1, N'MAIL_ASSIGN_USER_SCHDULE', N'Engagement “$$ENG_CODE$$” has been scheduled', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/><br/>
You have been assigned to engagement “$$ENG_CODE$$” by $$ENGMENT_SCHEDULED_BY$$.
<br/>
Please log in with your username and password to begin performing your tasks as specified by $$ENGMENT_LEAD$$.
<br/>
Please contact $$ENGMENT_LEAD$$ with any questions or concerns.
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.437' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (18, 1, N'MAIL_REASSIGN_USER_SCHDULE', N'Engagement “$$ENG_CODE$$” has been reassigned', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/><br/>
The engagement “$$ENG_CODE$$” has been reassigned to another $$ANLST_OR_PRTNR$$ $$ASSIGNED_TO$$.
<br/>
Please ensure that any documents, files, or relevant work materials relating to this engagement are transferred to $$ASSIGNED_BY$$ and removed from your laptop or personal network drives.
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.437' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (19, 1, N'MAIL_ENGMNT_DUE_DATE_PASSED', N'Engagement “$$ENG_CODE$$” Service due date has passed', N'$$IMG$$<br/><br/> 
Dear $$USER_NAME$$,
<br/><br/>
The engagement “$$ENG_CODE$$ $$SERVICE_NAME$$” due date has passed.
<br/>
Please contact $$ENGMENT_LEAD$$ to provide an estimated completion date. You should log in to the Security Web Portal to complete your tasks as soon as possible.
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved.</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.437' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (20, 1, N'MAIL_ENGMNT_DUE_DATE_APRCHD', N'Engagement “$$ENG_CODE$$” due date is approaching', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/><br/>
The engagement “$$ENG_CODE$$” is due within 15 days of the estimated completion date. 
<br/>
If this date is in danger of not being met, contact the client and Director of Commercial Services to provide an update. Log in to your engagement  $$ENG_CODE$$ to view its details and update completion dates accordingly. Also update PPM Optics to reflect any changes in completion dates.
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.437' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (21, 1, N'MAIL_TO_ENGMNT_LEAD_DUE_DATE_PASSED', N'Engagement “$$ENG_CODE$$” due date has passed', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/><br/>
The engagement “$$ENG_CODE$$” due date has passed. 
<br/>
Please contact your Director of Commercial Services to provide an estimated completion date. Log in to your engagement $$ENG_CODE$$ to view its details.
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.437' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (22, 1, N'MAIL_TO_ENGMNTPARTNER_LEAD_FILE_UPLOAD', N'File for Engagement “$$ENG_CODE$$” service “$$SERVICE_NAME$$” has been uploaded', N'$$IMG$$<br/><br/>
Dear $$ENG_LEAD$$,
<br/>
The file "$$FILE_NAME$$" for engagement “$$ENG_CODE$$” service “$$SERVICE_NAME$$”  has been successfully uploaded. 
<br/>
Please log in with your username and password to view its details.
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.440' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (23, 1, N'MAIL_TO_ENGMNTPARTNER_LEAD_ON_ALL_SERVICES_UPLOAD', N'File(s) for all services of Engagement “$$ENG_CODE$$” has been uploaded', N'$$IMG$$<br/><br/>
Dear $$ENG_LEAD$$,
<br/>
The following file(s) for the engagement “$$ENG_CODE$$” has been uploaded:
<br/>
<table><tr><th>&nbsp;</th><th>File</th><th>Uploaded By</th></tr>
$$HTML_CONTENT_OF_FILE$$
</table>
<br/>
Please log in with your username and password to view its details.
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.440' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (24, 1, N'MAIL_TO_FILE_UPLOADED_USER_ON_MALICIOUS_FILE', N'File uploaded for Engagement “$$ENG_CODE$$” has failed', N'$$IMG$$<br/><br/>
Dear "$$ANALYST$$",
<br/>
The file “$$FILE_NAME$$” that you uploaded on $$DATE_TIME_STAMP$$ for engagement “$$ENG_CODE$$” has failed because it may contain a malicious threat.  
<br/>
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.440' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (25, 1, N'MAIL_TO_LEAD_USER_ON_MALICIOUS_FILE_UPLOAD', N'File uploaded for Engagement “$$ENG_CODE$$” has failed', N'$$IMG$$<br/><br/>
Dear "$$LEAD$$",
<br/>
The file “$$FILE_NAME$$” uploaded by $$ANALYST$$ on $$DATE_TIME_STAMP$$ for engagement “$$ENG_CODE$$” has failed because it may contain a malicious threat.
<br/>
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.440' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (26, 1, N'MAIL_TO_ENGMNT_ANALYST_ON_LOCK_SERVICE', N'Service “$$SERVICE_NAME$$” for engagement “$$ENG_CODE$$” has been locked', N'$$IMG$$<br/><br/>
Dear "$$ENG_ANALYST$$",
<br/>
The Service “$$SERVICE_NAME$$” for engagement “$$ENG_CODE$$” has been locked. You can no longer upload any files.
<br/>
Please contact the portal administrator.
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.440' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (27, 1, N'MAIL_TO_ENGMNT_ANALYST_ON_UNLOCK_SERVICE', N'Service “$$SERVICE_NAME$$” for engagement “$$ENG_CODE$$” has been unlocked', N'$$IMG$$<br/><br/>
Dear "$$ENG_ANALYST$$",
<br/>
The Service “$$SERVICE_NAME$$” for engagement “$$ENG_CODE$$” has been unlocked. You may log in and upload the required file(s).
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-07-20 13:00:27.440' AS DateTime), 1, NULL, NULL)
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (28, 1, N'MAIL_ENGMT_PUBLISHED', N' Engagement “$$ENG_CODE$$” final report has been published', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/>
The Reports and Dashboard for engagement “$$ENG_CODE$$” have been published to the Web Portal.
<br/>
To view details, log in with your username and password.
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(N'2016-05-11 14:27:16.737' AS DateTime), 1, NULL, NULL)
 INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) 
 VALUES (29, 1, N'MAIL_ADMIN_CLIENT_ONBOARD_SUCCESS', N'Your Client Organization has been onboarded', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/>
The client organization $$CLIENT_ORG_NAME$$ has been successfully onboarded. 
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(0x0000A60300EE348D AS DateTime), 1, NULL, NULL)

-- 30.      Application creates an Client Organization and sends notification to the Web Application Administrator - onboard fail
INSERT [dbo].[NTF_MSG] ([NTF_MSG_KEY], [ROW_STS_KEY], [NTF_TYP_NM], [MSG_SBJ_TXT], [MSG_CNTN_TXT], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) 
VALUES (30, 1, N'MAIL_ADMIN_CLIENT_ONBOARD_FAIL', N'Onboarding of your Client Organization has been failed', N'$$IMG$$<br/><br/>
Dear $$USER_NAME$$,
<br/>
Onboarding of your client organization $$CLIENT_ORG_NAME$$ has been failed. Please contact the system administrator.
<br/><br/>
Regards,<br/>
System Administrator<br/>
Optum Technology.<br/><br/>
<center>&#169; Optum Inc., $$YEAR$$ - All Rights Reserved</center><br/><br/><br/>', CAST(0x0000A60300EE348D AS DateTime), 1, NULL, NULL)
SET IDENTITY_INSERT [dbo].[NTF_MSG] OFF




INSERT [dbo].[SECUR_PKG] ([SECUR_PKG_CD], [ROW_STS_KEY], [SECUR_PKG_NM], [SECUR_PKG_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'HC', 1, N'Health Check', N'This Service Package offering will look to exploit a client''s security vulnerabilities, which may lead to a security breach.  The Package will also include a proactive analysis to determine if a breach has already occurred or is in progress.  This information will allow the guidance in the prioritization and remediation of risks with the client''s current environment.  Examples of Security Assessment Services for Health Check include, but are not limited to; Threat Hunting, Limited Red Team Exercises, and Vulnerability Scanning.   (Point In Time)', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_PKG] ([SECUR_PKG_CD], [ROW_STS_KEY], [SECUR_PKG_NM], [SECUR_PKG_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TR', 1, N'Triage', N'This Service Package offering will focus on identification of people, process and technology risks associated with the evolving cyber threat environment.  This includes mapping of risk findings to various compliance frameworks such as HIPAA/HITECH, PCI DSS, FDA regulations etc.  A "Get Well Plan" with an actionable Roadmap will be a deliveriable out of this Service Package.  Examples of Security Assessment Services for Triage include, but are not limited to; Penetration Testing, Security Risk Assessment, Wireless Risk Assessment, Vulnerability Scanning, Compliance and Remediation.  (Point In Time)', GETDATE(), 1, NULL, NULL)



INSERT [dbo].[SECUR_SRVC] ([SECUR_SRVC_CD], [ROW_STS_KEY], [SECUR_SRVC_NM], [SECUR_SRVC_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'AC', 2, N'Architecture Compliance Assessment', N'The IT Architecture assessment evaluates a client''s enterprise current state against it''s 3-5 year Strategic IT Plan to define changes required to satisfy future state architectural and control-based requirements.', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_SRVC] ([SECUR_SRVC_CD], [ROW_STS_KEY], [SECUR_SRVC_NM], [SECUR_SRVC_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'AV', 1, N'Application Vulnerability Assessment', N'A application vulnerability assessment is the process of testing, reviewing and analyzing an application and related components for possible security vulnerabilities. It is used to evaluate the application architecture against possible threats through the application layer.', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_SRVC] ([SECUR_SRVC_CD], [ROW_STS_KEY], [SECUR_SRVC_NM], [SECUR_SRVC_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'NV', 1, N'Network Vulnerability Assessment', N'A network vulnerability assessment is the process of testing, reviewing and analyzing computer network assets for possible security vulnerabilities. It is used to evaluate the security architecture and defense of a network against possible threats.', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_SRVC] ([SECUR_SRVC_CD], [ROW_STS_KEY], [SECUR_SRVC_NM], [SECUR_SRVC_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'PT', 1, N'Penetration Testing', N'Penetration testing (pentest) is a short term and targeted exercise against the computer system to exploint vulnerabilities and gain access to the client''s IT infrastructure, application, network, and data component''s.', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_SRVC] ([SECUR_SRVC_CD], [ROW_STS_KEY], [SECUR_SRVC_NM], [SECUR_SRVC_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RT', 1, N'Limited Red Team Assessment', N'Limited Red Team assessments consist of an independent group of highly skilled security Subject Matter Experts that will similate an attack against the clients digital infrastructure to test the client''s security defenses.', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_SRVC] ([SECUR_SRVC_CD], [ROW_STS_KEY], [SECUR_SRVC_NM], [SECUR_SRVC_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'SR', 1, N'Security Risk Assessment', N'A Security Risk Assessment is an objective analysis of the effectiveness of the current security controls that protect an organization''s assets and determination of the probability of losses to assets.', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_SRVC] ([SECUR_SRVC_CD], [ROW_STS_KEY], [SECUR_SRVC_NM], [SECUR_SRVC_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TH', 1, N'Threat Hunting (Cyber Intelligence Services)', N'Threat Hunting refers to a network discovery against known Indicators of Compromise (IoC).  The goals is to identify malicious activity beyond traditional security solutions.  It can include both manual and machine-assisted tecniques.', GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_SRVC] ([SECUR_SRVC_CD], [ROW_STS_KEY], [SECUR_SRVC_NM], [SECUR_SRVC_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'WR', 1, N'Wireless Risk Assessment', N'A Wireless Risk Assessment is the process of testing, reviewing and analyzing a wireless network and related components to ensure the network  is hardened against unauthorized actors attacking the client''s resources.', GETDATE(), 1, NULL, NULL)



INSERT [dbo].[SECUR_PKG_OFR] ([SECUR_PKG_CD], [SECUR_SRVC_CD], [ROW_STS_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'HC', N'AV', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_PKG_OFR] ([SECUR_PKG_CD], [SECUR_SRVC_CD], [ROW_STS_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'HC', N'NV', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_PKG_OFR] ([SECUR_PKG_CD], [SECUR_SRVC_CD], [ROW_STS_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'HC', N'RT', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_PKG_OFR] ([SECUR_PKG_CD], [SECUR_SRVC_CD], [ROW_STS_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'HC', N'TH', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_PKG_OFR] ([SECUR_PKG_CD], [SECUR_SRVC_CD], [ROW_STS_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TR', N'AC', 2, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_PKG_OFR] ([SECUR_PKG_CD], [SECUR_SRVC_CD], [ROW_STS_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TR', N'AV', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_PKG_OFR] ([SECUR_PKG_CD], [SECUR_SRVC_CD], [ROW_STS_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TR', N'NV', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_PKG_OFR] ([SECUR_PKG_CD], [SECUR_SRVC_CD], [ROW_STS_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TR', N'PT', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_PKG_OFR] ([SECUR_PKG_CD], [SECUR_SRVC_CD], [ROW_STS_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TR', N'SR', 1, GETDATE(), 1, NULL, NULL)
INSERT [dbo].[SECUR_PKG_OFR] ([SECUR_PKG_CD], [SECUR_SRVC_CD], [ROW_STS_KEY], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'TR', N'WR', 1, GETDATE(), 1, NULL, NULL)



SET IDENTITY_INSERT [dbo].[CVSS_SCOR_MTRC] ON 

INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (1, N'2.0', N'Base Metric', N'Access Vector', N'AV', N'Local', N'L', CAST(0.395 AS Decimal(10, 3)), 1, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (2, N'2.0', N'Base Metric', N'Access Vector', N'AV', N'Adjacent_Network', N'A', CAST(0.646 AS Decimal(10, 3)), 1, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (3, N'2.0', N'Base Metric', N'Access Vector', N'AV', N'Network', N'N', CAST(1.000 AS Decimal(10, 3)), 1, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (4, N'2.0', N'Base Metric', N'Access Complexity', N'AC', N'High', N'H', CAST(0.350 AS Decimal(10, 3)), 2, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (5, N'2.0', N'Base Metric', N'Access Complexity', N'AC', N'Medium', N'M', CAST(0.610 AS Decimal(10, 3)), 2, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (6, N'2.0', N'Base Metric', N'Access Complexity', N'AC', N'Low', N'L', CAST(0.710 AS Decimal(10, 3)), 2, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (7, N'2.0', N'Base Metric', N'Authentication', N'Au', N'Multiple_Instances', N'M', CAST(0.450 AS Decimal(10, 3)), 3, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (8, N'2.0', N'Base Metric', N'Authentication', N'Au', N'Single_Instance', N'S', CAST(0.560 AS Decimal(10, 3)), 3, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (9, N'2.0', N'Base Metric', N'Authentication', N'Au', N'None', N'N', CAST(0.704 AS Decimal(10, 3)), 3, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (10, N'2.0', N'Base Metric', N'Confidentiality Impact', N'C', N'None', N'N', CAST(0.000 AS Decimal(10, 3)), 4, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (11, N'2.0', N'Base Metric', N'Confidentiality Impact', N'C', N'Partial', N'P', CAST(0.275 AS Decimal(10, 3)), 4, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (12, N'2.0', N'Base Metric', N'Confidentiality Impact', N'C', N'Complete', N'C', CAST(0.660 AS Decimal(10, 3)), 4, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (13, N'2.0', N'Base Metric', N'Integrity Impact', N'I', N'None', N'N', CAST(0.000 AS Decimal(10, 3)), 5, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (14, N'2.0', N'Base Metric', N'Integrity Impact', N'I', N'Partial', N'P', CAST(0.275 AS Decimal(10, 3)), 5, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (15, N'2.0', N'Base Metric', N'Integrity Impact', N'I', N'Complete', N'C', CAST(0.660 AS Decimal(10, 3)), 5, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (16, N'2.0', N'Base Metric', N'Availability Impact', N'A', N'None', N'N', CAST(0.000 AS Decimal(10, 3)), 6, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (17, N'2.0', N'Base Metric', N'Availability Impact', N'A', N'Partial', N'P', CAST(0.275 AS Decimal(10, 3)), 6, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (18, N'2.0', N'Base Metric', N'Availability Impact', N'A', N'Complete', N'C', CAST(0.660 AS Decimal(10, 3)), 6, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (19, N'2.0', N'Temporal Metric', N'Exploitability', N'E', N'Not Defined', N'ND', CAST(1.000 AS Decimal(10, 3)), 7, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (20, N'2.0', N'Temporal Metric', N'Exploitability', N'E', N'Unproven that exploit exists', N'U', CAST(0.850 AS Decimal(10, 3)), 7, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (21, N'2.0', N'Temporal Metric', N'Exploitability', N'E', N'Proof of concept code', N'POC', CAST(0.900 AS Decimal(10, 3)), 7, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (22, N'2.0', N'Temporal Metric', N'Exploitability', N'E', N'Functional exploit exists', N'F', CAST(0.950 AS Decimal(10, 3)), 7, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (23, N'2.0', N'Temporal Metric', N'Exploitability', N'E', N'High', N'H', CAST(1.000 AS Decimal(10, 3)), 7, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (24, N'2.0', N'Temporal Metric', N'Remediation Level', N'RL', N'Not Defined', N'ND', CAST(1.000 AS Decimal(10, 3)), 8, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (25, N'2.0', N'Temporal Metric', N'Remediation Level', N'RL', N'Official fix', N'OF', CAST(0.870 AS Decimal(10, 3)), 8, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (26, N'2.0', N'Temporal Metric', N'Remediation Level', N'RL', N'Temporary fix', N'TF', CAST(0.900 AS Decimal(10, 3)), 8, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (27, N'2.0', N'Temporal Metric', N'Remediation Level', N'RL', N'Workaround', N'W', CAST(0.950 AS Decimal(10, 3)), 8, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (28, N'2.0', N'Temporal Metric', N'Remediation Level', N'RL', N'Unavailable', N'U', CAST(1.000 AS Decimal(10, 3)), 8, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (29, N'2.0', N'Temporal Metric', N'Report Confidence', N'RC', N'Not Defined', N'ND', CAST(1.000 AS Decimal(10, 3)), 9, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (30, N'2.0', N'Temporal Metric', N'Report Confidence', N'RC', N'Unconfirmed', N'UC', CAST(0.900 AS Decimal(10, 3)), 9, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (31, N'2.0', N'Temporal Metric', N'Report Confidence', N'RC', N'Uncorroborated', N'UR', CAST(0.950 AS Decimal(10, 3)), 9, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (32, N'2.0', N'Temporal Metric', N'Report Confidence', N'RC', N'Confirmed', N'C', CAST(1.000 AS Decimal(10, 3)), 9, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (33, N'2.0', N'Environmental Metric', N'Collateral Damage Potential', N'CDP', N'Not Defined', N'ND', CAST(0.000 AS Decimal(10, 3)), 10, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (34, N'2.0', N'Environmental Metric', N'Collateral Damage Potential', N'CDP', N'None', N'N', CAST(0.000 AS Decimal(10, 3)), 10, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (35, N'2.0', N'Environmental Metric', N'Collateral Damage Potential', N'CDP', N'Low (light loss)', N'L', CAST(0.100 AS Decimal(10, 3)), 10, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (36, N'2.0', N'Environmental Metric', N'Collateral Damage Potential', N'CDP', N'Low-Medium', N'LM', CAST(0.300 AS Decimal(10, 3)), 10, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (37, N'2.0', N'Environmental Metric', N'Collateral Damage Potential', N'CDP', N'Medium-High', N'MH', CAST(0.400 AS Decimal(10, 3)), 10, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (38, N'2.0', N'Environmental Metric', N'Collateral Damage Potential', N'CDP', N'High (catastrophic loss)', N'H', CAST(0.500 AS Decimal(10, 3)), 10, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (39, N'2.0', N'Environmental Metric', N'Target Distribution', N'TD', N'Not Defined', N'ND', CAST(1.000 AS Decimal(10, 3)), 11, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (40, N'2.0', N'Environmental Metric', N'Target Distribution', N'TD', N'None 0%', N'N', CAST(0.000 AS Decimal(10, 3)), 11, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (41, N'2.0', N'Environmental Metric', N'Target Distribution', N'TD', N'Low 0-25%', N'L', CAST(0.250 AS Decimal(10, 3)), 11, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (42, N'2.0', N'Environmental Metric', N'Target Distribution', N'TD', N'Medium 26-75%', N'M', CAST(0.750 AS Decimal(10, 3)), 11, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (43, N'2.0', N'Environmental Metric', N'Target Distribution', N'TD', N'High 76-100%', N'H', CAST(1.000 AS Decimal(10, 3)), 11, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (44, N'2.0', N'Environmental Metric', N'Confidentiality Requirement', N'CR', N'Not Defined', N'ND', CAST(1.000 AS Decimal(10, 3)), 12, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (45, N'2.0', N'Environmental Metric', N'Confidentiality Requirement', N'CR', N'Low', N'L', CAST(0.500 AS Decimal(10, 3)), 12, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (46, N'2.0', N'Environmental Metric', N'Confidentiality Requirement', N'CR', N'Medium', N'M', CAST(1.000 AS Decimal(10, 3)), 12, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (47, N'2.0', N'Environmental Metric', N'Confidentiality Requirement', N'CR', N'High', N'H', CAST(1.510 AS Decimal(10, 3)), 12, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (48, N'2.0', N'Environmental Metric', N'Integrity Requirement', N'IR', N'Not Defined', N'ND', CAST(1.000 AS Decimal(10, 3)), 13, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (49, N'2.0', N'Environmental Metric', N'Integrity Requirement', N'IR', N'Low', N'L', CAST(0.500 AS Decimal(10, 3)), 13, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (50, N'2.0', N'Environmental Metric', N'Integrity Requirement', N'IR', N'Medium', N'M', CAST(1.000 AS Decimal(10, 3)), 13, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (51, N'2.0', N'Environmental Metric', N'Integrity Requirement', N'IR', N'High', N'H', CAST(1.510 AS Decimal(10, 3)), 13, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (52, N'2.0', N'Environmental Metric', N'Availability Requirement', N'AR', N'Not Defined', N'ND', CAST(1.000 AS Decimal(10, 3)), 14, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (53, N'2.0', N'Environmental Metric', N'Availability Requirement', N'AR', N'Low', N'L', CAST(0.500 AS Decimal(10, 3)), 14, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (54, N'2.0', N'Environmental Metric', N'Availability Requirement', N'AR', N'Medium', N'M', CAST(1.000 AS Decimal(10, 3)), 14, NULL, NULL, 2, GETDATE())
INSERT [dbo].[CVSS_SCOR_MTRC] ([CVSS_SCOR_MTRC_KEY], [CVSS_VER], [MTRC_GRP_NM], [MTRC_NM], [MTRC_VCTR_CD], [MTRC_VAL_TXT], [MTRC_VAL_VCTR_CD], [MTRC_VAL_SCOR], [VCTR_ORDR], [UPDT_USER_ID], [UPDT_DT], [CREAT_USER_ID], [CREAT_DT]) VALUES (55, N'2.0', N'Environmental Metric', N'Availability Requirement', N'AR', N'High', N'H', CAST(1.510 AS Decimal(10, 3)), 14, NULL, NULL, 2, GETDATE())
SET IDENTITY_INSERT [dbo].[CVSS_SCOR_MTRC] OFF



INSERT [dbo].[RISK_PRBL] ([RISK_PRBL_CD], [RISK_PRBL_NM], [RISK_PRBL_ORDR_NBR], [CVSS_EXPLT_SCOR_MIN], [CVSS_EXPLT_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'A', N'AlmostCertain', 5, CAST(9.00 AS Decimal(10, 2)), CAST(10.00 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)
INSERT [dbo].[RISK_PRBL] ([RISK_PRBL_CD], [RISK_PRBL_NM], [RISK_PRBL_ORDR_NBR], [CVSS_EXPLT_SCOR_MIN], [CVSS_EXPLT_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'I', N'Informational', 0, CAST(0.00 AS Decimal(10, 2)), CAST(0.00 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)
INSERT [dbo].[RISK_PRBL] ([RISK_PRBL_CD], [RISK_PRBL_NM], [RISK_PRBL_ORDR_NBR], [CVSS_EXPLT_SCOR_MIN], [CVSS_EXPLT_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'L', N'Likely', 4, CAST(7.00 AS Decimal(10, 2)), CAST(8.90 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)
INSERT [dbo].[RISK_PRBL] ([RISK_PRBL_CD], [RISK_PRBL_NM], [RISK_PRBL_ORDR_NBR], [CVSS_EXPLT_SCOR_MIN], [CVSS_EXPLT_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'P', N'Possible', 3, CAST(4.00 AS Decimal(10, 2)), CAST(6.90 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)
INSERT [dbo].[RISK_PRBL] ([RISK_PRBL_CD], [RISK_PRBL_NM], [RISK_PRBL_ORDR_NBR], [CVSS_EXPLT_SCOR_MIN], [CVSS_EXPLT_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'R', N'Rare', 1, CAST(0.10 AS Decimal(10, 2)), CAST(1.90 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)
INSERT [dbo].[RISK_PRBL] ([RISK_PRBL_CD], [RISK_PRBL_NM], [RISK_PRBL_ORDR_NBR], [CVSS_EXPLT_SCOR_MIN], [CVSS_EXPLT_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'U', N'Unlikely', 2, CAST(2.00 AS Decimal(10, 2)), CAST(3.90 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)



INSERT [dbo].[RMDTN_CST_EFFRT] ([RMDTN_CST_EFFRT_CD], [RMDTN_CST_EFFRT_NM], [RMDTN_CST_EFFRT_ORDR_NBR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'H', N'High', 3, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[RMDTN_CST_EFFRT] ([RMDTN_CST_EFFRT_CD], [RMDTN_CST_EFFRT_NM], [RMDTN_CST_EFFRT_ORDR_NBR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'L', N'Low', 1, GETDATE(), 2, NULL, NULL)
INSERT [dbo].[RMDTN_CST_EFFRT] ([RMDTN_CST_EFFRT_CD], [RMDTN_CST_EFFRT_NM], [RMDTN_CST_EFFRT_ORDR_NBR], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'M', N'Medium', 2, GETDATE(), 2, NULL, NULL)



INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC1', N'Account Management ', N'Account Termination, Disabling, Reviews', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC10', N'Denial-of-Service ', N'Hardware, software or personnel', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC11', N'Identity Access Management ', N'Identity Access Management', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC12', N'Incident Response ', N'Incident Handling process or Incident handling Training', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC13', N'Information Security Policy', N'Information Security Policy', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC14', N'Access Control ', N'Network, Application, Database, Mobile, Least Privilege, etc.', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC15', N'Logging / Monitoring ', N'Logging, monitoring, notification, etc.', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC16', N'Malicious Code Protection', N'Network, Application, Database, etc.', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC17', N'Network Architecture – segmentation ', N'Application, Network, Database, segregation, etc.', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC18', N'Network Ingress Filtering ', N'Rulesets/ACLs - firewalls, Web Application Filtering, Routers, Switches', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC19', N'Personnel Controls ', N'Pre-hire Screening, Termination Process, etc.', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC2', N'Application Partitioning ', N'Web services from Management functions', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC20', N'Physical Access Mechanisms ', N'Restriction to transmission media/lines, Physical Access Monitoring, Visitor control, environmental controls, etc.', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC21', N'Remote Access ', N'VPN, Multi-Factor Auth, NAT, etc.', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC22', N'Security Awareness Training', N'Security Awareness Training', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC23', N'Security Testing ', N'Operating System/Network, Application, Database, etc.', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC24', N'Separation of Duties ', N'Ops, Development, Privileged/Non-Privileged, etc.', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC25', N'System Access Enforcement ', N'Operating System/Network, Application, Database, Device-Device, etc.', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC26', N'System Security Plan ', N'User rules and responsibilities', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC27', N'System / Application Patching ', N'Periodicity, manual or automated, processes, etc.', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC28', N'Transmission Integrity ', N'Digital signatures, Crypto hashes, etc', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC29', N'Wireless Access ', N'Configuration, Encryption, Testing', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC3', N'Asset Inventory ', N'Software, hardware, etc.', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC4', N'Business Continuity / Disaster Recovery ', N'Backups, hardware, software, processes', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC5', N'Coding Practices ', N'Input validation, forced browsing, SQL injection, error handling, information leakage, etc.', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC6', N'Security Configuration Management', N'Hardware and/or software', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC7', N'Data / System Classification ', N'Data marking, classification, media sanitation, or systems', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC8', N'Data Encryption ', N'Stored or in-transit', GETDATE(), 2, NULL, NULL)

INSERT [dbo].[ROOT_CAUS_ANLYS] ([ROOT_CAUS_ANLYS_CD], [ROOT_CAUS_ANLYS_NM], [ROOT_CAUS_ANLYS_DESC], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'RC9', N'Data Flow Enforcement ', N'Control of sensitive data between systems', GETDATE(), 2, NULL, NULL)




INSERT [dbo].[VULN_IMP] ([VULN_IMP_CD], [VULN_IMP_NM], [VULN_IMP_ORDR_NBR], [CVSS_IMP_SCOR_MIN], [CVSS_IMP_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'C', N'Catastrophic', 5, CAST(9.00 AS Decimal(10, 2)), CAST(10.00 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)
INSERT [dbo].[VULN_IMP] ([VULN_IMP_CD], [VULN_IMP_NM], [VULN_IMP_ORDR_NBR], [CVSS_IMP_SCOR_MIN], [CVSS_IMP_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'I', N'Insignificant', 1, CAST(0.10 AS Decimal(10, 2)), CAST(1.90 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)
INSERT [dbo].[VULN_IMP] ([VULN_IMP_CD], [VULN_IMP_NM], [VULN_IMP_ORDR_NBR], [CVSS_IMP_SCOR_MIN], [CVSS_IMP_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'IF', N'Informational', 0, CAST(0.00 AS Decimal(10, 2)), CAST(0.00 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)
INSERT [dbo].[VULN_IMP] ([VULN_IMP_CD], [VULN_IMP_NM], [VULN_IMP_ORDR_NBR], [CVSS_IMP_SCOR_MIN], [CVSS_IMP_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MO', N'Moderate', 3, CAST(4.00 AS Decimal(10, 2)), CAST(6.90 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)
INSERT [dbo].[VULN_IMP] ([VULN_IMP_CD], [VULN_IMP_NM], [VULN_IMP_ORDR_NBR], [CVSS_IMP_SCOR_MIN], [CVSS_IMP_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MI', N'Minor', 2, CAST(2.00 AS Decimal(10, 2)), CAST(3.90 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)
INSERT [dbo].[VULN_IMP] ([VULN_IMP_CD], [VULN_IMP_NM], [VULN_IMP_ORDR_NBR], [CVSS_IMP_SCOR_MIN], [CVSS_IMP_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'MJ', N'Major', 4, CAST(7.00 AS Decimal(10, 2)), CAST(8.90 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)



INSERT [dbo].[VULN_INSTC_STS] ([VULN_INSTC_STS_CD], [VULN_INSTC_STS_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'C', N'Closed', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[VULN_INSTC_STS] ([VULN_INSTC_STS_CD], [VULN_INSTC_STS_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'CE', N'Closed With Exception', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[VULN_INSTC_STS] ([VULN_INSTC_STS_CD], [VULN_INSTC_STS_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'D', N'Duplicate', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[VULN_INSTC_STS] ([VULN_INSTC_STS_CD], [VULN_INSTC_STS_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'FP', N'False Positive', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[VULN_INSTC_STS] ([VULN_INSTC_STS_CD], [VULN_INSTC_STS_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'O', N'Open', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[VULN_INSTC_STS] ([VULN_INSTC_STS_CD], [VULN_INSTC_STS_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'V', N'Validated', GETDATE(), 2, NULL, NULL)



INSERT [dbo].[VULN_SEV] ([VULN_SEV_CD], [VULN_SEV_NM], [VULN_SEV_ORDR_NBR], [OVALL_SCOR_MIN], [OVALL_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'C', N'Critical', 4, CAST(9.00 AS Decimal(10, 2)), CAST(10.00 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)
INSERT [dbo].[VULN_SEV] ([VULN_SEV_CD], [VULN_SEV_NM], [VULN_SEV_ORDR_NBR], [OVALL_SCOR_MIN], [OVALL_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'H', N'High', 3, CAST(7.00 AS Decimal(10, 2)), CAST(8.90 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)
INSERT [dbo].[VULN_SEV] ([VULN_SEV_CD], [VULN_SEV_NM], [VULN_SEV_ORDR_NBR], [OVALL_SCOR_MIN], [OVALL_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'I', N'Informational', 0, CAST(0.00 AS Decimal(10, 2)), CAST(0.00 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)
INSERT [dbo].[VULN_SEV] ([VULN_SEV_CD], [VULN_SEV_NM], [VULN_SEV_ORDR_NBR], [OVALL_SCOR_MIN], [OVALL_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'L', N'Low', 1, CAST(0.10 AS Decimal(10, 2)), CAST(3.90 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)
INSERT [dbo].[VULN_SEV] ([VULN_SEV_CD], [VULN_SEV_NM], [VULN_SEV_ORDR_NBR], [OVALL_SCOR_MIN], [OVALL_SCOR_MAX], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (N'M', N'Medium', 2, CAST(4.00 AS Decimal(10, 2)), CAST(6.90 AS Decimal(10, 2)), GETDATE(), 2, NULL, NULL)



--Reference table: Having dependency with dbo.MSTR_LKP table


INSERT INTO dbo.CD_XREF (SRC_KEY,REFERRENCE_TYP_NM,TGT_REF_CD,SRC_REF_CD,SRC_REF_NM, CREAT_DT,CREAT_USER_ID,UPDT_DT,UPDT_USER_ID) VALUES

((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Risk Probability', 'A','5','Critical', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Risk Probability', 'L','4','High', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Risk Probability', 'P','3','Medium', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Risk Probability', 'U','2','Low', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Risk Probability', 'R','1','Very Low', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Risk Probability', 'I','0','Info', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Risk Probability', 'A', NULL,'Almost Certain', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Risk Probability', 'L', NULL,'Likely', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Risk Probability', 'P',NULL,'Possible', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Risk Probability', 'U',NULL,'Unlikely', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Risk Probability', 'R',NULL,'Rare', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Impact', 'C','9','Critical', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Impact', 'MJ','8','Very High', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Impact', 'MJ','7','High', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Impact', 'MO','5','Medium', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Impact', 'MI','3','Low', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Impact', 'I','1','Very Low', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Impact', 'IF','0','Info', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Impact', 'C',NULL,'Catastrophic', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Impact', 'MJ',NULL,'Major', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Impact', 'MO',NULL,'Moderate', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Impact', 'MI',NULL,'Minor', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Impact', 'I',NULL,'Insignificant', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Severity', 'C','5','Critical', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Severity', 'H','4','High', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Severity', 'M','3','Medium', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Severity', 'L','2','Low', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Severity', 'L','1','Very Low', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Severity', 'I','0','Informational', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Severity', 'H',NULL,'High Risk', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Severity', 'M',NULL,'Medium Risk', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Vulnerability Severity', 'L',NULL,'Low Risk', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Remediation Cost Effort', 'H','5','Very High', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Remediation Cost Effort', 'H','4','High', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Remediation Cost Effort', 'M','3','Medium', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Remediation Cost Effort', 'L','2','Low', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'CISCO'),'Remediation Cost Effort', 'L','1','Very Low', GETDATE(), 2, NULL, NULL ),



((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Risk Probability', 'A','A','AlmostCertain', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Risk Probability', 'I','I','Informational', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Risk Probability', 'L','L','Likely', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Risk Probability', 'P','P','Possible', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Risk Probability', 'R','R','Rare', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Risk Probability', 'U','U','Unlikely', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Vulnerability Impact', 'C','C','Catastrophic', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Vulnerability Impact', 'I','I','Insignificant', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Vulnerability Impact', 'IF','IF','Informational', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Vulnerability Impact', 'MI','MI','Minor', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Vulnerability Impact', 'MJ','MJ','Major', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Vulnerability Impact', 'MO','MO','Moderate', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Vulnerability Severity', 'C','C','Critical', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Vulnerability Severity', 'H','H','High', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Vulnerability Severity', 'I','I','Informational', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Vulnerability Severity', 'L','L','Low', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Vulnerability Severity', 'M','M','Medium', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Remediation Cost Effort', 'H','H','High', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Remediation Cost Effort', 'M','M','Medium', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Remediation Cost Effort', 'L','L','Low', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'OWASP-A1','OWASP-A1','Injection', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'OWASP-A10','OWASP-A10','Unvalidated Redirects and Forwards', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'OWASP-A2','OWASP-A2','Broken Authentication and Session Management', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'OWASP-A3','OWASP-A3','Cross-Site Scripting (XSS)', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'OWASP-A4','OWASP-A4','Insecure Direct Object References', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'OWASP-A5','OWASP-A5','Security Misconfiguration', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'OWASP-A6','OWASP-A6','Sensitive Data Exposure', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'OWASP-A7','OWASP-A7','Missing Function Level Access Control', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'OWASP-A8','OWASP-A8','Cross-Site Request Forgery (CSRF)', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'OWASP-A9','OWASP-A9','Using Components with Known Vulnerabilities', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'RCA-1','RCA-1','Insufficient Patch Management', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'RCA-2','RCA-2','Insufficient Threat Management', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'RCA-3','RCA-3','Lack of Security Baselines', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'RCA-4','RCA-4','Poor Integration of Security into the System Development Life Cycle', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'RCA-5','RCA-5','Security Architecture Weaknesses', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'RCA-6','RCA-6','Inadequate Incident Response Procedures', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'RCA-7','RCA-7','Inadequate Training', GETDATE(), 2, NULL, NULL ),
((SELECT MSTR_LKP_KEY FROM dbo.MSTR_LKP WHERE LKP_ENTY_TYP_NM = 'Source' and LKP_ENTY_NM = 'Common Format v1.0'),'Root Cause Analysis', 'RCA-8','RCA-8','Lack of Security Policies or Policy Enforcement', GETDATE(), 2, NULL, NULL );



SET IDENTITY_INSERT [dbo].[RPT_NM] ON 

INSERT [dbo].[RPT_NM] ([RPT_NM_KEY], [SECUR_SRVC_CD], [RPT_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (1, NULL, N'Executive Summary', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[RPT_NM] ([RPT_NM_KEY], [SECUR_SRVC_CD], [RPT_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (2, N'AV', N'Application Vulnerability Assessment', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[RPT_NM] ([RPT_NM_KEY], [SECUR_SRVC_CD], [RPT_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (3, N'AC', N'Architecture Compliance Assessment', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[RPT_NM] ([RPT_NM_KEY], [SECUR_SRVC_CD], [RPT_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (4, N'RT', N'Limited Red Team Assessment', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[RPT_NM] ([RPT_NM_KEY], [SECUR_SRVC_CD], [RPT_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (5, N'NV', N'Network Vulnerability Assessment', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[RPT_NM] ([RPT_NM_KEY], [SECUR_SRVC_CD], [RPT_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (6, N'PT', N'Penetration Testing', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[RPT_NM] ([RPT_NM_KEY], [SECUR_SRVC_CD], [RPT_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (7, N'SR', N'Security Risk Assessment', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[RPT_NM] ([RPT_NM_KEY], [SECUR_SRVC_CD], [RPT_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (8, N'TH', N'Threat Hunting (Cyber Intelligence Services)', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[RPT_NM] ([RPT_NM_KEY], [SECUR_SRVC_CD], [RPT_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (9, N'WR', N'Wireless Risk Assessment', GETDATE(), 2, NULL, NULL)
SET IDENTITY_INSERT [dbo].[RPT_NM] OFF


SET IDENTITY_INSERT [dbo].[OS_CATGY] ON 

INSERT [dbo].[OS_CATGY] ([OS_CATGY_KEY], [OS_CATGY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (1, N'Windows', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[OS_CATGY] ([OS_CATGY_KEY], [OS_CATGY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (2, N'Linux', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[OS_CATGY] ([OS_CATGY_KEY], [OS_CATGY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (3, N'Unix', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[OS_CATGY] ([OS_CATGY_KEY], [OS_CATGY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (4, N'Mac', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[OS_CATGY] ([OS_CATGY_KEY], [OS_CATGY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (5, N'VMWare', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[OS_CATGY] ([OS_CATGY_KEY], [OS_CATGY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (6, N'MainFrame', GETDATE(), 2, NULL, NULL)
INSERT [dbo].[OS_CATGY] ([OS_CATGY_KEY], [OS_CATGY_NM], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (7, N'Other', GETDATE(), 2, NULL, NULL)
SET IDENTITY_INSERT [dbo].[OS_CATGY] OFF


SET IDENTITY_INSERT [dbo].[OWASP_TOP_10] ON 


INSERT [dbo].[OWASP_TOP_10] ([OWASP_TOP_10_KEY], [OWASP_CD], [OWASP_NM], [OWASP_DESC], [OWASP_SHRT_DESC], [PUBL_DT], [CURR_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (1, N'A1', N'Injection', N'Injection flaws, such as SQL, OS, and LDAP injection occur when untrusted data is sent to an interpreter as part of a command or query. The attacker’s hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization.', N'Untrusted Data input allows malicious script execution in SQL, OS, or LDAP.', CAST(N'2013-12-06' AS Date), 1, GETDATE(), 2, NULL, NULL)

INSERT [dbo].[OWASP_TOP_10] ([OWASP_TOP_10_KEY], [OWASP_CD], [OWASP_NM], [OWASP_DESC], [OWASP_SHRT_DESC], [PUBL_DT], [CURR_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (2, N'A2', N'Broken Authentication and Session Management', N'Application functions related to authentication and session management are often not implemented correctly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities.', N'Weak authentication allows compromise of the application and misuse of user identity.', CAST(N'2013-12-06' AS Date), 1, GETDATE(), 2, NULL, NULL)

INSERT [dbo].[OWASP_TOP_10] ([OWASP_TOP_10_KEY], [OWASP_CD], [OWASP_NM], [OWASP_DESC], [OWASP_SHRT_DESC], [PUBL_DT], [CURR_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (3, N'A3', N'Cross-Site Scripting (XSS)', N'XSS flaws occur whenever an application takes untrusted data and sends it to a web browser without proper validation or escaping. XSS allows attackers to execute scripts in the victim’s browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.', N'Unvalidated input data allows script execution in browser to hijack session or redirect to malicious sites.', CAST(N'2013-12-06' AS Date), 1, GETDATE(), 2, NULL, NULL)

INSERT [dbo].[OWASP_TOP_10] ([OWASP_TOP_10_KEY], [OWASP_CD], [OWASP_NM], [OWASP_DESC], [OWASP_SHRT_DESC], [PUBL_DT], [CURR_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (4, N'A4', N'Insecure Direct Object References', N'A direct object reference occurs when a developer exposes a reference to an internal implementation object, such as a file, directory, or database key. Without an access control check or other protection, attackers can manipulate these references to access unauthorized data.', N'Weak access controls allow attackers to manipulate internal objects.', CAST(N'2013-12-06' AS Date), 1, GETDATE(), 2, NULL, NULL)

INSERT [dbo].[OWASP_TOP_10] ([OWASP_TOP_10_KEY], [OWASP_CD], [OWASP_NM], [OWASP_DESC], [OWASP_SHRT_DESC], [PUBL_DT], [CURR_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (5, N'A5', N'Security Misconfiguration', N'od security requires having a secure configuration defined and deployed for the application, frameworks, application server, web server, database server, and platform. Secure settings should be defined, implemented, and maintained, as defaults are often insecure. Additionally, software should be kept up to date.', N'Insecure configuration of OS, App, or DB layers to include patching/default settings provide multiple-layered attack vectors.', CAST(N'2013-12-06' AS Date), 1, GETDATE(), 2, NULL, NULL)

INSERT [dbo].[OWASP_TOP_10] ([OWASP_TOP_10_KEY], [OWASP_CD], [OWASP_NM], [OWASP_DESC], [OWASP_SHRT_DESC], [PUBL_DT], [CURR_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (6, N'A6', N'Sensitive Data Exposure', N'Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data deserves extra protection such as encryption at rest or in transit, as well as special precautions when exchanged with the browser.', N'Sensitive data may be stolen while in-transit or at-rest due to lack of encryption, poor coding practices, or security misconfigurations.', CAST(N'2013-12-06' AS Date), 1, GETDATE(), 2, NULL, NULL)

INSERT [dbo].[OWASP_TOP_10] ([OWASP_TOP_10_KEY], [OWASP_CD], [OWASP_NM], [OWASP_DESC], [OWASP_SHRT_DESC], [PUBL_DT], [CURR_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (7, N'A7', N'Missing Function Level Access Control', N'Most web applications verify function level access rights before making that functionality visible in the UI. However, applications need to perform the same access control checks on the server when each function is accessed. If requests are not verified, attackers will be able to forge requests in order to access functionality without proper authorization.', N'Unverified access control to functions may result in forged requests without authorization.', CAST(N'2013-12-06' AS Date), 1, GETDATE(), 2, NULL, NULL)

INSERT [dbo].[OWASP_TOP_10] ([OWASP_TOP_10_KEY], [OWASP_CD], [OWASP_NM], [OWASP_DESC], [OWASP_SHRT_DESC], [PUBL_DT], [CURR_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (8, N'A8', N'Cross-Site Request Forgery (CSRF)', N'A CSRF attack forces a logged-on victim’s browser to send a forged HTTP request, including the victim’s session cookie and any other automatically included authentication information, to a vulnerable web application. This allows the attacker to force the victim’s browser to generate requests the vulnerable application thinks are legitimate requests from the victim.', N'This is a browser-based attack that uses the victim''s own authentication/cookies for attacks against the application.', CAST(N'2013-12-06' AS Date), 1, GETDATE(), 2, NULL, NULL)

INSERT [dbo].[OWASP_TOP_10] ([OWASP_TOP_10_KEY], [OWASP_CD], [OWASP_NM], [OWASP_DESC], [OWASP_SHRT_DESC], [PUBL_DT], [CURR_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (9, N'A9', N'Using Components with Known Vulnerabilities', N'Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts.', N'Use of libraries or software modules with vulnerabilities result in attacks against the application,database, or OS due to escalated privileges of the component.', CAST(N'2013-12-06' AS Date), 1, GETDATE(), 2, NULL, NULL)

INSERT [dbo].[OWASP_TOP_10] ([OWASP_TOP_10_KEY], [OWASP_CD], [OWASP_NM], [OWASP_DESC], [OWASP_SHRT_DESC], [PUBL_DT], [CURR_IND], [CREAT_DT], [CREAT_USER_ID], [UPDT_DT], [UPDT_USER_ID]) VALUES (10, N'A10', N'Unvalidated Redirects and Forwards', N'Web applications frequently redirect and forward users to other pages and websites, and use untrusted data to determine the destination pages. Without proper validation, attackers can redirect victims to phishing or malware sites, or use forwards to access unauthorized pages.', N'Use of untrusted data to control application redirects can send victims to phishing/malware sites while forwards can result in access to unauthorized pages.', CAST(N'2013-12-06' AS Date), 1, GETDATE(), 2, NULL, NULL)

SET IDENTITY_INSERT [dbo].[OWASP_TOP_10] OFF


GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH CHECK CHECK CONSTRAINT [FK_CLNT_ENGMT_15];

ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH CHECK CHECK CONSTRAINT [FK_CLNT_SECUR_SRVC_ENGMT_19];

ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_16];

ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_17];

ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_18];

ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_23];

ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH CHECK CHECK CONSTRAINT [FK_ORG_25];

ALTER TABLE [dbo].[APPL_FL_UPLOAD_LOG] WITH CHECK CHECK CONSTRAINT [FK_USER_PRFL_12];

ALTER TABLE [dbo].[APPL_ROLE] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_93];

ALTER TABLE [dbo].[APPL_ROLE] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_114];

ALTER TABLE [dbo].[APPL_ROLE_PERMSN_GRP] WITH CHECK CHECK CONSTRAINT [FK_APPL_ROLE_27];

ALTER TABLE [dbo].[APPL_ROLE_PERMSN_GRP] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_33];

ALTER TABLE [dbo].[APPL_ROLE_PERMSN_GRP] WITH CHECK CHECK CONSTRAINT [FK_PERMSN_GRP_86];

ALTER TABLE [dbo].[CD_XREF] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_30];

ALTER TABLE [dbo].[CLNT_ENGMT] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_1];

ALTER TABLE [dbo].[CLNT_ENGMT] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_2];

ALTER TABLE [dbo].[CLNT_ENGMT] WITH CHECK CHECK CONSTRAINT [FK_ORG_44];

ALTER TABLE [dbo].[CLNT_ENGMT] WITH CHECK CHECK CONSTRAINT [FK_SECUR_PKG_4];

ALTER TABLE [dbo].[CLNT_ENGMT_USER_ASGN] WITH CHECK CHECK CONSTRAINT [FK_CLNT_ENGMT_63];

ALTER TABLE [dbo].[CLNT_ENGMT_USER_ASGN] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_50];

ALTER TABLE [dbo].[CLNT_ENGMT_USER_ASGN] WITH CHECK CHECK CONSTRAINT [FK_USER_PRFL_62];

ALTER TABLE [dbo].[CLNT_REL_ENGMT_ID] WITH CHECK CHECK CONSTRAINT [FK_CLNT_ENGMT_3];

ALTER TABLE [dbo].[CLNT_REL_ENGMT_ID] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_5];

ALTER TABLE [dbo].[CLNT_REL_ENGMT_ID] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_54];

ALTER TABLE [dbo].[CLNT_SCHM_LOG] WITH CHECK CHECK CONSTRAINT [FK_ORG_115];

ALTER TABLE [dbo].[CLNT_SECUR_SRVC_ENGMT] WITH CHECK CHECK CONSTRAINT [FK_CLNT_ENGMT_61];

ALTER TABLE [dbo].[CLNT_SECUR_SRVC_ENGMT] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_47];

ALTER TABLE [dbo].[CLNT_SECUR_SRVC_ENGMT] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_48];

ALTER TABLE [dbo].[CLNT_SECUR_SRVC_ENGMT] WITH CHECK CHECK CONSTRAINT [FK_SECUR_SRVC_43];

ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH CHECK CHECK CONSTRAINT [FK_APPL_FL_UPLOAD_LOG_95];

ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH CHECK CHECK CONSTRAINT [FK_CLNT_SECUR_SRVC_ENGMT_106];

ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH CHECK CHECK CONSTRAINT [FK_CVE_113];

ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_102];

ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_103];

ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH CHECK CHECK CONSTRAINT [FK_ORG_104];

ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH CHECK CHECK CONSTRAINT [FK_OS_112];

ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH CHECK CHECK CONSTRAINT [FK_OWASP_TOP_10_100];

ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH CHECK CHECK CONSTRAINT [FK_RISK_PRBL_109];

ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH CHECK CHECK CONSTRAINT [FK_RMDTN_CST_EFFRT_110];

ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH CHECK CHECK CONSTRAINT [FK_VULN_CATGY_111];

ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH CHECK CHECK CONSTRAINT [FK_VULN_IMP_108];

ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH CHECK CHECK CONSTRAINT [FK_VULN_INSTC_STS_107];

ALTER TABLE [dbo].[CLNT_VULN_INSTC] WITH CHECK CHECK CONSTRAINT [FK_VULN_SEV_101];

ALTER TABLE [dbo].[CLNT_VULN_SECUR_CTL] WITH CHECK CHECK CONSTRAINT [FK_CLNT_VULN_INSTC_83];

ALTER TABLE [dbo].[CLNT_VULN_SECUR_CTL] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_79];

ALTER TABLE [dbo].[CLNT_VULN_SECUR_CTL] WITH CHECK CHECK CONSTRAINT [FK_SECUR_CTL_76];

ALTER TABLE [dbo].[CVE_SECUR_CTL_MAP] WITH CHECK CHECK CONSTRAINT [FK_CVE_8];

ALTER TABLE [dbo].[CVE_SECUR_CTL_MAP] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_78];

ALTER TABLE [dbo].[CVE_SECUR_CTL_MAP] WITH CHECK CHECK CONSTRAINT [FK_SECUR_CTL_9];

ALTER TABLE [dbo].[ETL_ERR_LOG] WITH CHECK CHECK CONSTRAINT [FK_ETL_AUD_LOG_11];

ALTER TABLE [dbo].[NTF_MSG] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_35];

ALTER TABLE [dbo].[ORG] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_57];

ALTER TABLE [dbo].[ORG] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_58];

ALTER TABLE [dbo].[ORG] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_60];

ALTER TABLE [dbo].[ORG] WITH CHECK CHECK CONSTRAINT [FK_ORG_59];

ALTER TABLE [dbo].[ORG_REL_ID] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_51];

ALTER TABLE [dbo].[ORG_REL_ID] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_67];

ALTER TABLE [dbo].[ORG_REL_ID] WITH CHECK CHECK CONSTRAINT [FK_ORG_64];

ALTER TABLE [dbo].[OS] WITH CHECK CHECK CONSTRAINT [FK_OS_CATGY_82];

ALTER TABLE [dbo].[PERMSN] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_80];

ALTER TABLE [dbo].[PERMSN] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_92];

ALTER TABLE [dbo].[PERMSN] WITH CHECK CHECK CONSTRAINT [FK_PERMSN_68];

ALTER TABLE [dbo].[PERMSN_GRP] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_70];

ALTER TABLE [dbo].[PERMSN_GRP_ASSOC] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_31];

ALTER TABLE [dbo].[PERMSN_GRP_ASSOC] WITH CHECK CHECK CONSTRAINT [FK_PERMSN_69];

ALTER TABLE [dbo].[PERMSN_GRP_ASSOC] WITH CHECK CHECK CONSTRAINT [FK_PERMSN_GRP_85];

ALTER TABLE [dbo].[RPT_FL_UPLOAD_LOG] WITH CHECK CHECK CONSTRAINT [FK_CLNT_ENGMT_13];

ALTER TABLE [dbo].[RPT_FL_UPLOAD_LOG] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_20];

ALTER TABLE [dbo].[RPT_FL_UPLOAD_LOG] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_22];

ALTER TABLE [dbo].[RPT_FL_UPLOAD_LOG] WITH CHECK CHECK CONSTRAINT [FK_ORG_21];

ALTER TABLE [dbo].[RPT_FL_UPLOAD_LOG] WITH CHECK CHECK CONSTRAINT [FK_RPT_NM_14];

ALTER TABLE [dbo].[RPT_NM] WITH CHECK CHECK CONSTRAINT [FK_SECUR_SRVC_24];

ALTER TABLE [dbo].[SECUR_CTL] WITH CHECK CHECK CONSTRAINT [FK_REG_CMPLN_6];

ALTER TABLE [dbo].[SECUR_CTL_MAP] WITH CHECK CHECK CONSTRAINT [FK_SECUR_CTL_10];

ALTER TABLE [dbo].[SECUR_CTL_MAP] WITH CHECK CHECK CONSTRAINT [FK_SECUR_CTL_7];

ALTER TABLE [dbo].[SECUR_PKG] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_49];

ALTER TABLE [dbo].[SECUR_PKG_OFR] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_53];

ALTER TABLE [dbo].[SECUR_PKG_OFR] WITH CHECK CHECK CONSTRAINT [FK_SECUR_PKG_45];

ALTER TABLE [dbo].[SECUR_PKG_OFR] WITH CHECK CHECK CONSTRAINT [FK_SECUR_SRVC_46];

ALTER TABLE [dbo].[SECUR_SRVC] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_55];

ALTER TABLE [dbo].[ST_CD] WITH CHECK CHECK CONSTRAINT [FK_CNTRY_CD_29];

ALTER TABLE [dbo].[USER_APPL_ROLE] WITH CHECK CHECK CONSTRAINT [FK_APPL_ROLE_28];

ALTER TABLE [dbo].[USER_APPL_ROLE] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_71];

ALTER TABLE [dbo].[USER_APPL_ROLE] WITH CHECK CHECK CONSTRAINT [FK_USER_PRFL_32];

ALTER TABLE [dbo].[USER_CLNT_SRVC_ASGN] WITH CHECK CHECK CONSTRAINT [FK_CLNT_SECUR_SRVC_ENGMT_65];

ALTER TABLE [dbo].[USER_CLNT_SRVC_ASGN] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_52];

ALTER TABLE [dbo].[USER_CLNT_SRVC_ASGN] WITH CHECK CHECK CONSTRAINT [FK_SECUR_SRVC_42];

ALTER TABLE [dbo].[USER_CLNT_SRVC_ASGN] WITH CHECK CHECK CONSTRAINT [FK_USER_PRFL_66];

ALTER TABLE [dbo].[USER_EMAIL_LOG] WITH CHECK CHECK CONSTRAINT [FK_NTF_MSG_39];

ALTER TABLE [dbo].[USER_EMAIL_LOG] WITH CHECK CHECK CONSTRAINT [FK_USER_PRFL_41];

ALTER TABLE [dbo].[USER_EVNT_LOG] WITH CHECK CHECK CONSTRAINT [FK_USER_PRFL_38];

ALTER TABLE [dbo].[USER_PRFL] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_36];

ALTER TABLE [dbo].[USER_PRFL] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_37];

ALTER TABLE [dbo].[USER_PRFL] WITH CHECK CHECK CONSTRAINT [FK_ORG_56];

ALTER TABLE [dbo].[USER_SECUR_DTL] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_74];

ALTER TABLE [dbo].[USER_SECUR_DTL] WITH CHECK CHECK CONSTRAINT [FK_MSTR_LKP_81];

ALTER TABLE [dbo].[USER_SECUR_DTL] WITH CHECK CHECK CONSTRAINT [FK_USER_PRFL_88];

ALTER TABLE [dbo].[USER_SESS_LOG] WITH CHECK CHECK CONSTRAINT [FK_USER_PRFL_40];

ALTER TABLE [dbo].[VULN] WITH CHECK CHECK CONSTRAINT [FK_VULN_CATGY_118];


GO
PRINT N'Update complete.';


GO
